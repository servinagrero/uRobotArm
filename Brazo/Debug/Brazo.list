
Brazo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007210  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800756c  0800756c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800756c  0800756c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800756c  0800756c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800756c  0800756c  0001756c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007570  08007570  00017570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  20000074  080075e8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  080075e8  00020b40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012151  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d2c  00000000  00000000  000321ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001078  00000000  00000000  00034f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  00035f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019433  00000000  00000000  00036eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e905  00000000  00000000  000502eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097f05  00000000  00000000  0005ebf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6af5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc4  00000000  00000000  000f6b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000074 	.word	0x20000074
 8000158:	00000000 	.word	0x00000000
 800015c:	08007334 	.word	0x08007334

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000078 	.word	0x20000078
 8000178:	08007334 	.word	0x08007334

0800017c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000182:	2300      	movs	r3, #0
 8000184:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000186:	2003      	movs	r0, #3
 8000188:	f000 fd82 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800018c:	2000      	movs	r0, #0
 800018e:	f000 f80d 	bl	80001ac <HAL_InitTick>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000198:	2301      	movs	r3, #1
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	e001      	b.n	80001a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800019e:	f005 f81b 	bl	80051d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001a2:	79fb      	ldrb	r3, [r7, #7]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80001b8:	4b16      	ldr	r3, [pc, #88]	; (8000214 <HAL_InitTick+0x68>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d022      	beq.n	8000206 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <HAL_InitTick+0x6c>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <HAL_InitTick+0x68>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80001d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 fd90 	bl	8000cfa <HAL_SYSTICK_Config>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d10f      	bne.n	8000200 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b0f      	cmp	r3, #15
 80001e4:	d809      	bhi.n	80001fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001e6:	2200      	movs	r2, #0
 80001e8:	6879      	ldr	r1, [r7, #4]
 80001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001ee:	f000 fd5a 	bl	8000ca6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001f2:	4a0a      	ldr	r2, [pc, #40]	; (800021c <HAL_InitTick+0x70>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	6013      	str	r3, [r2, #0]
 80001f8:	e007      	b.n	800020a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80001fa:	2301      	movs	r3, #1
 80001fc:	73fb      	strb	r3, [r7, #15]
 80001fe:	e004      	b.n	800020a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000200:	2301      	movs	r3, #1
 8000202:	73fb      	strb	r3, [r7, #15]
 8000204:	e001      	b.n	800020a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000206:	2301      	movs	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800020a:	7bfb      	ldrb	r3, [r7, #15]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000004 	.word	0x20000004
 8000218:	2000000c 	.word	0x2000000c
 800021c:	20000000 	.word	0x20000000

08000220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <HAL_IncTick+0x1c>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <HAL_IncTick+0x20>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4413      	add	r3, r2
 800022e:	4a03      	ldr	r2, [pc, #12]	; (800023c <HAL_IncTick+0x1c>)
 8000230:	6013      	str	r3, [r2, #0]
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	200000d0 	.word	0x200000d0
 8000240:	20000004 	.word	0x20000004

08000244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  return uwTick;
 8000248:	4b02      	ldr	r3, [pc, #8]	; (8000254 <HAL_GetTick+0x10>)
 800024a:	681b      	ldr	r3, [r3, #0]
}
 800024c:	4618      	mov	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	200000d0 	.word	0x200000d0

08000258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000260:	f7ff fff0 	bl	8000244 <HAL_GetTick>
 8000264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000270:	d004      	beq.n	800027c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <HAL_Delay+0x40>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	4413      	add	r3, r2
 800027a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800027c:	bf00      	nop
 800027e:	f7ff ffe1 	bl	8000244 <HAL_GetTick>
 8000282:	4602      	mov	r2, r0
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	1ad3      	subs	r3, r2, r3
 8000288:	68fa      	ldr	r2, [r7, #12]
 800028a:	429a      	cmp	r2, r3
 800028c:	d8f7      	bhi.n	800027e <HAL_Delay+0x26>
  {
  }
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004

0800029c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08e      	sub	sp, #56	; 0x38
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002a4:	2300      	movs	r3, #0
 80002a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d101      	bne.n	80002bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80002b8:	2301      	movs	r3, #1
 80002ba:	e127      	b.n	800050c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d115      	bne.n	80002f6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2200      	movs	r2, #0
 80002ce:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002d8:	4b8e      	ldr	r3, [pc, #568]	; (8000514 <HAL_ADC_Init+0x278>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a8d      	ldr	r2, [pc, #564]	; (8000514 <HAL_ADC_Init+0x278>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6213      	str	r3, [r2, #32]
 80002e4:	4b8b      	ldr	r3, [pc, #556]	; (8000514 <HAL_ADC_Init+0x278>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f003 feb7 	bl	8004064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	f003 0310 	and.w	r3, r3, #16
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 80ff 	bne.w	8000502 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000308:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800030c:	f023 0302 	bic.w	r3, r3, #2
 8000310:	f043 0202 	orr.w	r2, r3, #2
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000318:	4b7f      	ldr	r3, [pc, #508]	; (8000518 <HAL_ADC_Init+0x27c>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	497c      	ldr	r1, [pc, #496]	; (8000518 <HAL_ADC_Init+0x27c>)
 8000326:	4313      	orrs	r3, r2
 8000328:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000332:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800033a:	4619      	mov	r1, r3
 800033c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000340:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000342:	6a3b      	ldr	r3, [r7, #32]
 8000344:	fa93 f3a3 	rbit	r3, r3
 8000348:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	fab3 f383 	clz	r3, r3
 8000350:	b2db      	uxtb	r3, r3
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000356:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800035c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000364:	4619      	mov	r1, r3
 8000366:	2302      	movs	r3, #2
 8000368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036c:	fa93 f3a3 	rbit	r3, r3
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000374:	fab3 f383 	clz	r3, r3
 8000378:	b2db      	uxtb	r3, r3
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800037e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000382:	4313      	orrs	r3, r2
 8000384:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800038a:	2b10      	cmp	r3, #16
 800038c:	d007      	beq.n	800039e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000396:	4313      	orrs	r3, r2
 8000398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800039a:	4313      	orrs	r3, r2
 800039c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a8:	2b40      	cmp	r3, #64	; 0x40
 80003aa:	d04f      	beq.n	800044c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003b2:	4313      	orrs	r3, r2
 80003b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80003be:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	6912      	ldr	r2, [r2, #16]
 80003c4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80003c8:	d003      	beq.n	80003d2 <HAL_ADC_Init+0x136>
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	6912      	ldr	r2, [r2, #16]
 80003ce:	2a01      	cmp	r2, #1
 80003d0:	d102      	bne.n	80003d8 <HAL_ADC_Init+0x13c>
 80003d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003d6:	e000      	b.n	80003da <HAL_ADC_Init+0x13e>
 80003d8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80003da:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80003dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003de:	4313      	orrs	r3, r2
 80003e0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d125      	bne.n	8000438 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d114      	bne.n	8000420 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	3b01      	subs	r3, #1
 80003fc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000400:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000402:	69ba      	ldr	r2, [r7, #24]
 8000404:	fa92 f2a2 	rbit	r2, r2
 8000408:	617a      	str	r2, [r7, #20]
  return result;
 800040a:	697a      	ldr	r2, [r7, #20]
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	4093      	lsls	r3, r2
 8000414:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800041a:	4313      	orrs	r3, r2
 800041c:	633b      	str	r3, [r7, #48]	; 0x30
 800041e:	e00b      	b.n	8000438 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000424:	f043 0220 	orr.w	r2, r3, #32
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000430:	f043 0201 	orr.w	r2, r3, #1
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	4b37      	ldr	r3, [pc, #220]	; (800051c <HAL_ADC_Init+0x280>)
 8000440:	4013      	ands	r3, r2
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	6812      	ldr	r2, [r2, #0]
 8000446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000448:	430b      	orrs	r3, r1
 800044a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	4b33      	ldr	r3, [pc, #204]	; (8000520 <HAL_ADC_Init+0x284>)
 8000454:	4013      	ands	r3, r2
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	6812      	ldr	r2, [r2, #0]
 800045a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800045c:	430b      	orrs	r3, r1
 800045e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000468:	d003      	beq.n	8000472 <HAL_ADC_Init+0x1d6>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	691b      	ldr	r3, [r3, #16]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d119      	bne.n	80004a6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000480:	3b01      	subs	r3, #1
 8000482:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000486:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000488:	693a      	ldr	r2, [r7, #16]
 800048a:	fa92 f2a2 	rbit	r2, r2
 800048e:	60fa      	str	r2, [r7, #12]
  return result;
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	b2d2      	uxtb	r2, r2
 8000498:	fa03 f202 	lsl.w	r2, r3, r2
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	631a      	str	r2, [r3, #48]	; 0x30
 80004a4:	e007      	b.n	80004b6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80004b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	689a      	ldr	r2, [r3, #8]
 80004bc:	4b19      	ldr	r3, [pc, #100]	; (8000524 <HAL_ADC_Init+0x288>)
 80004be:	4013      	ands	r3, r2
 80004c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d10b      	bne.n	80004de <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d0:	f023 0303 	bic.w	r3, r3, #3
 80004d4:	f043 0201 	orr.w	r2, r3, #1
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	64da      	str	r2, [r3, #76]	; 0x4c
 80004dc:	e014      	b.n	8000508 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f023 0312 	bic.w	r3, r3, #18
 80004e6:	f043 0210 	orr.w	r2, r3, #16
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80004f2:	f043 0201 	orr.w	r2, r3, #1
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80004fa:	2301      	movs	r3, #1
 80004fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000500:	e002      	b.n	8000508 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000502:	2301      	movs	r3, #1
 8000504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000508:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800050c:	4618      	mov	r0, r3
 800050e:	3738      	adds	r7, #56	; 0x38
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40023800 	.word	0x40023800
 8000518:	40012700 	.word	0x40012700
 800051c:	fcfc16ff 	.word	0xfcfc16ff
 8000520:	c0fff189 	.word	0xc0fff189
 8000524:	bf80fffe 	.word	0xbf80fffe

08000528 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000534:	2300      	movs	r3, #0
 8000536:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800053e:	2b01      	cmp	r3, #1
 8000540:	d101      	bne.n	8000546 <HAL_ADC_Start_DMA+0x1e>
 8000542:	2302      	movs	r3, #2
 8000544:	e074      	b.n	8000630 <HAL_ADC_Start_DMA+0x108>
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	2201      	movs	r2, #1
 800054a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800054e:	68f8      	ldr	r0, [r7, #12]
 8000550:	f000 fa00 	bl	8000954 <ADC_Enable>
 8000554:	4603      	mov	r3, r0
 8000556:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000558:	7dfb      	ldrb	r3, [r7, #23]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d167      	bne.n	800062e <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000566:	f023 0301 	bic.w	r3, r3, #1
 800056a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800057c:	2b00      	cmp	r3, #0
 800057e:	d007      	beq.n	8000590 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000584:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000588:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800059c:	d106      	bne.n	80005ac <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80005a2:	f023 0206 	bic.w	r2, r3, #6
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	651a      	str	r2, [r3, #80]	; 0x50
 80005aa:	e002      	b.n	80005b2 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2200      	movs	r2, #0
 80005b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <HAL_ADC_Start_DMA+0x110>)
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005c6:	4a1d      	ldr	r2, [pc, #116]	; (800063c <HAL_ADC_Start_DMA+0x114>)
 80005c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ce:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <HAL_ADC_Start_DMA+0x118>)
 80005d0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80005da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	685a      	ldr	r2, [r3, #4]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80005ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	689a      	ldr	r2, [r3, #8]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3358      	adds	r3, #88	; 0x58
 8000606:	4619      	mov	r1, r3
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f000 fbf6 	bl	8000dfc <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d107      	bne.n	800062e <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	689a      	ldr	r2, [r3, #8]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800062c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800062e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08000a01 	.word	0x08000a01
 800063c:	08000aa9 	.word	0x08000aa9
 8000640:	08000ac5 	.word	0x08000ac5

08000644 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr

08000656 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
	...

0800067c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000694:	2b01      	cmp	r3, #1
 8000696:	d101      	bne.n	800069c <HAL_ADC_ConfigChannel+0x20>
 8000698:	2302      	movs	r3, #2
 800069a:	e14f      	b.n	800093c <HAL_ADC_ConfigChannel+0x2c0>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2201      	movs	r2, #1
 80006a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d81c      	bhi.n	80006e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	4613      	mov	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4413      	add	r3, r2
 80006bc:	3b05      	subs	r3, #5
 80006be:	221f      	movs	r2, #31
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	43db      	mvns	r3, r3
 80006c6:	4019      	ands	r1, r3
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	685a      	ldr	r2, [r3, #4]
 80006d0:	4613      	mov	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4413      	add	r3, r2
 80006d6:	3b05      	subs	r3, #5
 80006d8:	fa00 f203 	lsl.w	r2, r0, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	430a      	orrs	r2, r1
 80006e2:	641a      	str	r2, [r3, #64]	; 0x40
 80006e4:	e07e      	b.n	80007e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	2b0c      	cmp	r3, #12
 80006ec:	d81c      	bhi.n	8000728 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	4613      	mov	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	3b23      	subs	r3, #35	; 0x23
 8000700:	221f      	movs	r2, #31
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	43db      	mvns	r3, r3
 8000708:	4019      	ands	r1, r3
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	4613      	mov	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	3b23      	subs	r3, #35	; 0x23
 800071a:	fa00 f203 	lsl.w	r2, r0, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	430a      	orrs	r2, r1
 8000724:	63da      	str	r2, [r3, #60]	; 0x3c
 8000726:	e05d      	b.n	80007e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	2b12      	cmp	r3, #18
 800072e:	d81c      	bhi.n	800076a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	3b41      	subs	r3, #65	; 0x41
 8000742:	221f      	movs	r2, #31
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	43db      	mvns	r3, r3
 800074a:	4019      	ands	r1, r3
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	4613      	mov	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	3b41      	subs	r3, #65	; 0x41
 800075c:	fa00 f203 	lsl.w	r2, r0, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	430a      	orrs	r2, r1
 8000766:	639a      	str	r2, [r3, #56]	; 0x38
 8000768:	e03c      	b.n	80007e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b18      	cmp	r3, #24
 8000770:	d81c      	bhi.n	80007ac <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	4613      	mov	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	3b5f      	subs	r3, #95	; 0x5f
 8000784:	221f      	movs	r2, #31
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	4019      	ands	r1, r3
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	3b5f      	subs	r3, #95	; 0x5f
 800079e:	fa00 f203 	lsl.w	r2, r0, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	635a      	str	r2, [r3, #52]	; 0x34
 80007aa:	e01b      	b.n	80007e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	4613      	mov	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	3b7d      	subs	r3, #125	; 0x7d
 80007be:	221f      	movs	r2, #31
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	43db      	mvns	r3, r3
 80007c6:	4019      	ands	r1, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	6818      	ldr	r0, [r3, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	4613      	mov	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	3b7d      	subs	r3, #125	; 0x7d
 80007d8:	fa00 f203 	lsl.w	r2, r0, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	430a      	orrs	r2, r1
 80007e2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b09      	cmp	r3, #9
 80007ea:	d81a      	bhi.n	8000822 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	6959      	ldr	r1, [r3, #20]
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	2207      	movs	r2, #7
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43db      	mvns	r3, r3
 8000804:	4019      	ands	r1, r3
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	6898      	ldr	r0, [r3, #8]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4613      	mov	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	fa00 f203 	lsl.w	r2, r0, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	430a      	orrs	r2, r1
 800081e:	615a      	str	r2, [r3, #20]
 8000820:	e05d      	b.n	80008de <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b13      	cmp	r3, #19
 8000828:	d81c      	bhi.n	8000864 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6919      	ldr	r1, [r3, #16]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	3b1e      	subs	r3, #30
 800083c:	2207      	movs	r2, #7
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	4019      	ands	r1, r3
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	6898      	ldr	r0, [r3, #8]
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	3b1e      	subs	r3, #30
 8000856:	fa00 f203 	lsl.w	r2, r0, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	430a      	orrs	r2, r1
 8000860:	611a      	str	r2, [r3, #16]
 8000862:	e03c      	b.n	80008de <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b1d      	cmp	r3, #29
 800086a:	d81c      	bhi.n	80008a6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	68d9      	ldr	r1, [r3, #12]
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4613      	mov	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	3b3c      	subs	r3, #60	; 0x3c
 800087e:	2207      	movs	r2, #7
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	4019      	ands	r1, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	6898      	ldr	r0, [r3, #8]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4613      	mov	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4413      	add	r3, r2
 8000896:	3b3c      	subs	r3, #60	; 0x3c
 8000898:	fa00 f203 	lsl.w	r2, r0, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	430a      	orrs	r2, r1
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	e01b      	b.n	80008de <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	3b5a      	subs	r3, #90	; 0x5a
 80008b8:	2207      	movs	r2, #7
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	4019      	ands	r1, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	6898      	ldr	r0, [r3, #8]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	4613      	mov	r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	4413      	add	r3, r2
 80008d0:	3b5a      	subs	r3, #90	; 0x5a
 80008d2:	fa00 f203 	lsl.w	r2, r0, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	430a      	orrs	r2, r1
 80008dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b10      	cmp	r3, #16
 80008e4:	d003      	beq.n	80008ee <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008ea:	2b11      	cmp	r3, #17
 80008ec:	d121      	bne.n	8000932 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <HAL_ADC_ConfigChannel+0x2cc>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d11b      	bne.n	8000932 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <HAL_ADC_ConfigChannel+0x2cc>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <HAL_ADC_ConfigChannel+0x2cc>)
 8000900:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000904:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b10      	cmp	r3, #16
 800090c:	d111      	bne.n	8000932 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_ADC_ConfigChannel+0x2d0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <HAL_ADC_ConfigChannel+0x2d4>)
 8000914:	fba2 2303 	umull	r2, r3, r2, r3
 8000918:	0c9a      	lsrs	r2, r3, #18
 800091a:	4613      	mov	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8000924:	e002      	b.n	800092c <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	3b01      	subs	r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1f9      	bne.n	8000926 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800093a:	7bfb      	ldrb	r3, [r7, #15]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40012700 	.word	0x40012700
 800094c:	2000000c 	.word	0x2000000c
 8000950:	431bde83 	.word	0x431bde83

08000954 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096e:	2b40      	cmp	r3, #64	; 0x40
 8000970:	d03c      	beq.n	80009ec <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f042 0201 	orr.w	r2, r2, #1
 8000980:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <ADC_Enable+0xa4>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a1d      	ldr	r2, [pc, #116]	; (80009fc <ADC_Enable+0xa8>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	0c9a      	lsrs	r2, r3, #18
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8000996:	e002      	b.n	800099e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	3b01      	subs	r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1f9      	bne.n	8000998 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80009a4:	f7ff fc4e 	bl	8000244 <HAL_GetTick>
 80009a8:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009aa:	e018      	b.n	80009de <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80009ac:	f7ff fc4a 	bl	8000244 <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d911      	bls.n	80009de <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f043 0210 	orr.w	r2, r3, #16
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009ca:	f043 0201 	orr.w	r2, r3, #1
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e007      	b.n	80009ee <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	2b40      	cmp	r3, #64	; 0x40
 80009ea:	d1df      	bne.n	80009ac <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000000c 	.word	0x2000000c
 80009fc:	431bde83 	.word	0x431bde83

08000a00 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d13d      	bne.n	8000a96 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d12c      	bne.n	8000a8e <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d127      	bne.n	8000a8e <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d006      	beq.n	8000a5a <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d119      	bne.n	8000a8e <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f022 0220 	bic.w	r2, r2, #32
 8000a68:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d105      	bne.n	8000a8e <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f043 0201 	orr.w	r2, r3, #1
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f7ff fdd8 	bl	8000644 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000a94:	e004      	b.n	8000aa0 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	4798      	blx	r3
}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff fdcd 	bl	8000656 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ae2:	f043 0204 	orr.w	r2, r3, #4
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff fdbc 	bl	8000668 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4906      	ldr	r1, [pc, #24]	; (8000b90 <__NVIC_EnableIRQ+0x34>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c5c:	d301      	bcc.n	8000c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00f      	b.n	8000c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <SysTick_Config+0x40>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c70:	f7ff ff90 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SysTick_Config+0x40>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SysTick_Config+0x40>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff2d 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb8:	f7ff ff42 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	6978      	ldr	r0, [r7, #20]
 8000cc4:	f7ff ff90 	bl	8000be8 <NVIC_EncodePriority>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff5f 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff35 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffa2 	bl	8000c4c <SysTick_Config>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e059      	b.n	8000dda <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <HAL_DMA_Init+0xd0>)
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d80f      	bhi.n	8000d52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <HAL_DMA_Init+0xd4>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a2b      	ldr	r2, [pc, #172]	; (8000dec <HAL_DMA_Init+0xd8>)
 8000d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d42:	091b      	lsrs	r3, r3, #4
 8000d44:	009a      	lsls	r2, r3, #2
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <HAL_DMA_Init+0xdc>)
 8000d4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d50:	e00e      	b.n	8000d70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_DMA_Init+0xe0>)
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a23      	ldr	r2, [pc, #140]	; (8000dec <HAL_DMA_Init+0xd8>)
 8000d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	009a      	lsls	r2, r3, #2
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <HAL_DMA_Init+0xe4>)
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2202      	movs	r2, #2
 8000d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40026407 	.word	0x40026407
 8000de8:	bffd9ff8 	.word	0xbffd9ff8
 8000dec:	cccccccd 	.word	0xcccccccd
 8000df0:	40026000 	.word	0x40026000
 8000df4:	bffd9bf8 	.word	0xbffd9bf8
 8000df8:	40026400 	.word	0x40026400

08000dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d101      	bne.n	8000e1c <HAL_DMA_Start_IT+0x20>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	e04b      	b.n	8000eb4 <HAL_DMA_Start_IT+0xb8>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d13a      	bne.n	8000ea6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2202      	movs	r2, #2
 8000e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0201 	bic.w	r2, r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	68b9      	ldr	r1, [r7, #8]
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f000 f921 	bl	800109c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d008      	beq.n	8000e74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 020e 	orr.w	r2, r2, #14
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e00f      	b.n	8000e94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0204 	bic.w	r2, r2, #4
 8000e82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 020a 	orr.w	r2, r2, #10
 8000e92:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0201 	orr.w	r2, r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	e005      	b.n	8000eb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d005      	beq.n	8000ee0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e029      	b.n	8000f34 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 020e 	bic.w	r2, r2, #14
 8000eee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0201 	bic.w	r2, r2, #1
 8000efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	f003 021c 	and.w	r2, r3, #28
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	4798      	blx	r3
    }
  }
  return status;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 031c 	and.w	r3, r3, #28
 8000f5e:	2204      	movs	r2, #4
 8000f60:	409a      	lsls	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d026      	beq.n	8000fb8 <HAL_DMA_IRQHandler+0x7a>
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d021      	beq.n	8000fb8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d107      	bne.n	8000f92 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0204 	bic.w	r2, r2, #4
 8000f90:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 021c 	and.w	r2, r3, #28
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d071      	beq.n	8001092 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000fb6:	e06c      	b.n	8001092 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f003 031c 	and.w	r3, r3, #28
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d02e      	beq.n	800102a <HAL_DMA_IRQHandler+0xec>
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d029      	beq.n	800102a <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10b      	bne.n	8000ffc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 020a 	bic.w	r2, r2, #10
 8000ff2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f003 021c 	and.w	r2, r3, #28
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001008:	2102      	movs	r1, #2
 800100a:	fa01 f202 	lsl.w	r2, r1, r2
 800100e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	2b00      	cmp	r3, #0
 800101e:	d038      	beq.n	8001092 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001028:	e033      	b.n	8001092 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 031c 	and.w	r3, r3, #28
 8001032:	2208      	movs	r2, #8
 8001034:	409a      	lsls	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4013      	ands	r3, r2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d02a      	beq.n	8001094 <HAL_DMA_IRQHandler+0x156>
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	2b00      	cmp	r3, #0
 8001046:	d025      	beq.n	8001094 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 020e 	bic.w	r2, r2, #14
 8001056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f003 021c 	and.w	r2, r3, #28
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001092:	bf00      	nop
 8001094:	bf00      	nop
}
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 021c 	and.w	r2, r3, #28
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f202 	lsl.w	r2, r1, r2
 80010bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	d108      	bne.n	80010e0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010de:	e007      	b.n	80010f0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	60da      	str	r2, [r3, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001112:	e160      	b.n	80013d6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	4013      	ands	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8152 	beq.w	80013d0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x40>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b12      	cmp	r3, #18
 800113a:	d123      	bne.n	8001184 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	6939      	ldr	r1, [r7, #16]
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d00b      	beq.n	80011d8 <HAL_GPIO_Init+0xdc>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d007      	beq.n	80011d8 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011cc:	2b11      	cmp	r3, #17
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b12      	cmp	r3, #18
 80011d6:	d130      	bne.n	800123a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800120e:	2201      	movs	r2, #1
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	f003 0201 	and.w	r2, r3, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80ac 	beq.w	80013d0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001278:	4b5d      	ldr	r3, [pc, #372]	; (80013f0 <HAL_GPIO_Init+0x2f4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4a5c      	ldr	r2, [pc, #368]	; (80013f0 <HAL_GPIO_Init+0x2f4>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	4b5a      	ldr	r3, [pc, #360]	; (80013f0 <HAL_GPIO_Init+0x2f4>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001290:	4a58      	ldr	r2, [pc, #352]	; (80013f4 <HAL_GPIO_Init+0x2f8>)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a50      	ldr	r2, [pc, #320]	; (80013f8 <HAL_GPIO_Init+0x2fc>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d025      	beq.n	8001308 <HAL_GPIO_Init+0x20c>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <HAL_GPIO_Init+0x300>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d01f      	beq.n	8001304 <HAL_GPIO_Init+0x208>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a4e      	ldr	r2, [pc, #312]	; (8001400 <HAL_GPIO_Init+0x304>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d019      	beq.n	8001300 <HAL_GPIO_Init+0x204>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <HAL_GPIO_Init+0x308>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d013      	beq.n	80012fc <HAL_GPIO_Init+0x200>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <HAL_GPIO_Init+0x30c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d00d      	beq.n	80012f8 <HAL_GPIO_Init+0x1fc>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a4b      	ldr	r2, [pc, #300]	; (800140c <HAL_GPIO_Init+0x310>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d007      	beq.n	80012f4 <HAL_GPIO_Init+0x1f8>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a4a      	ldr	r2, [pc, #296]	; (8001410 <HAL_GPIO_Init+0x314>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d101      	bne.n	80012f0 <HAL_GPIO_Init+0x1f4>
 80012ec:	2306      	movs	r3, #6
 80012ee:	e00c      	b.n	800130a <HAL_GPIO_Init+0x20e>
 80012f0:	2307      	movs	r3, #7
 80012f2:	e00a      	b.n	800130a <HAL_GPIO_Init+0x20e>
 80012f4:	2305      	movs	r3, #5
 80012f6:	e008      	b.n	800130a <HAL_GPIO_Init+0x20e>
 80012f8:	2304      	movs	r3, #4
 80012fa:	e006      	b.n	800130a <HAL_GPIO_Init+0x20e>
 80012fc:	2303      	movs	r3, #3
 80012fe:	e004      	b.n	800130a <HAL_GPIO_Init+0x20e>
 8001300:	2302      	movs	r3, #2
 8001302:	e002      	b.n	800130a <HAL_GPIO_Init+0x20e>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_GPIO_Init+0x20e>
 8001308:	2300      	movs	r3, #0
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	4093      	lsls	r3, r2
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800131a:	4936      	ldr	r1, [pc, #216]	; (80013f4 <HAL_GPIO_Init+0x2f8>)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001328:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <HAL_GPIO_Init+0x318>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800134c:	4a31      	ldr	r2, [pc, #196]	; (8001414 <HAL_GPIO_Init+0x318>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001352:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HAL_GPIO_Init+0x318>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001376:	4a27      	ldr	r2, [pc, #156]	; (8001414 <HAL_GPIO_Init+0x318>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_GPIO_Init+0x318>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013a0:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <HAL_GPIO_Init+0x318>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_GPIO_Init+0x318>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <HAL_GPIO_Init+0x318>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f47f ae97 	bne.w	8001114 <HAL_GPIO_Init+0x18>
  } 
}
 80013e6:	bf00      	nop
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40010000 	.word	0x40010000
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020400 	.word	0x40020400
 8001400:	40020800 	.word	0x40020800
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40021000 	.word	0x40021000
 800140c:	40021400 	.word	0x40021400
 8001410:	40021800 	.word	0x40021800
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	887b      	ldrh	r3, [r7, #2]
 800145a:	4013      	ands	r3, r2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	041a      	lsls	r2, r3, #16
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001468:	e002      	b.n	8001470 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
	...

0800147c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f806 	bl	80014ac <HAL_GPIO_EXTI_Callback>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40010400 	.word	0x40010400

080014ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e10f      	b.n	80016f2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f003 f8de 	bl	80046a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2224      	movs	r2, #36	; 0x24
 80014f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001504:	f001 f8c4 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8001508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4a7b      	ldr	r2, [pc, #492]	; (80016fc <HAL_I2C_Init+0x23c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d807      	bhi.n	8001524 <HAL_I2C_Init+0x64>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4a7a      	ldr	r2, [pc, #488]	; (8001700 <HAL_I2C_Init+0x240>)
 8001518:	4293      	cmp	r3, r2
 800151a:	bf94      	ite	ls
 800151c:	2301      	movls	r3, #1
 800151e:	2300      	movhi	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	e006      	b.n	8001532 <HAL_I2C_Init+0x72>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4a77      	ldr	r2, [pc, #476]	; (8001704 <HAL_I2C_Init+0x244>)
 8001528:	4293      	cmp	r3, r2
 800152a:	bf94      	ite	ls
 800152c:	2301      	movls	r3, #1
 800152e:	2300      	movhi	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0db      	b.n	80016f2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4a72      	ldr	r2, [pc, #456]	; (8001708 <HAL_I2C_Init+0x248>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9b      	lsrs	r3, r3, #18
 8001544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	430a      	orrs	r2, r1
 8001558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4a64      	ldr	r2, [pc, #400]	; (80016fc <HAL_I2C_Init+0x23c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d802      	bhi.n	8001574 <HAL_I2C_Init+0xb4>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3301      	adds	r3, #1
 8001572:	e009      	b.n	8001588 <HAL_I2C_Init+0xc8>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	4a63      	ldr	r2, [pc, #396]	; (800170c <HAL_I2C_Init+0x24c>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	099b      	lsrs	r3, r3, #6
 8001586:	3301      	adds	r3, #1
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	430b      	orrs	r3, r1
 800158e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800159a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4956      	ldr	r1, [pc, #344]	; (80016fc <HAL_I2C_Init+0x23c>)
 80015a4:	428b      	cmp	r3, r1
 80015a6:	d80d      	bhi.n	80015c4 <HAL_I2C_Init+0x104>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1e59      	subs	r1, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	2b04      	cmp	r3, #4
 80015be:	bf38      	it	cc
 80015c0:	2304      	movcc	r3, #4
 80015c2:	e04f      	b.n	8001664 <HAL_I2C_Init+0x1a4>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d111      	bne.n	80015f0 <HAL_I2C_Init+0x130>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1e58      	subs	r0, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	440b      	add	r3, r1
 80015da:	fbb0 f3f3 	udiv	r3, r0, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	e012      	b.n	8001616 <HAL_I2C_Init+0x156>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1e58      	subs	r0, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	0099      	lsls	r1, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	fbb0 f3f3 	udiv	r3, r0, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_I2C_Init+0x15e>
 800161a:	2301      	movs	r3, #1
 800161c:	e022      	b.n	8001664 <HAL_I2C_Init+0x1a4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10e      	bne.n	8001644 <HAL_I2C_Init+0x184>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e58      	subs	r0, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6859      	ldr	r1, [r3, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	440b      	add	r3, r1
 8001634:	fbb0 f3f3 	udiv	r3, r0, r3
 8001638:	3301      	adds	r3, #1
 800163a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001642:	e00f      	b.n	8001664 <HAL_I2C_Init+0x1a4>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1e58      	subs	r0, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	0099      	lsls	r1, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	fbb0 f3f3 	udiv	r3, r0, r3
 800165a:	3301      	adds	r3, #1
 800165c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	6809      	ldr	r1, [r1, #0]
 8001668:	4313      	orrs	r3, r2
 800166a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6911      	ldr	r1, [r2, #16]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68d2      	ldr	r2, [r2, #12]
 800169e:	4311      	orrs	r1, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	430b      	orrs	r3, r1
 80016a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	000186a0 	.word	0x000186a0
 8001700:	001e847f 	.word	0x001e847f
 8001704:	003d08ff 	.word	0x003d08ff
 8001708:	431bde83 	.word	0x431bde83
 800170c:	10624dd3 	.word	0x10624dd3

08001710 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af02      	add	r7, sp, #8
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	461a      	mov	r2, r3
 800171c:	460b      	mov	r3, r1
 800171e:	817b      	strh	r3, [r7, #10]
 8001720:	4613      	mov	r3, r2
 8001722:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7fe fd8e 	bl	8000244 <HAL_GetTick>
 8001728:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b20      	cmp	r3, #32
 8001734:	f040 80e0 	bne.w	80018f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2319      	movs	r3, #25
 800173e:	2201      	movs	r2, #1
 8001740:	4970      	ldr	r1, [pc, #448]	; (8001904 <HAL_I2C_Master_Transmit+0x1f4>)
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f958 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800174e:	2302      	movs	r3, #2
 8001750:	e0d3      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_I2C_Master_Transmit+0x50>
 800175c:	2302      	movs	r3, #2
 800175e:	e0cc      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b01      	cmp	r3, #1
 8001774:	d007      	beq.n	8001786 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001794:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2221      	movs	r2, #33	; 0x21
 800179a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2210      	movs	r2, #16
 80017a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	893a      	ldrh	r2, [r7, #8]
 80017b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4a50      	ldr	r2, [pc, #320]	; (8001908 <HAL_I2C_Master_Transmit+0x1f8>)
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017c8:	8979      	ldrh	r1, [r7, #10]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	6a3a      	ldr	r2, [r7, #32]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f89c 	bl	800190c <I2C_MasterRequestWrite>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e08d      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017f4:	e066      	b.n	80018c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	6a39      	ldr	r1, [r7, #32]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f9d2 	bl	8001ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00d      	beq.n	8001822 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	2b04      	cmp	r3, #4
 800180c:	d107      	bne.n	800181e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800181c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e06b      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	781a      	ldrb	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183c:	b29b      	uxth	r3, r3
 800183e:	3b01      	subs	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b04      	cmp	r3, #4
 800185e:	d11b      	bne.n	8001898 <HAL_I2C_Master_Transmit+0x188>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	d017      	beq.n	8001898 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	6a39      	ldr	r1, [r7, #32]
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f9c2 	bl	8001c26 <I2C_WaitOnBTFFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00d      	beq.n	80018c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d107      	bne.n	80018c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e01a      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d194      	bne.n	80017f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2220      	movs	r2, #32
 80018e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e000      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018f8:	2302      	movs	r3, #2
  }
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	00100002 	.word	0x00100002
 8001908:	ffff0000 	.word	0xffff0000

0800190c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af02      	add	r7, sp, #8
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	460b      	mov	r3, r1
 800191a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2b08      	cmp	r3, #8
 8001926:	d006      	beq.n	8001936 <I2C_MasterRequestWrite+0x2a>
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d003      	beq.n	8001936 <I2C_MasterRequestWrite+0x2a>
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001934:	d108      	bne.n	8001948 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e00b      	b.n	8001960 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	2b12      	cmp	r3, #18
 800194e:	d107      	bne.n	8001960 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800195e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 f843 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e035      	b.n	80019e8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001984:	d108      	bne.n	8001998 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001986:	897b      	ldrh	r3, [r7, #10]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001994:	611a      	str	r2, [r3, #16]
 8001996:	e01b      	b.n	80019d0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001998:	897b      	ldrh	r3, [r7, #10]
 800199a:	11db      	asrs	r3, r3, #7
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f003 0306 	and.w	r3, r3, #6
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f063 030f 	orn	r3, r3, #15
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	490e      	ldr	r1, [pc, #56]	; (80019f0 <I2C_MasterRequestWrite+0xe4>)
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f875 	bl	8001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e010      	b.n	80019e8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019c6:	897b      	ldrh	r3, [r7, #10]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <I2C_MasterRequestWrite+0xe8>)
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 f865 	bl	8001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	00010008 	.word	0x00010008
 80019f4:	00010002 	.word	0x00010002

080019f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a08:	e025      	b.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a10:	d021      	beq.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a12:	f7fe fc17 	bl	8000244 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d302      	bcc.n	8001a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d116      	bne.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2220      	movs	r2, #32
 8001a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f043 0220 	orr.w	r2, r3, #32
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e023      	b.n	8001a9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d10d      	bne.n	8001a7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	e00c      	b.n	8001a96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4013      	ands	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf0c      	ite	eq
 8001a8e:	2301      	moveq	r3, #1
 8001a90:	2300      	movne	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d0b6      	beq.n	8001a0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ab4:	e051      	b.n	8001b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac4:	d123      	bne.n	8001b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ade:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f043 0204 	orr.w	r2, r3, #4
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e046      	b.n	8001b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b14:	d021      	beq.n	8001b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b16:	f7fe fb95 	bl	8000244 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d302      	bcc.n	8001b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d116      	bne.n	8001b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2220      	movs	r2, #32
 8001b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f043 0220 	orr.w	r2, r3, #32
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e020      	b.n	8001b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	0c1b      	lsrs	r3, r3, #16
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d10c      	bne.n	8001b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	e00b      	b.n	8001b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d18d      	bne.n	8001ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bb0:	e02d      	b.n	8001c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f878 	bl	8001ca8 <I2C_IsAcknowledgeFailed>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e02d      	b.n	8001c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc8:	d021      	beq.n	8001c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bca:	f7fe fb3b 	bl	8000244 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d302      	bcc.n	8001be0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d116      	bne.n	8001c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f043 0220 	orr.w	r2, r3, #32
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e007      	b.n	8001c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d1ca      	bne.n	8001bb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c32:	e02d      	b.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f837 	bl	8001ca8 <I2C_IsAcknowledgeFailed>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e02d      	b.n	8001ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c4a:	d021      	beq.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4c:	f7fe fafa 	bl	8000244 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d302      	bcc.n	8001c62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e007      	b.n	8001ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d1ca      	bne.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbe:	d11b      	bne.n	8001cf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f043 0204 	orr.w	r2, r3, #4
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e31d      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d16:	4b94      	ldr	r3, [pc, #592]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d20:	4b91      	ldr	r3, [pc, #580]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d28:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d07b      	beq.n	8001e2e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d006      	beq.n	8001d4a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b0c      	cmp	r3, #12
 8001d40:	d10f      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5e>
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d10b      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	4b87      	ldr	r3, [pc, #540]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d06a      	beq.n	8001e2c <HAL_RCC_OscConfig+0x128>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d166      	bne.n	8001e2c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e2f7      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d106      	bne.n	8001d78 <HAL_RCC_OscConfig+0x74>
 8001d6a:	4b7f      	ldr	r3, [pc, #508]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a7e      	ldr	r2, [pc, #504]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e02d      	b.n	8001dd4 <HAL_RCC_OscConfig+0xd0>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x96>
 8001d80:	4b79      	ldr	r3, [pc, #484]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a78      	ldr	r2, [pc, #480]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a75      	ldr	r2, [pc, #468]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	e01c      	b.n	8001dd4 <HAL_RCC_OscConfig+0xd0>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b05      	cmp	r3, #5
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0xb8>
 8001da2:	4b71      	ldr	r3, [pc, #452]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a70      	ldr	r2, [pc, #448]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b6e      	ldr	r3, [pc, #440]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a6d      	ldr	r2, [pc, #436]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0xd0>
 8001dbc:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a69      	ldr	r2, [pc, #420]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a66      	ldr	r2, [pc, #408]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7fe fa32 	bl	8000244 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de4:	f7fe fa2e 	bl	8000244 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e2ad      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001df6:	4b5c      	ldr	r3, [pc, #368]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0xe0>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7fe fa1e 	bl	8000244 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7fe fa1a 	bl	8000244 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e299      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e1e:	4b52      	ldr	r3, [pc, #328]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x108>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d05a      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d119      	bne.n	8001e7a <HAL_RCC_OscConfig+0x176>
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d116      	bne.n	8001e7a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4c:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_OscConfig+0x160>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e276      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	493d      	ldr	r1, [pc, #244]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e78:	e03a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d020      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e82:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <HAL_RCC_OscConfig+0x268>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7fe f9dc 	bl	8000244 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e90:	f7fe f9d8 	bl	8000244 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e257      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ea2:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	492a      	ldr	r1, [pc, #168]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
 8001ec2:	e015      	b.n	8001ef0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec4:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <HAL_RCC_OscConfig+0x268>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7fe f9bb 	bl	8000244 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed2:	f7fe f9b7 	bl	8000244 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e236      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80b8 	beq.w	800206e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d170      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_OscConfig+0x218>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e21a      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1a      	ldr	r2, [r3, #32]
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d921      	bls.n	8001f70 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fbd5 	bl	80026e0 <RCC_SetFlashLatencyFromMSIRange>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e208      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4906      	ldr	r1, [pc, #24]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	061b      	lsls	r3, r3, #24
 8001f60:	4901      	ldr	r1, [pc, #4]	; (8001f68 <HAL_RCC_OscConfig+0x264>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
 8001f66:	e020      	b.n	8001faa <HAL_RCC_OscConfig+0x2a6>
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f70:	4ba4      	ldr	r3, [pc, #656]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	49a1      	ldr	r1, [pc, #644]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f82:	4ba0      	ldr	r3, [pc, #640]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	061b      	lsls	r3, r3, #24
 8001f90:	499c      	ldr	r1, [pc, #624]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fba0 	bl	80026e0 <RCC_SetFlashLatencyFromMSIRange>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e1d3      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	0b5b      	lsrs	r3, r3, #13
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001fba:	4a92      	ldr	r2, [pc, #584]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8001fbc:	6892      	ldr	r2, [r2, #8]
 8001fbe:	0912      	lsrs	r2, r2, #4
 8001fc0:	f002 020f 	and.w	r2, r2, #15
 8001fc4:	4990      	ldr	r1, [pc, #576]	; (8002208 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	5c8a      	ldrb	r2, [r1, r2]
 8001fc8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001fca:	4a90      	ldr	r2, [pc, #576]	; (800220c <HAL_RCC_OscConfig+0x508>)
 8001fcc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fce:	4b90      	ldr	r3, [pc, #576]	; (8002210 <HAL_RCC_OscConfig+0x50c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe f8ea 	bl	80001ac <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d045      	beq.n	800206e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	e1b5      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d029      	beq.n	8002042 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fee:	4b89      	ldr	r3, [pc, #548]	; (8002214 <HAL_RCC_OscConfig+0x510>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe f926 	bl	8000244 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ffc:	f7fe f922 	bl	8000244 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e1a1      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800200e:	4b7d      	ldr	r3, [pc, #500]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201a:	4b7a      	ldr	r3, [pc, #488]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4977      	ldr	r1, [pc, #476]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202c:	4b75      	ldr	r3, [pc, #468]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	061b      	lsls	r3, r3, #24
 800203a:	4972      	ldr	r1, [pc, #456]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
 8002040:	e015      	b.n	800206e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002042:	4b74      	ldr	r3, [pc, #464]	; (8002214 <HAL_RCC_OscConfig+0x510>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7fe f8fc 	bl	8000244 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002050:	f7fe f8f8 	bl	8000244 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e177      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002062:	4b68      	ldr	r3, [pc, #416]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d030      	beq.n	80020dc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d016      	beq.n	80020b0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002082:	4b65      	ldr	r3, [pc, #404]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002084:	2201      	movs	r2, #1
 8002086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002088:	f7fe f8dc 	bl	8000244 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002090:	f7fe f8d8 	bl	8000244 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e157      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020a2:	4b58      	ldr	r3, [pc, #352]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 80020a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x38c>
 80020ae:	e015      	b.n	80020dc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b0:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b6:	f7fe f8c5 	bl	8000244 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020be:	f7fe f8c1 	bl	8000244 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e140      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020d0:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 80020d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f0      	bne.n	80020be <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80b5 	beq.w	8002254 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b45      	ldr	r3, [pc, #276]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	4a41      	ldr	r2, [pc, #260]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6253      	str	r3, [r2, #36]	; 0x24
 8002106:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_OscConfig+0x518>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b3e      	ldr	r3, [pc, #248]	; (800221c <HAL_RCC_OscConfig+0x518>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a3d      	ldr	r2, [pc, #244]	; (800221c <HAL_RCC_OscConfig+0x518>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7fe f889 	bl	8000244 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7fe f885 	bl	8000244 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b64      	cmp	r3, #100	; 0x64
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e104      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b34      	ldr	r3, [pc, #208]	; (800221c <HAL_RCC_OscConfig+0x518>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x466>
 800215c:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 800215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002160:	4a28      	ldr	r2, [pc, #160]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8002162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002166:	6353      	str	r3, [r2, #52]	; 0x34
 8002168:	e02d      	b.n	80021c6 <HAL_RCC_OscConfig+0x4c2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x488>
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002176:	4a23      	ldr	r2, [pc, #140]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8002178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800217c:	6353      	str	r3, [r2, #52]	; 0x34
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	4a20      	ldr	r2, [pc, #128]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8002184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002188:	6353      	str	r3, [r2, #52]	; 0x34
 800218a:	e01c      	b.n	80021c6 <HAL_RCC_OscConfig+0x4c2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x4aa>
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 8002196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002198:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 800219a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800219e:	6353      	str	r3, [r2, #52]	; 0x34
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 80021a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a4:	4a17      	ldr	r2, [pc, #92]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 80021a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021aa:	6353      	str	r3, [r2, #52]	; 0x34
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x4c2>
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	4a14      	ldr	r2, [pc, #80]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 80021b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021b8:	6353      	str	r3, [r2, #52]	; 0x34
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 80021bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021be:	4a11      	ldr	r2, [pc, #68]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 80021c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021c4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7fe f839 	bl	8000244 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe f835 	bl	8000244 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0b2      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_OscConfig+0x500>)
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ee      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4d2>
 80021f8:	e023      	b.n	8002242 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7fe f823 	bl	8000244 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002200:	e019      	b.n	8002236 <HAL_RCC_OscConfig+0x532>
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	080074bc 	.word	0x080074bc
 800220c:	2000000c 	.word	0x2000000c
 8002210:	20000000 	.word	0x20000000
 8002214:	42470020 	.word	0x42470020
 8002218:	42470680 	.word	0x42470680
 800221c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe f810 	bl	8000244 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e08d      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002236:	4b49      	ldr	r3, [pc, #292]	; (800235c <HAL_RCC_OscConfig+0x658>)
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1ee      	bne.n	8002220 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002242:	7ffb      	ldrb	r3, [r7, #31]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002248:	4b44      	ldr	r3, [pc, #272]	; (800235c <HAL_RCC_OscConfig+0x658>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	4a43      	ldr	r2, [pc, #268]	; (800235c <HAL_RCC_OscConfig+0x658>)
 800224e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002252:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	2b00      	cmp	r3, #0
 800225a:	d079      	beq.n	8002350 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b0c      	cmp	r3, #12
 8002260:	d056      	beq.n	8002310 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	2b02      	cmp	r3, #2
 8002268:	d13b      	bne.n	80022e2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCC_OscConfig+0x65c>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7fd ffe8 	bl	8000244 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002278:	f7fd ffe4 	bl	8000244 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e063      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800228a:	4b34      	ldr	r3, [pc, #208]	; (800235c <HAL_RCC_OscConfig+0x658>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002296:	4b31      	ldr	r3, [pc, #196]	; (800235c <HAL_RCC_OscConfig+0x658>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	4319      	orrs	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	430b      	orrs	r3, r1
 80022ae:	492b      	ldr	r1, [pc, #172]	; (800235c <HAL_RCC_OscConfig+0x658>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x65c>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fd ffc3 	bl	8000244 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c2:	f7fd ffbf 	bl	8000244 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e03e      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <HAL_RCC_OscConfig+0x658>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x5be>
 80022e0:	e036      	b.n	8002350 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <HAL_RCC_OscConfig+0x65c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fd ffac 	bl	8000244 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fd ffa8 	bl	8000244 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e027      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <HAL_RCC_OscConfig+0x658>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x5ec>
 800230e:	e01f      	b.n	8002350 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e01a      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_RCC_OscConfig+0x658>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	429a      	cmp	r2, r3
 800232e:	d10d      	bne.n	800234c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	42470060 	.word	0x42470060

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e11a      	b.n	80025ae <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b8f      	ldr	r3, [pc, #572]	; (80025b8 <HAL_RCC_ClockConfig+0x254>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d919      	bls.n	80023ba <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d105      	bne.n	8002398 <HAL_RCC_ClockConfig+0x34>
 800238c:	4b8a      	ldr	r3, [pc, #552]	; (80025b8 <HAL_RCC_ClockConfig+0x254>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a89      	ldr	r2, [pc, #548]	; (80025b8 <HAL_RCC_ClockConfig+0x254>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b87      	ldr	r3, [pc, #540]	; (80025b8 <HAL_RCC_ClockConfig+0x254>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 0201 	bic.w	r2, r3, #1
 80023a0:	4985      	ldr	r1, [pc, #532]	; (80025b8 <HAL_RCC_ClockConfig+0x254>)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a8:	4b83      	ldr	r3, [pc, #524]	; (80025b8 <HAL_RCC_ClockConfig+0x254>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0f9      	b.n	80025ae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c6:	4b7d      	ldr	r3, [pc, #500]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	497a      	ldr	r1, [pc, #488]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 808e 	beq.w	8002502 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023ee:	4b73      	ldr	r3, [pc, #460]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d121      	bne.n	800243e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0d7      	b.n	80025ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b03      	cmp	r3, #3
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002406:	4b6d      	ldr	r3, [pc, #436]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d115      	bne.n	800243e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0cb      	b.n	80025ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800241e:	4b67      	ldr	r3, [pc, #412]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0bf      	b.n	80025ae <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800242e:	4b63      	ldr	r3, [pc, #396]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0b7      	b.n	80025ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	495c      	ldr	r1, [pc, #368]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002450:	f7fd fef8 	bl	8000244 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d112      	bne.n	8002484 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7fd fef0 	bl	8000244 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e09b      	b.n	80025ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002476:	4b51      	ldr	r3, [pc, #324]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b08      	cmp	r3, #8
 8002480:	d1ee      	bne.n	8002460 <HAL_RCC_ClockConfig+0xfc>
 8002482:	e03e      	b.n	8002502 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d112      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248e:	f7fd fed9 	bl	8000244 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	; 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e084      	b.n	80025ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a4:	4b45      	ldr	r3, [pc, #276]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	d1ee      	bne.n	800248e <HAL_RCC_ClockConfig+0x12a>
 80024b0:	e027      	b.n	8002502 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d11d      	bne.n	80024f6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7fd fec2 	bl	8000244 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e06d      	b.n	80025ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024d2:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d1ee      	bne.n	80024bc <HAL_RCC_ClockConfig+0x158>
 80024de:	e010      	b.n	8002502 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fd feb0 	bl	8000244 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e05b      	b.n	80025ae <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024f6:	4b31      	ldr	r3, [pc, #196]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ee      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002502:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_RCC_ClockConfig+0x254>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d219      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d105      	bne.n	8002522 <HAL_RCC_ClockConfig+0x1be>
 8002516:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_RCC_ClockConfig+0x254>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <HAL_RCC_ClockConfig+0x254>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_RCC_ClockConfig+0x254>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 0201 	bic.w	r2, r3, #1
 800252a:	4923      	ldr	r1, [pc, #140]	; (80025b8 <HAL_RCC_ClockConfig+0x254>)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <HAL_RCC_ClockConfig+0x254>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e034      	b.n	80025ae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4917      	ldr	r1, [pc, #92]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	490f      	ldr	r1, [pc, #60]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002582:	f000 f823 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8002586:	4601      	mov	r1, r0
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_RCC_ClockConfig+0x258>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	fa21 f303 	lsr.w	r3, r1, r3
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <HAL_RCC_ClockConfig+0x260>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_RCC_ClockConfig+0x264>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd fe02 	bl	80001ac <HAL_InitTick>
 80025a8:	4603      	mov	r3, r0
 80025aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80025ac:	7afb      	ldrb	r3, [r7, #11]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023c00 	.word	0x40023c00
 80025bc:	40023800 	.word	0x40023800
 80025c0:	080074bc 	.word	0x080074bc
 80025c4:	2000000c 	.word	0x2000000c
 80025c8:	20000000 	.word	0x20000000

080025cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <HAL_RCC_GetSysClockFreq+0xa0>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d006      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x24>
 80025e2:	2b0c      	cmp	r3, #12
 80025e4:	d007      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x2a>
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d12c      	bne.n	8002644 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025ea:	4b21      	ldr	r3, [pc, #132]	; (8002670 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025ec:	613b      	str	r3, [r7, #16]
      break;
 80025ee:	e037      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f0:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_GetSysClockFreq+0xa8>)
 80025f2:	613b      	str	r3, [r7, #16]
      break;
 80025f4:	e034      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	0c9b      	lsrs	r3, r3, #18
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <HAL_RCC_GetSysClockFreq+0xac>)
 8002600:	5cd3      	ldrb	r3, [r2, r3]
 8002602:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	0d9b      	lsrs	r3, r3, #22
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	3301      	adds	r3, #1
 800260e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002610:	4b16      	ldr	r3, [pc, #88]	; (800266c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4a15      	ldr	r2, [pc, #84]	; (8002674 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002620:	fb02 f203 	mul.w	r2, r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	e007      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4a0f      	ldr	r2, [pc, #60]	; (8002670 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002632:	fb02 f203 	mul.w	r2, r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	fbb2 f3f3 	udiv	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	613b      	str	r3, [r7, #16]
      break;
 8002642:	e00d      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	0b5b      	lsrs	r3, r3, #13
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	613b      	str	r3, [r7, #16]
      break;
 800265e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002660:	693b      	ldr	r3, [r7, #16]
}
 8002662:	4618      	mov	r0, r3
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	40023800 	.word	0x40023800
 8002670:	00f42400 	.word	0x00f42400
 8002674:	007a1200 	.word	0x007a1200
 8002678:	080074b0 	.word	0x080074b0

0800267c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002680:	4b02      	ldr	r3, [pc, #8]	; (800268c <HAL_RCC_GetHCLKFreq+0x10>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	2000000c 	.word	0x2000000c

08002690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002694:	f7ff fff2 	bl	800267c <HAL_RCC_GetHCLKFreq>
 8002698:	4601      	mov	r1, r0
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40023800 	.word	0x40023800
 80026b4:	080074cc 	.word	0x080074cc

080026b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026bc:	f7ff ffde 	bl	800267c <HAL_RCC_GetHCLKFreq>
 80026c0:	4601      	mov	r1, r0
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0adb      	lsrs	r3, r3, #11
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4a03      	ldr	r2, [pc, #12]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	080074cc 	.word	0x080074cc

080026e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80026ec:	4b29      	ldr	r3, [pc, #164]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d12c      	bne.n	8002752 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026f8:	4b26      	ldr	r3, [pc, #152]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e016      	b.n	800273e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002710:	4b20      	ldr	r3, [pc, #128]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271a:	6253      	str	r3, [r2, #36]	; 0x24
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002730:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002732:	4b18      	ldr	r3, [pc, #96]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	4a17      	ldr	r2, [pc, #92]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002744:	d105      	bne.n	8002752 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800274c:	d101      	bne.n	8002752 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800274e:	2301      	movs	r3, #1
 8002750:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002758:	4b10      	ldr	r3, [pc, #64]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0f      	ldr	r2, [pc, #60]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 0201 	bic.w	r2, r3, #1
 800276c:	490b      	ldr	r1, [pc, #44]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	40007000 	.word	0x40007000
 800279c:	40023c00 	.word	0x40023c00

080027a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e01d      	b.n	80027ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f003 fafe 	bl	8005dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f000 fb70 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b06      	cmp	r3, #6
 8002816:	d007      	beq.n	8002828 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6a1a      	ldr	r2, [r3, #32]
 8002852:	f241 1311 	movw	r3, #4369	; 0x1111
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d107      	bne.n	800286c <HAL_TIM_Base_Stop+0x30>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d007      	beq.n	80028ba <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a1a      	ldr	r2, [r3, #32]
 80028e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <HAL_TIM_Base_Stop_IT+0x38>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e01d      	b.n	8002958 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f815 	bl	8002960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	4619      	mov	r1, r3
 8002948:	4610      	mov	r0, r2
 800294a:	f000 fabb 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	6839      	ldr	r1, [r7, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fc98 	bl	80032ba <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b06      	cmp	r3, #6
 800299a:	d007      	beq.n	80029ac <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d122      	bne.n	8002a12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d11b      	bne.n	8002a12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f06f 0202 	mvn.w	r2, #2
 80029e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fa48 	bl	8002e8e <HAL_TIM_IC_CaptureCallback>
 80029fe:	e005      	b.n	8002a0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fa3b 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa4a 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d122      	bne.n	8002a66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d11b      	bne.n	8002a66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f06f 0204 	mvn.w	r2, #4
 8002a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fa1e 	bl	8002e8e <HAL_TIM_IC_CaptureCallback>
 8002a52:	e005      	b.n	8002a60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fa11 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fa20 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d122      	bne.n	8002aba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d11b      	bne.n	8002aba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f06f 0208 	mvn.w	r2, #8
 8002a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f9f4 	bl	8002e8e <HAL_TIM_IC_CaptureCallback>
 8002aa6:	e005      	b.n	8002ab4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f9e7 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f9f6 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d122      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d11b      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f06f 0210 	mvn.w	r2, #16
 8002ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f9ca 	bl	8002e8e <HAL_TIM_IC_CaptureCallback>
 8002afa:	e005      	b.n	8002b08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f9bd 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f9cc 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d10e      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f06f 0201 	mvn.w	r2, #1
 8002b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f998 	bl	8002e6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d10e      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d107      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f9a6 	bl	8002eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0b4      	b.n	8002cf4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	f200 809f 	bhi.w	8002ce0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002ba2:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba8:	08002bdd 	.word	0x08002bdd
 8002bac:	08002ce1 	.word	0x08002ce1
 8002bb0:	08002ce1 	.word	0x08002ce1
 8002bb4:	08002ce1 	.word	0x08002ce1
 8002bb8:	08002c1d 	.word	0x08002c1d
 8002bbc:	08002ce1 	.word	0x08002ce1
 8002bc0:	08002ce1 	.word	0x08002ce1
 8002bc4:	08002ce1 	.word	0x08002ce1
 8002bc8:	08002c5f 	.word	0x08002c5f
 8002bcc:	08002ce1 	.word	0x08002ce1
 8002bd0:	08002ce1 	.word	0x08002ce1
 8002bd4:	08002ce1 	.word	0x08002ce1
 8002bd8:	08002c9f 	.word	0x08002c9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f9de 	bl	8002fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0208 	orr.w	r2, r2, #8
 8002bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0204 	bic.w	r2, r2, #4
 8002c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6999      	ldr	r1, [r3, #24]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	619a      	str	r2, [r3, #24]
      break;
 8002c1a:	e062      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f9fa 	bl	800301c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6999      	ldr	r1, [r3, #24]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	021a      	lsls	r2, r3, #8
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	619a      	str	r2, [r3, #24]
      break;
 8002c5c:	e041      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fa17 	bl	8003098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69da      	ldr	r2, [r3, #28]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0208 	orr.w	r2, r2, #8
 8002c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0204 	bic.w	r2, r2, #4
 8002c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69d9      	ldr	r1, [r3, #28]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	61da      	str	r2, [r3, #28]
      break;
 8002c9c:	e021      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fa34 	bl	8003112 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69d9      	ldr	r1, [r3, #28]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	021a      	lsls	r2, r3, #8
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	61da      	str	r2, [r3, #28]
      break;
 8002cde:	e000      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ce0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_TIM_ConfigClockSource+0x18>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e0a6      	b.n	8002e62 <HAL_TIM_ConfigClockSource+0x166>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d067      	beq.n	8002e1c <HAL_TIM_ConfigClockSource+0x120>
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d80b      	bhi.n	8002d68 <HAL_TIM_ConfigClockSource+0x6c>
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d073      	beq.n	8002e3c <HAL_TIM_ConfigClockSource+0x140>
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d802      	bhi.n	8002d5e <HAL_TIM_ConfigClockSource+0x62>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d06f      	beq.n	8002e3c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d5c:	e078      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d06c      	beq.n	8002e3c <HAL_TIM_ConfigClockSource+0x140>
 8002d62:	2b30      	cmp	r3, #48	; 0x30
 8002d64:	d06a      	beq.n	8002e3c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d66:	e073      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d68:	2b70      	cmp	r3, #112	; 0x70
 8002d6a:	d00d      	beq.n	8002d88 <HAL_TIM_ConfigClockSource+0x8c>
 8002d6c:	2b70      	cmp	r3, #112	; 0x70
 8002d6e:	d804      	bhi.n	8002d7a <HAL_TIM_ConfigClockSource+0x7e>
 8002d70:	2b50      	cmp	r3, #80	; 0x50
 8002d72:	d033      	beq.n	8002ddc <HAL_TIM_ConfigClockSource+0xe0>
 8002d74:	2b60      	cmp	r3, #96	; 0x60
 8002d76:	d041      	beq.n	8002dfc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002d78:	e06a      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7e:	d066      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x152>
 8002d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d84:	d017      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d86:	e063      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6899      	ldr	r1, [r3, #8]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f000 fa70 	bl	800327c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002daa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	609a      	str	r2, [r3, #8]
      break;
 8002db4:	e04c      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f000 fa59 	bl	800327c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dd8:	609a      	str	r2, [r3, #8]
      break;
 8002dda:	e039      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	461a      	mov	r2, r3
 8002dea:	f000 f9d0 	bl	800318e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2150      	movs	r1, #80	; 0x50
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fa27 	bl	8003248 <TIM_ITRx_SetConfig>
      break;
 8002dfa:	e029      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f000 f9ee 	bl	80031ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2160      	movs	r1, #96	; 0x60
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fa17 	bl	8003248 <TIM_ITRx_SetConfig>
      break;
 8002e1a:	e019      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f000 f9b0 	bl	800318e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2140      	movs	r1, #64	; 0x40
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fa07 	bl	8003248 <TIM_ITRx_SetConfig>
      break;
 8002e3a:	e009      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f000 f9fe 	bl	8003248 <TIM_ITRx_SetConfig>
      break;
 8002e4c:	e000      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002e4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eda:	d00f      	beq.n	8002efc <TIM_Base_SetConfig+0x38>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a2b      	ldr	r2, [pc, #172]	; (8002f8c <TIM_Base_SetConfig+0xc8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <TIM_Base_SetConfig+0x38>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a2a      	ldr	r2, [pc, #168]	; (8002f90 <TIM_Base_SetConfig+0xcc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <TIM_Base_SetConfig+0x38>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a29      	ldr	r2, [pc, #164]	; (8002f94 <TIM_Base_SetConfig+0xd0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_Base_SetConfig+0x38>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a28      	ldr	r2, [pc, #160]	; (8002f98 <TIM_Base_SetConfig+0xd4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d108      	bne.n	8002f0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f14:	d017      	beq.n	8002f46 <TIM_Base_SetConfig+0x82>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <TIM_Base_SetConfig+0xc8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <TIM_Base_SetConfig+0x82>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <TIM_Base_SetConfig+0xcc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00f      	beq.n	8002f46 <TIM_Base_SetConfig+0x82>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <TIM_Base_SetConfig+0xd0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00b      	beq.n	8002f46 <TIM_Base_SetConfig+0x82>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <TIM_Base_SetConfig+0xd4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <TIM_Base_SetConfig+0x82>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <TIM_Base_SetConfig+0xd8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d003      	beq.n	8002f46 <TIM_Base_SetConfig+0x82>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <TIM_Base_SetConfig+0xdc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d108      	bne.n	8002f58 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	615a      	str	r2, [r3, #20]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40000800 	.word	0x40000800
 8002f94:	40000c00 	.word	0x40000c00
 8002f98:	40010800 	.word	0x40010800
 8002f9c:	40010c00 	.word	0x40010c00
 8002fa0:	40011000 	.word	0x40011000

08002fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f023 0201 	bic.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f023 0302 	bic.w	r3, r3, #2
 8002fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	621a      	str	r2, [r3, #32]
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0210 	bic.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f023 0320 	bic.w	r3, r3, #32
 8003066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	621a      	str	r2, [r3, #32]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	621a      	str	r2, [r3, #32]
}
 8003108:	bf00      	nop
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003112:	b480      	push	{r7}
 8003114:	b087      	sub	sp, #28
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003140:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003148:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800315c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	031b      	lsls	r3, r3, #12
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	621a      	str	r2, [r3, #32]
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800318e:	b480      	push	{r7}
 8003190:	b087      	sub	sp, #28
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f023 0201 	bic.w	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f023 030a 	bic.w	r3, r3, #10
 80031ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	621a      	str	r2, [r3, #32]
}
 80031e0:	bf00      	nop
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b087      	sub	sp, #28
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f023 0210 	bic.w	r2, r3, #16
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	031b      	lsls	r3, r3, #12
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003226:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	621a      	str	r2, [r3, #32]
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	f043 0307 	orr.w	r3, r3, #7
 800326a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	609a      	str	r2, [r3, #8]
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	021a      	lsls	r2, r3, #8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	431a      	orrs	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b087      	sub	sp, #28
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	2201      	movs	r2, #1
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	43db      	mvns	r3, r3
 80032dc:	401a      	ands	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1a      	ldr	r2, [r3, #32]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	431a      	orrs	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	621a      	str	r2, [r3, #32]
}
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003316:	2302      	movs	r3, #2
 8003318:	e032      	b.n	8003380 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003340:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003352:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	4313      	orrs	r3, r2
 800335c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e03f      	b.n	800341c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d106      	bne.n	80033b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f002 fe69 	bl	8006088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2224      	movs	r2, #36	; 0x24
 80033ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fc34 	bl	8003c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003402:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af02      	add	r7, sp, #8
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b20      	cmp	r3, #32
 8003442:	f040 8083 	bne.w	800354c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_UART_Transmit+0x2e>
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e07b      	b.n	800354e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_UART_Transmit+0x40>
 8003460:	2302      	movs	r3, #2
 8003462:	e074      	b.n	800354e <HAL_UART_Transmit+0x12a>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2221      	movs	r2, #33	; 0x21
 8003476:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800347a:	f7fc fee3 	bl	8000244 <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800348c:	e042      	b.n	8003514 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a4:	d122      	bne.n	80034ec <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2200      	movs	r2, #0
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fa59 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e046      	b.n	800354e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	3302      	adds	r3, #2
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	e017      	b.n	8003514 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	3301      	adds	r3, #1
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	e013      	b.n	8003514 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2200      	movs	r2, #0
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fa36 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e023      	b.n	800354e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	60ba      	str	r2, [r7, #8]
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1b7      	bne.n	800348e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	2140      	movs	r1, #64	; 0x40
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fa1d 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e00a      	b.n	800354e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
  }
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b088      	sub	sp, #32
 800355a:	af02      	add	r7, sp, #8
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b20      	cmp	r3, #32
 8003574:	f040 8090 	bne.w	8003698 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_UART_Receive+0x2e>
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e088      	b.n	800369a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_UART_Receive+0x40>
 8003592:	2302      	movs	r3, #2
 8003594:	e081      	b.n	800369a <HAL_UART_Receive+0x144>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2222      	movs	r2, #34	; 0x22
 80035a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035ac:	f7fc fe4a 	bl	8000244 <HAL_GetTick>
 80035b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	88fa      	ldrh	r2, [r7, #6]
 80035b6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	88fa      	ldrh	r2, [r7, #6]
 80035bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80035be:	e05c      	b.n	800367a <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d6:	d12b      	bne.n	8003630 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2200      	movs	r2, #0
 80035e0:	2120      	movs	r1, #32
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f9c0 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e053      	b.n	800369a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360a:	b29a      	uxth	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	3302      	adds	r3, #2
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	e030      	b.n	800367a <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	b29b      	uxth	r3, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	b29a      	uxth	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	3301      	adds	r3, #1
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	e024      	b.n	800367a <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	2120      	movs	r1, #32
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f994 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e027      	b.n	800369a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	60ba      	str	r2, [r7, #8]
 800365e:	b2ca      	uxtb	r2, r1
 8003660:	701a      	strb	r2, [r3, #0]
 8003662:	e00a      	b.n	800367a <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	1c59      	adds	r1, r3, #1
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d19d      	bne.n	80035c0 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	4613      	mov	r3, r2
 80036ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d140      	bne.n	800373e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_UART_Receive_IT+0x26>
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e039      	b.n	8003740 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_UART_Receive_IT+0x38>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e032      	b.n	8003740 <HAL_UART_Receive_IT+0x9e>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2222      	movs	r2, #34	; 0x22
 80036fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003718:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0220 	orr.w	r2, r2, #32
 8003738:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e000      	b.n	8003740 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
	...

0800374c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10d      	bne.n	800379e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_UART_IRQHandler+0x52>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f9ce 	bl	8003b38 <UART_Receive_IT>
      return;
 800379c:	e0cc      	b.n	8003938 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80ab 	beq.w	80038fc <HAL_UART_IRQHandler+0x1b0>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <HAL_UART_IRQHandler+0x70>
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80a0 	beq.w	80038fc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_UART_IRQHandler+0x90>
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_UART_IRQHandler+0xb0>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	f043 0202 	orr.w	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_UART_IRQHandler+0xd0>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003814:	f043 0204 	orr.w	r2, r3, #4
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_UART_IRQHandler+0xf0>
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	f043 0208 	orr.w	r2, r3, #8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d078      	beq.n	8003936 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <HAL_UART_IRQHandler+0x112>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f96d 	bl	8003b38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b40      	cmp	r3, #64	; 0x40
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <HAL_UART_IRQHandler+0x13a>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d031      	beq.n	80038ea <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8b8 	bl	80039fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	d123      	bne.n	80038e2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d013      	beq.n	80038da <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	4a22      	ldr	r2, [pc, #136]	; (8003940 <HAL_UART_IRQHandler+0x1f4>)
 80038b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd fafc 	bl	8000ebc <HAL_DMA_Abort_IT>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038d4:	4610      	mov	r0, r2
 80038d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	e00e      	b.n	80038f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f83b 	bl	8003956 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e0:	e00a      	b.n	80038f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f837 	bl	8003956 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	e006      	b.n	80038f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f833 	bl	8003956 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80038f6:	e01e      	b.n	8003936 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	bf00      	nop
    return;
 80038fa:	e01c      	b.n	8003936 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <HAL_UART_IRQHandler+0x1cc>
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f8a4 	bl	8003a5e <UART_Transmit_IT>
    return;
 8003916:	e00f      	b.n	8003938 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_UART_IRQHandler+0x1ec>
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f8eb 	bl	8003b08 <UART_EndTransmit_IT>
    return;
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003936:	bf00      	nop
  }
}
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	08003a37 	.word	0x08003a37

08003944 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr

08003956 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003978:	e02c      	b.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003980:	d028      	beq.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x30>
 8003988:	f7fc fc5c 	bl	8000244 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	429a      	cmp	r2, r3
 8003996:	d21d      	bcs.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0201 	bic.w	r2, r2, #1
 80039b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e00f      	b.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4013      	ands	r3, r2
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d0c3      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff ff80 	bl	8003956 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b21      	cmp	r3, #33	; 0x21
 8003a70:	d144      	bne.n	8003afc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	d11a      	bne.n	8003ab2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a90:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d105      	bne.n	8003aa6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	1c9a      	adds	r2, r3, #2
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	621a      	str	r2, [r3, #32]
 8003aa4:	e00e      	b.n	8003ac4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	621a      	str	r2, [r3, #32]
 8003ab0:	e008      	b.n	8003ac4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	1c59      	adds	r1, r3, #1
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6211      	str	r1, [r2, #32]
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10f      	bne.n	8003af8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e000      	b.n	8003afe <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff0b 	bl	8003944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b22      	cmp	r3, #34	; 0x22
 8003b4a:	d171      	bne.n	8003c30 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b54:	d123      	bne.n	8003b9e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10e      	bne.n	8003b82 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b80:	e029      	b.n	8003bd6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b9c:	e01b      	b.n	8003bd6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10a      	bne.n	8003bbc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6858      	ldr	r0, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	1c59      	adds	r1, r3, #1
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6291      	str	r1, [r2, #40]	; 0x28
 8003bb6:	b2c2      	uxtb	r2, r0
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e00c      	b.n	8003bd6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	1c58      	adds	r0, r3, #1
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	6288      	str	r0, [r1, #40]	; 0x28
 8003bce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4619      	mov	r1, r3
 8003be4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d120      	bne.n	8003c2c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0220 	bic.w	r2, r2, #32
 8003bf8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f001 f9f8 	bl	8005018 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e002      	b.n	8003c32 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e000      	b.n	8003c32 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
  }
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c7c:	f023 030c 	bic.w	r3, r3, #12
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	68f9      	ldr	r1, [r7, #12]
 8003c86:	430b      	orrs	r3, r1
 8003c88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca8:	f040 80a5 	bne.w	8003df6 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4aa4      	ldr	r2, [pc, #656]	; (8003f44 <UART_SetConfig+0x308>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d14f      	bne.n	8003d56 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cb6:	f7fe fcff 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8003cba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009a      	lsls	r2, r3, #2
 8003cc6:	441a      	add	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	4a9d      	ldr	r2, [pc, #628]	; (8003f48 <UART_SetConfig+0x30c>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	0119      	lsls	r1, r3, #4
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009a      	lsls	r2, r3, #2
 8003ce6:	441a      	add	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf2:	4b95      	ldr	r3, [pc, #596]	; (8003f48 <UART_SetConfig+0x30c>)
 8003cf4:	fba3 0302 	umull	r0, r3, r3, r2
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	2064      	movs	r0, #100	; 0x64
 8003cfc:	fb00 f303 	mul.w	r3, r0, r3
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	3332      	adds	r3, #50	; 0x32
 8003d06:	4a90      	ldr	r2, [pc, #576]	; (8003f48 <UART_SetConfig+0x30c>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d14:	4419      	add	r1, r3
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009a      	lsls	r2, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d2c:	4b86      	ldr	r3, [pc, #536]	; (8003f48 <UART_SetConfig+0x30c>)
 8003d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2064      	movs	r0, #100	; 0x64
 8003d36:	fb00 f303 	mul.w	r3, r0, r3
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	3332      	adds	r3, #50	; 0x32
 8003d40:	4a81      	ldr	r2, [pc, #516]	; (8003f48 <UART_SetConfig+0x30c>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	f003 0207 	and.w	r2, r3, #7
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	440a      	add	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d54:	e0f1      	b.n	8003f3a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d56:	f7fe fc9b 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8003d5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	009a      	lsls	r2, r3, #2
 8003d66:	441a      	add	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	4a75      	ldr	r2, [pc, #468]	; (8003f48 <UART_SetConfig+0x30c>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	0119      	lsls	r1, r3, #4
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009a      	lsls	r2, r3, #2
 8003d86:	441a      	add	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d92:	4b6d      	ldr	r3, [pc, #436]	; (8003f48 <UART_SetConfig+0x30c>)
 8003d94:	fba3 0302 	umull	r0, r3, r3, r2
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	2064      	movs	r0, #100	; 0x64
 8003d9c:	fb00 f303 	mul.w	r3, r0, r3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	3332      	adds	r3, #50	; 0x32
 8003da6:	4a68      	ldr	r2, [pc, #416]	; (8003f48 <UART_SetConfig+0x30c>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003db4:	4419      	add	r1, r3
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009a      	lsls	r2, r3, #2
 8003dc0:	441a      	add	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dcc:	4b5e      	ldr	r3, [pc, #376]	; (8003f48 <UART_SetConfig+0x30c>)
 8003dce:	fba3 0302 	umull	r0, r3, r3, r2
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	2064      	movs	r0, #100	; 0x64
 8003dd6:	fb00 f303 	mul.w	r3, r0, r3
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	3332      	adds	r3, #50	; 0x32
 8003de0:	4a59      	ldr	r2, [pc, #356]	; (8003f48 <UART_SetConfig+0x30c>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	f003 0207 	and.w	r2, r3, #7
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	440a      	add	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	e0a1      	b.n	8003f3a <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a52      	ldr	r2, [pc, #328]	; (8003f44 <UART_SetConfig+0x308>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d14e      	bne.n	8003e9e <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e00:	f7fe fc5a 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8003e04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009a      	lsls	r2, r3, #2
 8003e10:	441a      	add	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	4a4a      	ldr	r2, [pc, #296]	; (8003f48 <UART_SetConfig+0x30c>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	0119      	lsls	r1, r3, #4
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009a      	lsls	r2, r3, #2
 8003e30:	441a      	add	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e3c:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <UART_SetConfig+0x30c>)
 8003e3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2064      	movs	r0, #100	; 0x64
 8003e46:	fb00 f303 	mul.w	r3, r0, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	3332      	adds	r3, #50	; 0x32
 8003e50:	4a3d      	ldr	r2, [pc, #244]	; (8003f48 <UART_SetConfig+0x30c>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5c:	4419      	add	r1, r3
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009a      	lsls	r2, r3, #2
 8003e68:	441a      	add	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e74:	4b34      	ldr	r3, [pc, #208]	; (8003f48 <UART_SetConfig+0x30c>)
 8003e76:	fba3 0302 	umull	r0, r3, r3, r2
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	2064      	movs	r0, #100	; 0x64
 8003e7e:	fb00 f303 	mul.w	r3, r0, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	3332      	adds	r3, #50	; 0x32
 8003e88:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <UART_SetConfig+0x30c>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	f003 020f 	and.w	r2, r3, #15
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	440a      	add	r2, r1
 8003e9a:	609a      	str	r2, [r3, #8]
}
 8003e9c:	e04d      	b.n	8003f3a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e9e:	f7fe fbf7 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8003ea2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009a      	lsls	r2, r3, #2
 8003eae:	441a      	add	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <UART_SetConfig+0x30c>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	0119      	lsls	r1, r3, #4
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	009a      	lsls	r2, r3, #2
 8003ece:	441a      	add	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eda:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <UART_SetConfig+0x30c>)
 8003edc:	fba3 0302 	umull	r0, r3, r3, r2
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	2064      	movs	r0, #100	; 0x64
 8003ee4:	fb00 f303 	mul.w	r3, r0, r3
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	3332      	adds	r3, #50	; 0x32
 8003eee:	4a16      	ldr	r2, [pc, #88]	; (8003f48 <UART_SetConfig+0x30c>)
 8003ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003efa:	4419      	add	r1, r3
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	009a      	lsls	r2, r3, #2
 8003f06:	441a      	add	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f12:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <UART_SetConfig+0x30c>)
 8003f14:	fba3 0302 	umull	r0, r3, r3, r2
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	2064      	movs	r0, #100	; 0x64
 8003f1c:	fb00 f303 	mul.w	r3, r0, r3
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	3332      	adds	r3, #50	; 0x32
 8003f26:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <UART_SetConfig+0x30c>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	f003 020f 	and.w	r2, r3, #15
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	440a      	add	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40013800 	.word	0x40013800
 8003f48:	51eb851f 	.word	0x51eb851f

08003f4c <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8003f52:	1d3b      	adds	r3, r7, #4
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8003f5c:	4b3e      	ldr	r3, [pc, #248]	; (8004058 <MX_ADC_Init+0x10c>)
 8003f5e:	4a3f      	ldr	r2, [pc, #252]	; (800405c <MX_ADC_Init+0x110>)
 8003f60:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003f62:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <MX_ADC_Init+0x10c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003f68:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <MX_ADC_Init+0x10c>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f6e:	4b3a      	ldr	r3, [pc, #232]	; (8004058 <MX_ADC_Init+0x10c>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003f74:	4b38      	ldr	r3, [pc, #224]	; (8004058 <MX_ADC_Init+0x10c>)
 8003f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f7a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f7c:	4b36      	ldr	r3, [pc, #216]	; (8004058 <MX_ADC_Init+0x10c>)
 8003f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f82:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8003f84:	4b34      	ldr	r3, [pc, #208]	; (8004058 <MX_ADC_Init+0x10c>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8003f8a:	4b33      	ldr	r3, [pc, #204]	; (8004058 <MX_ADC_Init+0x10c>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8003f90:	4b31      	ldr	r3, [pc, #196]	; (8004058 <MX_ADC_Init+0x10c>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003f96:	4b30      	ldr	r3, [pc, #192]	; (8004058 <MX_ADC_Init+0x10c>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 4;
 8003f9e:	4b2e      	ldr	r3, [pc, #184]	; (8004058 <MX_ADC_Init+0x10c>)
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003fa4:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <MX_ADC_Init+0x10c>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <MX_ADC_Init+0x10c>)
 8003fae:	2210      	movs	r2, #16
 8003fb0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003fb2:	4b29      	ldr	r3, [pc, #164]	; (8004058 <MX_ADC_Init+0x10c>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003fb8:	4b27      	ldr	r3, [pc, #156]	; (8004058 <MX_ADC_Init+0x10c>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003fc0:	4825      	ldr	r0, [pc, #148]	; (8004058 <MX_ADC_Init+0x10c>)
 8003fc2:	f7fc f96b 	bl	800029c <HAL_ADC_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8003fcc:	f001 f8fe 	bl	80051cc <Error_Handler>
  }
  /** Configure the channel speed in Low mode 
  */
  __HAL_ADC_CHANNEL_SPEED_SLOW(ADC_CHANNEL_8);
 8003fd0:	4b23      	ldr	r3, [pc, #140]	; (8004060 <MX_ADC_Init+0x114>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a22      	ldr	r2, [pc, #136]	; (8004060 <MX_ADC_Init+0x114>)
 8003fd6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003fda:	6013      	str	r3, [r2, #0]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 8003fe4:	2307      	movs	r3, #7
 8003fe6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003fe8:	1d3b      	adds	r3, r7, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	481a      	ldr	r0, [pc, #104]	; (8004058 <MX_ADC_Init+0x10c>)
 8003fee:	f7fc fb45 	bl	800067c <HAL_ADC_ConfigChannel>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <MX_ADC_Init+0xb0>
  {
    Error_Handler();
 8003ff8:	f001 f8e8 	bl	80051cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004000:	2302      	movs	r3, #2
 8004002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004004:	1d3b      	adds	r3, r7, #4
 8004006:	4619      	mov	r1, r3
 8004008:	4813      	ldr	r0, [pc, #76]	; (8004058 <MX_ADC_Init+0x10c>)
 800400a:	f7fc fb37 	bl	800067c <HAL_ADC_ConfigChannel>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <MX_ADC_Init+0xcc>
  {
    Error_Handler();
 8004014:	f001 f8da 	bl	80051cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004018:	2304      	movs	r3, #4
 800401a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800401c:	2303      	movs	r3, #3
 800401e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	4619      	mov	r1, r3
 8004024:	480c      	ldr	r0, [pc, #48]	; (8004058 <MX_ADC_Init+0x10c>)
 8004026:	f7fc fb29 	bl	800067c <HAL_ADC_ConfigChannel>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <MX_ADC_Init+0xe8>
  {
    Error_Handler();
 8004030:	f001 f8cc 	bl	80051cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004034:	2308      	movs	r3, #8
 8004036:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004038:	2304      	movs	r3, #4
 800403a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4805      	ldr	r0, [pc, #20]	; (8004058 <MX_ADC_Init+0x10c>)
 8004042:	f7fc fb1b 	bl	800067c <HAL_ADC_ConfigChannel>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 800404c:	f001 f8be 	bl	80051cc <Error_Handler>
  }

}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000118 	.word	0x20000118
 800405c:	40012400 	.word	0x40012400
 8004060:	40007c00 	.word	0x40007c00

08004064 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a35      	ldr	r2, [pc, #212]	; (8004158 <HAL_ADC_MspInit+0xf4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d163      	bne.n	800414e <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004086:	4b35      	ldr	r3, [pc, #212]	; (800415c <HAL_ADC_MspInit+0xf8>)
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4a34      	ldr	r2, [pc, #208]	; (800415c <HAL_ADC_MspInit+0xf8>)
 800408c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004090:	6213      	str	r3, [r2, #32]
 8004092:	4b32      	ldr	r3, [pc, #200]	; (800415c <HAL_ADC_MspInit+0xf8>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409e:	4b2f      	ldr	r3, [pc, #188]	; (800415c <HAL_ADC_MspInit+0xf8>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	4a2e      	ldr	r2, [pc, #184]	; (800415c <HAL_ADC_MspInit+0xf8>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	61d3      	str	r3, [r2, #28]
 80040aa:	4b2c      	ldr	r3, [pc, #176]	; (800415c <HAL_ADC_MspInit+0xf8>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040b6:	4b29      	ldr	r3, [pc, #164]	; (800415c <HAL_ADC_MspInit+0xf8>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	4a28      	ldr	r2, [pc, #160]	; (800415c <HAL_ADC_MspInit+0xf8>)
 80040bc:	f043 0302 	orr.w	r3, r3, #2
 80040c0:	61d3      	str	r3, [r2, #28]
 80040c2:	4b26      	ldr	r3, [pc, #152]	; (800415c <HAL_ADC_MspInit+0xf8>)
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PB0     ------> ADC_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80040ce:	2313      	movs	r3, #19
 80040d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040d2:	2303      	movs	r3, #3
 80040d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040da:	f107 0314 	add.w	r3, r7, #20
 80040de:	4619      	mov	r1, r3
 80040e0:	481f      	ldr	r0, [pc, #124]	; (8004160 <HAL_ADC_MspInit+0xfc>)
 80040e2:	f7fd f80b 	bl	80010fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040e6:	2301      	movs	r3, #1
 80040e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040ea:	2303      	movs	r3, #3
 80040ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f2:	f107 0314 	add.w	r3, r7, #20
 80040f6:	4619      	mov	r1, r3
 80040f8:	481a      	ldr	r0, [pc, #104]	; (8004164 <HAL_ADC_MspInit+0x100>)
 80040fa:	f7fc ffff 	bl	80010fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80040fe:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <HAL_ADC_MspInit+0x104>)
 8004100:	4a1a      	ldr	r2, [pc, #104]	; (800416c <HAL_ADC_MspInit+0x108>)
 8004102:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004104:	4b18      	ldr	r3, [pc, #96]	; (8004168 <HAL_ADC_MspInit+0x104>)
 8004106:	2200      	movs	r2, #0
 8004108:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800410a:	4b17      	ldr	r3, [pc, #92]	; (8004168 <HAL_ADC_MspInit+0x104>)
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004110:	4b15      	ldr	r3, [pc, #84]	; (8004168 <HAL_ADC_MspInit+0x104>)
 8004112:	2280      	movs	r2, #128	; 0x80
 8004114:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <HAL_ADC_MspInit+0x104>)
 8004118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800411c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_ADC_MspInit+0x104>)
 8004120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004124:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004126:	4b10      	ldr	r3, [pc, #64]	; (8004168 <HAL_ADC_MspInit+0x104>)
 8004128:	2220      	movs	r2, #32
 800412a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800412c:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <HAL_ADC_MspInit+0x104>)
 800412e:	2200      	movs	r2, #0
 8004130:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004132:	480d      	ldr	r0, [pc, #52]	; (8004168 <HAL_ADC_MspInit+0x104>)
 8004134:	f7fc fdee 	bl	8000d14 <HAL_DMA_Init>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 800413e:	f001 f845 	bl	80051cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a08      	ldr	r2, [pc, #32]	; (8004168 <HAL_ADC_MspInit+0x104>)
 8004146:	645a      	str	r2, [r3, #68]	; 0x44
 8004148:	4a07      	ldr	r2, [pc, #28]	; (8004168 <HAL_ADC_MspInit+0x104>)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800414e:	bf00      	nop
 8004150:	3728      	adds	r7, #40	; 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40012400 	.word	0x40012400
 800415c:	40023800 	.word	0x40023800
 8004160:	40020000 	.word	0x40020000
 8004164:	40020400 	.word	0x40020400
 8004168:	200000d4 	.word	0x200000d4
 800416c:	40026008 	.word	0x40026008

08004170 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <MX_DMA_Init+0x38>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4a0b      	ldr	r2, [pc, #44]	; (80041a8 <MX_DMA_Init+0x38>)
 800417c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004180:	61d3      	str	r3, [r2, #28]
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <MX_DMA_Init+0x38>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800418a:	607b      	str	r3, [r7, #4]
 800418c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 2);
 800418e:	2202      	movs	r2, #2
 8004190:	2100      	movs	r1, #0
 8004192:	200b      	movs	r0, #11
 8004194:	f7fc fd87 	bl	8000ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004198:	200b      	movs	r0, #11
 800419a:	f7fc fda0 	bl	8000cde <HAL_NVIC_EnableIRQ>

}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800

080041ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	; 0x28
 80041b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b2:	f107 0314 	add.w	r3, r7, #20
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	605a      	str	r2, [r3, #4]
 80041bc:	609a      	str	r2, [r3, #8]
 80041be:	60da      	str	r2, [r3, #12]
 80041c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041c2:	4b4c      	ldr	r3, [pc, #304]	; (80042f4 <MX_GPIO_Init+0x148>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4a4b      	ldr	r2, [pc, #300]	; (80042f4 <MX_GPIO_Init+0x148>)
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	61d3      	str	r3, [r2, #28]
 80041ce:	4b49      	ldr	r3, [pc, #292]	; (80042f4 <MX_GPIO_Init+0x148>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041da:	4b46      	ldr	r3, [pc, #280]	; (80042f4 <MX_GPIO_Init+0x148>)
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	4a45      	ldr	r2, [pc, #276]	; (80042f4 <MX_GPIO_Init+0x148>)
 80041e0:	f043 0320 	orr.w	r3, r3, #32
 80041e4:	61d3      	str	r3, [r2, #28]
 80041e6:	4b43      	ldr	r3, [pc, #268]	; (80042f4 <MX_GPIO_Init+0x148>)
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f2:	4b40      	ldr	r3, [pc, #256]	; (80042f4 <MX_GPIO_Init+0x148>)
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	4a3f      	ldr	r2, [pc, #252]	; (80042f4 <MX_GPIO_Init+0x148>)
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	61d3      	str	r3, [r2, #28]
 80041fe:	4b3d      	ldr	r3, [pc, #244]	; (80042f4 <MX_GPIO_Init+0x148>)
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800420a:	4b3a      	ldr	r3, [pc, #232]	; (80042f4 <MX_GPIO_Init+0x148>)
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4a39      	ldr	r2, [pc, #228]	; (80042f4 <MX_GPIO_Init+0x148>)
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	61d3      	str	r3, [r2, #28]
 8004216:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <MX_GPIO_Init+0x148>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	607b      	str	r3, [r7, #4]
 8004220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LASER_LED_Pin, GPIO_PIN_RESET);
 8004222:	2200      	movs	r2, #0
 8004224:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004228:	4833      	ldr	r0, [pc, #204]	; (80042f8 <MX_GPIO_Init+0x14c>)
 800422a:	f7fd f8f5 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTM_SAVE_POSE_Pin;
 800422e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004234:	4b31      	ldr	r3, [pc, #196]	; (80042fc <MX_GPIO_Init+0x150>)
 8004236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTM_SAVE_POSE_GPIO_Port, &GPIO_InitStruct);
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	4619      	mov	r1, r3
 8004242:	482f      	ldr	r0, [pc, #188]	; (8004300 <MX_GPIO_Init+0x154>)
 8004244:	f7fc ff5a 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_RESET_POSITIONS_Pin|BTM_PLAY_POSES_Pin|BTM_STOP_POSES_Pin|BTM_LASER_LED_Pin;
 8004248:	2387      	movs	r3, #135	; 0x87
 800424a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800424c:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <MX_GPIO_Init+0x150>)
 800424e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004250:	2301      	movs	r3, #1
 8004252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	4619      	mov	r1, r3
 800425a:	4829      	ldr	r0, [pc, #164]	; (8004300 <MX_GPIO_Init+0x154>)
 800425c:	f7fc ff4e 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004260:	2320      	movs	r3, #32
 8004262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004264:	2301      	movs	r3, #1
 8004266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426c:	2300      	movs	r3, #0
 800426e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004270:	f107 0314 	add.w	r3, r7, #20
 8004274:	4619      	mov	r1, r3
 8004276:	4820      	ldr	r0, [pc, #128]	; (80042f8 <MX_GPIO_Init+0x14c>)
 8004278:	f7fc ff40 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASER_LED_Pin;
 800427c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004282:	2301      	movs	r3, #1
 8004284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004286:	2301      	movs	r3, #1
 8004288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800428a:	2301      	movs	r3, #1
 800428c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LASER_LED_GPIO_Port, &GPIO_InitStruct);
 800428e:	f107 0314 	add.w	r3, r7, #20
 8004292:	4619      	mov	r1, r3
 8004294:	4818      	ldr	r0, [pc, #96]	; (80042f8 <MX_GPIO_Init+0x14c>)
 8004296:	f7fc ff31 	bl	80010fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800429a:	2200      	movs	r2, #0
 800429c:	2100      	movs	r1, #0
 800429e:	2006      	movs	r0, #6
 80042a0:	f7fc fd01 	bl	8000ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80042a4:	2006      	movs	r0, #6
 80042a6:	f7fc fd1a 	bl	8000cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80042aa:	2200      	movs	r2, #0
 80042ac:	2100      	movs	r1, #0
 80042ae:	2007      	movs	r0, #7
 80042b0:	f7fc fcf9 	bl	8000ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80042b4:	2007      	movs	r0, #7
 80042b6:	f7fc fd12 	bl	8000cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80042ba:	2200      	movs	r2, #0
 80042bc:	2100      	movs	r1, #0
 80042be:	2008      	movs	r0, #8
 80042c0:	f7fc fcf1 	bl	8000ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80042c4:	2008      	movs	r0, #8
 80042c6:	f7fc fd0a 	bl	8000cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2100      	movs	r1, #0
 80042ce:	2017      	movs	r0, #23
 80042d0:	f7fc fce9 	bl	8000ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80042d4:	2017      	movs	r0, #23
 80042d6:	f7fc fd02 	bl	8000cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	2100      	movs	r1, #0
 80042de:	2028      	movs	r0, #40	; 0x28
 80042e0:	f7fc fce1 	bl	8000ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80042e4:	2028      	movs	r0, #40	; 0x28
 80042e6:	f7fc fcfa 	bl	8000cde <HAL_NVIC_EnableIRQ>

}
 80042ea:	bf00      	nop
 80042ec:	3728      	adds	r7, #40	; 0x28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40020000 	.word	0x40020000
 80042fc:	10110000 	.word	0x10110000
 8004300:	40020800 	.word	0x40020800

08004304 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD  0x4E //0x7E//0x7e //0x4E//0x3f// 0x27 // cambiar

void lcd_send_cmd (char cmd)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af02      	add	r7, sp, #8
 800430a:	4603      	mov	r3, r0
 800430c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	f023 030f 	bic.w	r3, r3, #15
 8004314:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	f043 030c 	orr.w	r3, r3, #12
 8004322:	b2db      	uxtb	r3, r3
 8004324:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	f043 0308 	orr.w	r3, r3, #8
 800432c:	b2db      	uxtb	r3, r3
 800432e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8004330:	7bbb      	ldrb	r3, [r7, #14]
 8004332:	f043 030c 	orr.w	r3, r3, #12
 8004336:	b2db      	uxtb	r3, r3
 8004338:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800433a:	7bbb      	ldrb	r3, [r7, #14]
 800433c:	f043 0308 	orr.w	r3, r3, #8
 8004340:	b2db      	uxtb	r3, r3
 8004342:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004344:	f107 0208 	add.w	r2, r7, #8
 8004348:	2364      	movs	r3, #100	; 0x64
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	2304      	movs	r3, #4
 800434e:	214e      	movs	r1, #78	; 0x4e
 8004350:	4803      	ldr	r0, [pc, #12]	; (8004360 <lcd_send_cmd+0x5c>)
 8004352:	f7fd f9dd 	bl	8001710 <HAL_I2C_Master_Transmit>
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	2000093c 	.word	0x2000093c

08004364 <lcd_send_data>:


void lcd_send_data (char data)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af02      	add	r7, sp, #8
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	f023 030f 	bic.w	r3, r3, #15
 8004374:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	f043 030d 	orr.w	r3, r3, #13
 8004382:	b2db      	uxtb	r3, r3
 8004384:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	f043 0309 	orr.w	r3, r3, #9
 800438c:	b2db      	uxtb	r3, r3
 800438e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004390:	7bbb      	ldrb	r3, [r7, #14]
 8004392:	f043 030d 	orr.w	r3, r3, #13
 8004396:	b2db      	uxtb	r3, r3
 8004398:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800439a:	7bbb      	ldrb	r3, [r7, #14]
 800439c:	f043 0309 	orr.w	r3, r3, #9
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80043a4:	f107 0208 	add.w	r2, r7, #8
 80043a8:	2364      	movs	r3, #100	; 0x64
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	2304      	movs	r3, #4
 80043ae:	214e      	movs	r1, #78	; 0x4e
 80043b0:	4803      	ldr	r0, [pc, #12]	; (80043c0 <lcd_send_data+0x5c>)
 80043b2:	f7fd f9ad 	bl	8001710 <HAL_I2C_Master_Transmit>
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	2000093c 	.word	0x2000093c

080043c4 <lcd_init>:

void lcd_init (void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
	uint8_t i=0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 80043ce:	2064      	movs	r0, #100	; 0x64
 80043d0:	f7fb ff42 	bl	8000258 <HAL_Delay>
	for(i=0;i<3;i++)//sending 3 times: select 4-bit mode
 80043d4:	2300      	movs	r3, #0
 80043d6:	71fb      	strb	r3, [r7, #7]
 80043d8:	e008      	b.n	80043ec <lcd_init+0x28>
	{
		lcd_send_cmd(0x03);
 80043da:	2003      	movs	r0, #3
 80043dc:	f7ff ff92 	bl	8004304 <lcd_send_cmd>
		HAL_Delay(45);
 80043e0:	202d      	movs	r0, #45	; 0x2d
 80043e2:	f7fb ff39 	bl	8000258 <HAL_Delay>
	for(i=0;i<3;i++)//sending 3 times: select 4-bit mode
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	3301      	adds	r3, #1
 80043ea:	71fb      	strb	r3, [r7, #7]
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d9f3      	bls.n	80043da <lcd_init+0x16>
	}
	lcd_send_cmd (0x02);
 80043f2:	2002      	movs	r0, #2
 80043f4:	f7ff ff86 	bl	8004304 <lcd_send_cmd>
	HAL_Delay(100);
 80043f8:	2064      	movs	r0, #100	; 0x64
 80043fa:	f7fb ff2d 	bl	8000258 <HAL_Delay>
	lcd_send_cmd (0x28);
 80043fe:	2028      	movs	r0, #40	; 0x28
 8004400:	f7ff ff80 	bl	8004304 <lcd_send_cmd>
	HAL_Delay(1);
 8004404:	2001      	movs	r0, #1
 8004406:	f7fb ff27 	bl	8000258 <HAL_Delay>
	lcd_send_cmd (0x0c);
 800440a:	200c      	movs	r0, #12
 800440c:	f7ff ff7a 	bl	8004304 <lcd_send_cmd>
	HAL_Delay(1);
 8004410:	2001      	movs	r0, #1
 8004412:	f7fb ff21 	bl	8000258 <HAL_Delay>
	lcd_send_cmd (0x80);
 8004416:	2080      	movs	r0, #128	; 0x80
 8004418:	f7ff ff74 	bl	8004304 <lcd_send_cmd>
	HAL_Delay(1);
 800441c:	2001      	movs	r0, #1
 800441e:	f7fb ff1b 	bl	8000258 <HAL_Delay>
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <lcd_send_number>:

void lcd_send_number (uint8_t line , uint8_t row, uint32_t value)
{ //enviar variable
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	603a      	str	r2, [r7, #0]
 8004436:	71fb      	strb	r3, [r7, #7]
 8004438:	460b      	mov	r3, r1
 800443a:	71bb      	strb	r3, [r7, #6]
	if (line == 0 ){
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d113      	bne.n	800446a <lcd_send_number+0x3e>
		uint8_t line_x_y = 0x80 + row ;
 8004442:	79bb      	ldrb	r3, [r7, #6]
 8004444:	3b80      	subs	r3, #128	; 0x80
 8004446:	773b      	strb	r3, [r7, #28]
		lcd_send_cmd(line_x_y);
 8004448:	7f3b      	ldrb	r3, [r7, #28]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff ff5a 	bl	8004304 <lcd_send_cmd>
		char lcdvalor[4];
		sprintf(lcdvalor, "%d", value);
 8004450:	f107 0318 	add.w	r3, r7, #24
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	4930      	ldr	r1, [pc, #192]	; (8004518 <lcd_send_number+0xec>)
 8004458:	4618      	mov	r0, r3
 800445a:	f001 fed1 	bl	8006200 <siprintf>
		lcd_send_string(lcdvalor);
 800445e:	f107 0318 	add.w	r3, r7, #24
 8004462:	4618      	mov	r0, r3
 8004464:	f000 f8d0 	bl	8004608 <lcd_send_string>
				lcd_send_cmd(line_x_y);
				char lcdvalor[4];
				sprintf(lcdvalor, "%d", value);
				lcd_send_string(lcdvalor);
			}
}
 8004468:	e052      	b.n	8004510 <lcd_send_number+0xe4>
	else if (line == 1 )
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d118      	bne.n	80044a2 <lcd_send_number+0x76>
			uint8_t line_x_y = 0x80 |( 0x40 + row) ;
 8004470:	79bb      	ldrb	r3, [r7, #6]
 8004472:	3340      	adds	r3, #64	; 0x40
 8004474:	b2db      	uxtb	r3, r3
 8004476:	b25b      	sxtb	r3, r3
 8004478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800447c:	b25b      	sxtb	r3, r3
 800447e:	777b      	strb	r3, [r7, #29]
			lcd_send_cmd(line_x_y);
 8004480:	7f7b      	ldrb	r3, [r7, #29]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff ff3e 	bl	8004304 <lcd_send_cmd>
			sprintf(lcdvalor, "%d", value);
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	4922      	ldr	r1, [pc, #136]	; (8004518 <lcd_send_number+0xec>)
 8004490:	4618      	mov	r0, r3
 8004492:	f001 feb5 	bl	8006200 <siprintf>
			lcd_send_string(lcdvalor);
 8004496:	f107 0314 	add.w	r3, r7, #20
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f8b4 	bl	8004608 <lcd_send_string>
}
 80044a0:	e036      	b.n	8004510 <lcd_send_number+0xe4>
	else if (line == 2 )
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d118      	bne.n	80044da <lcd_send_number+0xae>
				uint8_t line_x_y = 0x80 |( 0x14 + row) ;
 80044a8:	79bb      	ldrb	r3, [r7, #6]
 80044aa:	3314      	adds	r3, #20
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	b25b      	sxtb	r3, r3
 80044b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044b4:	b25b      	sxtb	r3, r3
 80044b6:	77bb      	strb	r3, [r7, #30]
				lcd_send_cmd(line_x_y);
 80044b8:	7fbb      	ldrb	r3, [r7, #30]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff ff22 	bl	8004304 <lcd_send_cmd>
				sprintf(lcdvalor, "%d", value);
 80044c0:	f107 0310 	add.w	r3, r7, #16
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	4914      	ldr	r1, [pc, #80]	; (8004518 <lcd_send_number+0xec>)
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 fe99 	bl	8006200 <siprintf>
				lcd_send_string(lcdvalor);
 80044ce:	f107 0310 	add.w	r3, r7, #16
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f898 	bl	8004608 <lcd_send_string>
}
 80044d8:	e01a      	b.n	8004510 <lcd_send_number+0xe4>
	else if (line == 3 )
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d117      	bne.n	8004510 <lcd_send_number+0xe4>
				uint8_t line_x_y = 0x80 |( 0x54 + row) ;
 80044e0:	79bb      	ldrb	r3, [r7, #6]
 80044e2:	3354      	adds	r3, #84	; 0x54
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	b25b      	sxtb	r3, r3
 80044e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044ec:	b25b      	sxtb	r3, r3
 80044ee:	77fb      	strb	r3, [r7, #31]
				lcd_send_cmd(line_x_y);
 80044f0:	7ffb      	ldrb	r3, [r7, #31]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff ff06 	bl	8004304 <lcd_send_cmd>
				sprintf(lcdvalor, "%d", value);
 80044f8:	f107 030c 	add.w	r3, r7, #12
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	4906      	ldr	r1, [pc, #24]	; (8004518 <lcd_send_number+0xec>)
 8004500:	4618      	mov	r0, r3
 8004502:	f001 fe7d 	bl	8006200 <siprintf>
				lcd_send_string(lcdvalor);
 8004506:	f107 030c 	add.w	r3, r7, #12
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f87c 	bl	8004608 <lcd_send_string>
}
 8004510:	bf00      	nop
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	0800734c 	.word	0x0800734c

0800451c <lcd_print_x_y>:
void lcd_print_x_y(uint8_t line , uint8_t row, char *str )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	603a      	str	r2, [r7, #0]
 8004526:	71fb      	strb	r3, [r7, #7]
 8004528:	460b      	mov	r3, r1
 800452a:	71bb      	strb	r3, [r7, #6]
	if (line == 0 ){
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d113      	bne.n	800455a <lcd_print_x_y+0x3e>
		uint8_t line_x_y = 0x80 + row ;
 8004532:	79bb      	ldrb	r3, [r7, #6]
 8004534:	3b80      	subs	r3, #128	; 0x80
 8004536:	733b      	strb	r3, [r7, #12]
		lcd_send_cmd(line_x_y);
 8004538:	7b3b      	ldrb	r3, [r7, #12]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fee2 	bl	8004304 <lcd_send_cmd>
		while (*str) lcd_send_data (*str++);
 8004540:	e006      	b.n	8004550 <lcd_print_x_y+0x34>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	603a      	str	r2, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff ff0a 	bl	8004364 <lcd_send_data>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f4      	bne.n	8004542 <lcd_print_x_y+0x26>
				uint8_t line_x_y = 0x80 |( 0x54 + row) ;
				lcd_send_cmd(line_x_y);
				while (*str) lcd_send_data (*str++);
			}

}
 8004558:	e052      	b.n	8004600 <lcd_print_x_y+0xe4>
	else if (line == 1 )
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d118      	bne.n	8004592 <lcd_print_x_y+0x76>
			uint8_t line_x_y = 0x80 |( 0x40 + row) ;
 8004560:	79bb      	ldrb	r3, [r7, #6]
 8004562:	3340      	adds	r3, #64	; 0x40
 8004564:	b2db      	uxtb	r3, r3
 8004566:	b25b      	sxtb	r3, r3
 8004568:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800456c:	b25b      	sxtb	r3, r3
 800456e:	737b      	strb	r3, [r7, #13]
			lcd_send_cmd(line_x_y);
 8004570:	7b7b      	ldrb	r3, [r7, #13]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fec6 	bl	8004304 <lcd_send_cmd>
			while (*str) lcd_send_data (*str++);
 8004578:	e006      	b.n	8004588 <lcd_print_x_y+0x6c>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	603a      	str	r2, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff feee 	bl	8004364 <lcd_send_data>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f4      	bne.n	800457a <lcd_print_x_y+0x5e>
}
 8004590:	e036      	b.n	8004600 <lcd_print_x_y+0xe4>
	else if (line == 2 )
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d118      	bne.n	80045ca <lcd_print_x_y+0xae>
				uint8_t line_x_y = 0x80 |( 0x14 + row) ;
 8004598:	79bb      	ldrb	r3, [r7, #6]
 800459a:	3314      	adds	r3, #20
 800459c:	b2db      	uxtb	r3, r3
 800459e:	b25b      	sxtb	r3, r3
 80045a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045a4:	b25b      	sxtb	r3, r3
 80045a6:	73bb      	strb	r3, [r7, #14]
				lcd_send_cmd(line_x_y);
 80045a8:	7bbb      	ldrb	r3, [r7, #14]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff feaa 	bl	8004304 <lcd_send_cmd>
				while (*str) lcd_send_data (*str++);
 80045b0:	e006      	b.n	80045c0 <lcd_print_x_y+0xa4>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	603a      	str	r2, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fed2 	bl	8004364 <lcd_send_data>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f4      	bne.n	80045b2 <lcd_print_x_y+0x96>
}
 80045c8:	e01a      	b.n	8004600 <lcd_print_x_y+0xe4>
	else if (line == 3 )
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d117      	bne.n	8004600 <lcd_print_x_y+0xe4>
				uint8_t line_x_y = 0x80 |( 0x54 + row) ;
 80045d0:	79bb      	ldrb	r3, [r7, #6]
 80045d2:	3354      	adds	r3, #84	; 0x54
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	b25b      	sxtb	r3, r3
 80045d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	73fb      	strb	r3, [r7, #15]
				lcd_send_cmd(line_x_y);
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fe8e 	bl	8004304 <lcd_send_cmd>
				while (*str) lcd_send_data (*str++);
 80045e8:	e006      	b.n	80045f8 <lcd_print_x_y+0xdc>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	603a      	str	r2, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff feb6 	bl	8004364 <lcd_send_data>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f4      	bne.n	80045ea <lcd_print_x_y+0xce>
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8004610:	e006      	b.n	8004620 <lcd_send_string+0x18>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fea2 	bl	8004364 <lcd_send_data>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f4      	bne.n	8004612 <lcd_send_string+0xa>
}
 8004628:	bf00      	nop
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <lcd_clear>:

void lcd_clear (void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  HAL_Delay(3);
 8004634:	2003      	movs	r0, #3
 8004636:	f7fb fe0f 	bl	8000258 <HAL_Delay>
	lcd_send_cmd (0x01);
 800463a:	2001      	movs	r0, #1
 800463c:	f7ff fe62 	bl	8004304 <lcd_send_cmd>
	HAL_Delay(3);
 8004640:	2003      	movs	r0, #3
 8004642:	f7fb fe09 	bl	8000258 <HAL_Delay>
}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004650:	4b12      	ldr	r3, [pc, #72]	; (800469c <MX_I2C1_Init+0x50>)
 8004652:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <MX_I2C1_Init+0x54>)
 8004654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004656:	4b11      	ldr	r3, [pc, #68]	; (800469c <MX_I2C1_Init+0x50>)
 8004658:	4a12      	ldr	r2, [pc, #72]	; (80046a4 <MX_I2C1_Init+0x58>)
 800465a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <MX_I2C1_Init+0x50>)
 800465e:	2200      	movs	r2, #0
 8004660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004662:	4b0e      	ldr	r3, [pc, #56]	; (800469c <MX_I2C1_Init+0x50>)
 8004664:	2200      	movs	r2, #0
 8004666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <MX_I2C1_Init+0x50>)
 800466a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800466e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <MX_I2C1_Init+0x50>)
 8004672:	2200      	movs	r2, #0
 8004674:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <MX_I2C1_Init+0x50>)
 8004678:	2200      	movs	r2, #0
 800467a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <MX_I2C1_Init+0x50>)
 800467e:	2200      	movs	r2, #0
 8004680:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <MX_I2C1_Init+0x50>)
 8004684:	2200      	movs	r2, #0
 8004686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004688:	4804      	ldr	r0, [pc, #16]	; (800469c <MX_I2C1_Init+0x50>)
 800468a:	f7fc ff19 	bl	80014c0 <HAL_I2C_Init>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004694:	f000 fd9a 	bl	80051cc <Error_Handler>
  }

}
 8004698:	bf00      	nop
 800469a:	bd80      	pop	{r7, pc}
 800469c:	2000093c 	.word	0x2000093c
 80046a0:	40005400 	.word	0x40005400
 80046a4:	000186a0 	.word	0x000186a0

080046a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b0:	f107 0314 	add.w	r3, r7, #20
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a17      	ldr	r2, [pc, #92]	; (8004724 <HAL_I2C_MspInit+0x7c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d128      	bne.n	800471c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ca:	4b17      	ldr	r3, [pc, #92]	; (8004728 <HAL_I2C_MspInit+0x80>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	4a16      	ldr	r2, [pc, #88]	; (8004728 <HAL_I2C_MspInit+0x80>)
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	61d3      	str	r3, [r2, #28]
 80046d6:	4b14      	ldr	r3, [pc, #80]	; (8004728 <HAL_I2C_MspInit+0x80>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80046e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046e8:	2312      	movs	r3, #18
 80046ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046ec:	2301      	movs	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f0:	2303      	movs	r3, #3
 80046f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046f4:	2304      	movs	r3, #4
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f8:	f107 0314 	add.w	r3, r7, #20
 80046fc:	4619      	mov	r1, r3
 80046fe:	480b      	ldr	r0, [pc, #44]	; (800472c <HAL_I2C_MspInit+0x84>)
 8004700:	f7fc fcfc 	bl	80010fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004704:	4b08      	ldr	r3, [pc, #32]	; (8004728 <HAL_I2C_MspInit+0x80>)
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	4a07      	ldr	r2, [pc, #28]	; (8004728 <HAL_I2C_MspInit+0x80>)
 800470a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800470e:	6253      	str	r3, [r2, #36]	; 0x24
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <HAL_I2C_MspInit+0x80>)
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800471c:	bf00      	nop
 800471e:	3728      	adds	r7, #40	; 0x28
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40005400 	.word	0x40005400
 8004728:	40023800 	.word	0x40023800
 800472c:	40020400 	.word	0x40020400

08004730 <__io_putchar>:
int get_dma_value_norm(int i);
void lcd_manager(uint8_t code, uint16_t servo_pose);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
//-----------UART_FUNC---------
PUTCHAR_PROTOTYPE
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8004738:	1d39      	adds	r1, r7, #4
 800473a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800473e:	2201      	movs	r2, #1
 8004740:	4803      	ldr	r0, [pc, #12]	; (8004750 <__io_putchar+0x20>)
 8004742:	f7fe fe6f 	bl	8003424 <HAL_UART_Transmit>
	return ch;
 8004746:	687b      	ldr	r3, [r7, #4]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000afc 	.word	0x20000afc

08004754 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
	char ch;
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800475a:	1df9      	adds	r1, r7, #7
 800475c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004760:	2201      	movs	r2, #1
 8004762:	4804      	ldr	r0, [pc, #16]	; (8004774 <__io_getchar+0x20>)
 8004764:	f7fe fef7 	bl	8003556 <HAL_UART_Receive>

	return ch;
 8004768:	79fb      	ldrb	r3, [r7, #7]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000afc 	.word	0x20000afc

08004778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800477e:	f7fb fcfd 	bl	800017c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004782:	f000 f9bb 	bl	8004afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004786:	f7ff fd11 	bl	80041ac <MX_GPIO_Init>
  MX_DMA_Init();
 800478a:	f7ff fcf1 	bl	8004170 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800478e:	f001 fc51 	bl	8006034 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8004792:	f7ff fbdb 	bl	8003f4c <MX_ADC_Init>
  MX_TIM2_Init();
 8004796:	f001 f8dd 	bl	8005954 <MX_TIM2_Init>
  MX_TIM3_Init();
 800479a:	f001 f94d 	bl	8005a38 <MX_TIM3_Init>
  MX_TIM4_Init();
 800479e:	f001 f9bf 	bl	8005b20 <MX_TIM4_Init>
  MX_TIM9_Init();
 80047a2:	f001 fa9d 	bl	8005ce0 <MX_TIM9_Init>
  MX_TIM7_Init();
 80047a6:	f001 fa65 	bl	8005c74 <MX_TIM7_Init>
  MX_I2C1_Init();
 80047aa:	f7ff ff4f 	bl	800464c <MX_I2C1_Init>
  MX_TIM6_Init();
 80047ae:	f001 fa2b 	bl	8005c08 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  user_init();
 80047b2:	f000 f9f1 	bl	8004b98 <user_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
check:  if(playing==1){
 80047b6:	4ba5      	ldr	r3, [pc, #660]	; (8004a4c <main+0x2d4>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d1fb      	bne.n	80047b6 <main+0x3e>
	  		static uint8_t ok_servo1=0;
	  		static uint8_t ok_servo2=0;
	  		static uint8_t ok_servo3=0;
	  		static uint8_t ok_servo4=0;
  	  		ok_servo1=0;
 80047be:	4ba4      	ldr	r3, [pc, #656]	; (8004a50 <main+0x2d8>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	701a      	strb	r2, [r3, #0]
  			ok_servo2=0;
 80047c4:	4ba3      	ldr	r3, [pc, #652]	; (8004a54 <main+0x2dc>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	701a      	strb	r2, [r3, #0]
  			ok_servo3=0;
 80047ca:	4ba3      	ldr	r3, [pc, #652]	; (8004a58 <main+0x2e0>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
  			ok_servo4=0;
 80047d0:	4ba2      	ldr	r3, [pc, #648]	; (8004a5c <main+0x2e4>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	701a      	strb	r2, [r3, #0]

	  	  	for(pose_actual=0; pose_actual<pose_counter; pose_actual++){ //todas las posiciones guardadas
 80047d6:	4ba2      	ldr	r3, [pc, #648]	; (8004a60 <main+0x2e8>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e17f      	b.n	8004ade <main+0x366>

				//lcd mode playing
				lcd_manager(0, 1);
 80047de:	2101      	movs	r1, #1
 80047e0:	2000      	movs	r0, #0
 80047e2:	f000 fab1 	bl	8004d48 <lcd_manager>

	  	  		if(playing==0){//si se pulsa stop se volvera a empezar desde el principio
 80047e6:	4b99      	ldr	r3, [pc, #612]	; (8004a4c <main+0x2d4>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <main+0x7e>
	  	  			pose_actual=0;
 80047ee:	4b9c      	ldr	r3, [pc, #624]	; (8004a60 <main+0x2e8>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
	  	  			goto check;
 80047f4:	e7df      	b.n	80047b6 <main+0x3e>
	  	  		}
	  	  		//reset flag de la position terminada
	  	  		  uint8_t ok_servo1=0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
	  			  uint8_t ok_servo2=0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	73bb      	strb	r3, [r7, #14]
	  			  uint8_t ok_servo3=0;
 80047fe:	2300      	movs	r3, #0
 8004800:	737b      	strb	r3, [r7, #13]
	  			  uint8_t ok_servo4=0;
 8004802:	2300      	movs	r3, #0
 8004804:	733b      	strb	r3, [r7, #12]

	  			while(ok_servo1==0 || ok_servo2==0 || ok_servo3==0 || ok_servo4==0){
 8004806:	e155      	b.n	8004ab4 <main+0x33c>
	  			  for(int servo=0; servo< NUM_SERVOS; servo++ ){
 8004808:	2300      	movs	r3, #0
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	e13c      	b.n	8004a88 <main+0x310>
	  					switch(servo){
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b03      	cmp	r3, #3
 8004812:	f200 8117 	bhi.w	8004a44 <main+0x2cc>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <main+0xa4>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	0800482d 	.word	0x0800482d
 8004820:	080048b3 	.word	0x080048b3
 8004824:	08004939 	.word	0x08004939
 8004828:	080049bb 	.word	0x080049bb
	  						case 0 :
	  							if(ok_servo1==0){
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d13c      	bne.n	80048ac <main+0x134>
	  								if(TIM2->CCR1 != posiciones.servo1[pose_actual]){
 8004832:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	4a89      	ldr	r2, [pc, #548]	; (8004a60 <main+0x2e8>)
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	4989      	ldr	r1, [pc, #548]	; (8004a64 <main+0x2ec>)
 800483e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004842:	4293      	cmp	r3, r2
 8004844:	d024      	beq.n	8004890 <main+0x118>
	  									if(TIM2->CCR1 < posiciones.servo1[pose_actual]){
 8004846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	4a84      	ldr	r2, [pc, #528]	; (8004a60 <main+0x2e8>)
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	4984      	ldr	r1, [pc, #528]	; (8004a64 <main+0x2ec>)
 8004852:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004856:	4293      	cmp	r3, r2
 8004858:	d207      	bcs.n	800486a <main+0xf2>
	  										TIM2->CCR1=TIM2->CCR1+1;
 800485a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004864:	3301      	adds	r3, #1
 8004866:	6353      	str	r3, [r2, #52]	; 0x34
	  									ok_servo1=1;
	  							    	}
	  							}else if(ok_servo1==1){
	  								break;
	  							}
	  							 break;
 8004868:	e104      	b.n	8004a74 <main+0x2fc>
	  									}else if(TIM2->CCR1 > posiciones.servo1[pose_actual]){
 800486a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800486e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004870:	4a7b      	ldr	r2, [pc, #492]	; (8004a60 <main+0x2e8>)
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	497b      	ldr	r1, [pc, #492]	; (8004a64 <main+0x2ec>)
 8004876:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800487a:	4293      	cmp	r3, r2
 800487c:	f240 80fa 	bls.w	8004a74 <main+0x2fc>
	  										TIM2->CCR1=TIM2->CCR1-1;
 8004880:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800488a:	3b01      	subs	r3, #1
 800488c:	6353      	str	r3, [r2, #52]	; 0x34
	  							 break;
 800488e:	e0f1      	b.n	8004a74 <main+0x2fc>
	  								}else if(TIM2->CCR1 == posiciones.servo1[pose_actual]){
 8004890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004896:	4a72      	ldr	r2, [pc, #456]	; (8004a60 <main+0x2e8>)
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	4972      	ldr	r1, [pc, #456]	; (8004a64 <main+0x2ec>)
 800489c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80048a0:	4293      	cmp	r3, r2
 80048a2:	f040 80e7 	bne.w	8004a74 <main+0x2fc>
	  									ok_servo1=1;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
	  							 break;
 80048aa:	e0e3      	b.n	8004a74 <main+0x2fc>
	  							}else if(ok_servo1==1){
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b01      	cmp	r3, #1
	  							 break;
 80048b0:	e0e0      	b.n	8004a74 <main+0x2fc>
	  						case 1 :
	  							if(ok_servo2==0){
 80048b2:	7bbb      	ldrb	r3, [r7, #14]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d13c      	bne.n	8004932 <main+0x1ba>
	  								if(TIM3->CCR1 != posiciones.servo2[pose_actual]){
 80048b8:	4b6b      	ldr	r3, [pc, #428]	; (8004a68 <main+0x2f0>)
 80048ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048bc:	4b68      	ldr	r3, [pc, #416]	; (8004a60 <main+0x2e8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4968      	ldr	r1, [pc, #416]	; (8004a64 <main+0x2ec>)
 80048c2:	33f8      	adds	r3, #248	; 0xf8
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	440b      	add	r3, r1
 80048c8:	889b      	ldrh	r3, [r3, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d022      	beq.n	8004914 <main+0x19c>
	  									if(TIM3->CCR1 < posiciones.servo2[pose_actual]){
 80048ce:	4b66      	ldr	r3, [pc, #408]	; (8004a68 <main+0x2f0>)
 80048d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d2:	4b63      	ldr	r3, [pc, #396]	; (8004a60 <main+0x2e8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4963      	ldr	r1, [pc, #396]	; (8004a64 <main+0x2ec>)
 80048d8:	33f8      	adds	r3, #248	; 0xf8
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	440b      	add	r3, r1
 80048de:	889b      	ldrh	r3, [r3, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d205      	bcs.n	80048f0 <main+0x178>
	  										TIM3->CCR1=TIM3->CCR1+1;
 80048e4:	4b60      	ldr	r3, [pc, #384]	; (8004a68 <main+0x2f0>)
 80048e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e8:	4a5f      	ldr	r2, [pc, #380]	; (8004a68 <main+0x2f0>)
 80048ea:	3301      	adds	r3, #1
 80048ec:	6353      	str	r3, [r2, #52]	; 0x34

	  							    	}
	  							}else if(ok_servo2==1){
	  								break;
	  							}
	  							 break;
 80048ee:	e0c3      	b.n	8004a78 <main+0x300>
	  									}else if(TIM3->CCR1 > posiciones.servo2[pose_actual]){
 80048f0:	4b5d      	ldr	r3, [pc, #372]	; (8004a68 <main+0x2f0>)
 80048f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f4:	4b5a      	ldr	r3, [pc, #360]	; (8004a60 <main+0x2e8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	495a      	ldr	r1, [pc, #360]	; (8004a64 <main+0x2ec>)
 80048fa:	33f8      	adds	r3, #248	; 0xf8
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	440b      	add	r3, r1
 8004900:	889b      	ldrh	r3, [r3, #4]
 8004902:	429a      	cmp	r2, r3
 8004904:	f240 80b8 	bls.w	8004a78 <main+0x300>
	  										TIM3->CCR1=TIM3->CCR1-1;
 8004908:	4b57      	ldr	r3, [pc, #348]	; (8004a68 <main+0x2f0>)
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	4a56      	ldr	r2, [pc, #344]	; (8004a68 <main+0x2f0>)
 800490e:	3b01      	subs	r3, #1
 8004910:	6353      	str	r3, [r2, #52]	; 0x34
	  							 break;
 8004912:	e0b1      	b.n	8004a78 <main+0x300>
	  								}else if(TIM3->CCR1 == posiciones.servo2[pose_actual]){
 8004914:	4b54      	ldr	r3, [pc, #336]	; (8004a68 <main+0x2f0>)
 8004916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004918:	4b51      	ldr	r3, [pc, #324]	; (8004a60 <main+0x2e8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4951      	ldr	r1, [pc, #324]	; (8004a64 <main+0x2ec>)
 800491e:	33f8      	adds	r3, #248	; 0xf8
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	440b      	add	r3, r1
 8004924:	889b      	ldrh	r3, [r3, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	f040 80a6 	bne.w	8004a78 <main+0x300>
	  									ok_servo2=1;
 800492c:	2301      	movs	r3, #1
 800492e:	73bb      	strb	r3, [r7, #14]
	  							 break;
 8004930:	e0a2      	b.n	8004a78 <main+0x300>
	  							}else if(ok_servo2==1){
 8004932:	7bbb      	ldrb	r3, [r7, #14]
 8004934:	2b01      	cmp	r3, #1
	  							 break;
 8004936:	e09f      	b.n	8004a78 <main+0x300>
	  						case 2 :
	  							if(ok_servo3==0){
 8004938:	7b7b      	ldrb	r3, [r7, #13]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d13a      	bne.n	80049b4 <main+0x23c>
	  								if(TIM4->CCR1 != posiciones.servo3[pose_actual]){
 800493e:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <main+0x2f4>)
 8004940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004942:	4a47      	ldr	r2, [pc, #284]	; (8004a60 <main+0x2e8>)
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	4947      	ldr	r1, [pc, #284]	; (8004a64 <main+0x2ec>)
 8004948:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 800494c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004950:	4293      	cmp	r3, r2
 8004952:	d021      	beq.n	8004998 <main+0x220>
	  									if(TIM4->CCR1 < posiciones.servo3[pose_actual]){
 8004954:	4b45      	ldr	r3, [pc, #276]	; (8004a6c <main+0x2f4>)
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	4a41      	ldr	r2, [pc, #260]	; (8004a60 <main+0x2e8>)
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	4941      	ldr	r1, [pc, #260]	; (8004a64 <main+0x2ec>)
 800495e:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8004962:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004966:	4293      	cmp	r3, r2
 8004968:	d205      	bcs.n	8004976 <main+0x1fe>
	  										TIM4->CCR1=TIM4->CCR1+1;
 800496a:	4b40      	ldr	r3, [pc, #256]	; (8004a6c <main+0x2f4>)
 800496c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496e:	4a3f      	ldr	r2, [pc, #252]	; (8004a6c <main+0x2f4>)
 8004970:	3301      	adds	r3, #1
 8004972:	6353      	str	r3, [r2, #52]	; 0x34
	  									ok_servo3=1;
	  							    	}
	  							}else if(ok_servo3==1){
	  								break;
	  							}
	  							 break;
 8004974:	e082      	b.n	8004a7c <main+0x304>
	  									}else if(TIM4->CCR1 > posiciones.servo3[pose_actual]){
 8004976:	4b3d      	ldr	r3, [pc, #244]	; (8004a6c <main+0x2f4>)
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	4a39      	ldr	r2, [pc, #228]	; (8004a60 <main+0x2e8>)
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	4939      	ldr	r1, [pc, #228]	; (8004a64 <main+0x2ec>)
 8004980:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8004984:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004988:	4293      	cmp	r3, r2
 800498a:	d977      	bls.n	8004a7c <main+0x304>
	  										TIM4->CCR1=TIM4->CCR1-1;
 800498c:	4b37      	ldr	r3, [pc, #220]	; (8004a6c <main+0x2f4>)
 800498e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004990:	4a36      	ldr	r2, [pc, #216]	; (8004a6c <main+0x2f4>)
 8004992:	3b01      	subs	r3, #1
 8004994:	6353      	str	r3, [r2, #52]	; 0x34
	  							 break;
 8004996:	e071      	b.n	8004a7c <main+0x304>
	  								}else if(TIM4->CCR1 == posiciones.servo3[pose_actual]){
 8004998:	4b34      	ldr	r3, [pc, #208]	; (8004a6c <main+0x2f4>)
 800499a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499c:	4a30      	ldr	r2, [pc, #192]	; (8004a60 <main+0x2e8>)
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	4930      	ldr	r1, [pc, #192]	; (8004a64 <main+0x2ec>)
 80049a2:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 80049a6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d166      	bne.n	8004a7c <main+0x304>
	  									ok_servo3=1;
 80049ae:	2301      	movs	r3, #1
 80049b0:	737b      	strb	r3, [r7, #13]
	  							 break;
 80049b2:	e063      	b.n	8004a7c <main+0x304>
	  							}else if(ok_servo3==1){
 80049b4:	7b7b      	ldrb	r3, [r7, #13]
 80049b6:	2b01      	cmp	r3, #1
	  							 break;
 80049b8:	e060      	b.n	8004a7c <main+0x304>
	  						case 3 :
	  							if(ok_servo4==0){
 80049ba:	7b3b      	ldrb	r3, [r7, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d13e      	bne.n	8004a3e <main+0x2c6>
	  								if(TIM9->CCR1 != posiciones.servo4[pose_actual]){
 80049c0:	4b2b      	ldr	r3, [pc, #172]	; (8004a70 <main+0x2f8>)
 80049c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c4:	4b26      	ldr	r3, [pc, #152]	; (8004a60 <main+0x2e8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4926      	ldr	r1, [pc, #152]	; (8004a64 <main+0x2ec>)
 80049ca:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	440b      	add	r3, r1
 80049d2:	889b      	ldrh	r3, [r3, #4]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d023      	beq.n	8004a20 <main+0x2a8>
	  									if(TIM9->CCR1 < posiciones.servo4[pose_actual]){
 80049d8:	4b25      	ldr	r3, [pc, #148]	; (8004a70 <main+0x2f8>)
 80049da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049dc:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <main+0x2e8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4920      	ldr	r1, [pc, #128]	; (8004a64 <main+0x2ec>)
 80049e2:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	440b      	add	r3, r1
 80049ea:	889b      	ldrh	r3, [r3, #4]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d205      	bcs.n	80049fc <main+0x284>
	  										TIM9->CCR1=TIM9->CCR1+1;
 80049f0:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <main+0x2f8>)
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <main+0x2f8>)
 80049f6:	3301      	adds	r3, #1
 80049f8:	6353      	str	r3, [r2, #52]	; 0x34
	  									ok_servo4=1;
	  							    	}
	  							}else if(ok_servo4==1){
	  								break;
	  							}
	  							 break;
 80049fa:	e041      	b.n	8004a80 <main+0x308>
	  									}else if(TIM9->CCR1 > posiciones.servo4[pose_actual]){
 80049fc:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <main+0x2f8>)
 80049fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a00:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <main+0x2e8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4917      	ldr	r1, [pc, #92]	; (8004a64 <main+0x2ec>)
 8004a06:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	440b      	add	r3, r1
 8004a0e:	889b      	ldrh	r3, [r3, #4]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d935      	bls.n	8004a80 <main+0x308>
	  										TIM9->CCR1=TIM9->CCR1-1;
 8004a14:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <main+0x2f8>)
 8004a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a18:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <main+0x2f8>)
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	6353      	str	r3, [r2, #52]	; 0x34
	  							 break;
 8004a1e:	e02f      	b.n	8004a80 <main+0x308>
	  								}else if(TIM9->CCR1 == posiciones.servo4[pose_actual]){
 8004a20:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <main+0x2f8>)
 8004a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a24:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <main+0x2e8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	490e      	ldr	r1, [pc, #56]	; (8004a64 <main+0x2ec>)
 8004a2a:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	440b      	add	r3, r1
 8004a32:	889b      	ldrh	r3, [r3, #4]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d123      	bne.n	8004a80 <main+0x308>
	  									ok_servo4=1;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	733b      	strb	r3, [r7, #12]
	  							 break;
 8004a3c:	e020      	b.n	8004a80 <main+0x308>
	  							}else if(ok_servo4==1){
 8004a3e:	7b3b      	ldrb	r3, [r7, #12]
 8004a40:	2b01      	cmp	r3, #1
	  							 break;
 8004a42:	e01d      	b.n	8004a80 <main+0x308>
	  						default:
	  							servo=0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60bb      	str	r3, [r7, #8]
	  							 break;
 8004a48:	e01b      	b.n	8004a82 <main+0x30a>
 8004a4a:	bf00      	nop
 8004a4c:	20000990 	.word	0x20000990
 8004a50:	200000bd 	.word	0x200000bd
 8004a54:	200000be 	.word	0x200000be
 8004a58:	200000bf 	.word	0x200000bf
 8004a5c:	200000c0 	.word	0x200000c0
 8004a60:	200000b4 	.word	0x200000b4
 8004a64:	2000016c 	.word	0x2000016c
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40010800 	.word	0x40010800
	  							 break;
 8004a74:	bf00      	nop
 8004a76:	e004      	b.n	8004a82 <main+0x30a>
	  							 break;
 8004a78:	bf00      	nop
 8004a7a:	e002      	b.n	8004a82 <main+0x30a>
	  							 break;
 8004a7c:	bf00      	nop
 8004a7e:	e000      	b.n	8004a82 <main+0x30a>
	  							 break;
 8004a80:	bf00      	nop
	  			  for(int servo=0; servo< NUM_SERVOS; servo++ ){
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	3301      	adds	r3, #1
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	f77f aebf 	ble.w	800480e <main+0x96>

	  					}//switch
	  				}//for all servos
					for(int time=0; time< PLAYING_DELAY;time++){//tiempo-> smooth servos movement
 8004a90:	2300      	movs	r3, #0
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	e00a      	b.n	8004aac <main+0x334>
						if(playing==0){//si se pulsa stop se volvera a empezar desde el principio
 8004a96:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <main+0x378>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <main+0x32e>
							 pose_actual=0;
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <main+0x37c>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
							goto check;
 8004aa4:	e687      	b.n	80047b6 <main+0x3e>
					for(int time=0; time< PLAYING_DELAY;time++){//tiempo-> smooth servos movement
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	607b      	str	r3, [r7, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ab2:	dbf0      	blt.n	8004a96 <main+0x31e>
	  			while(ok_servo1==0 || ok_servo2==0 || ok_servo3==0 || ok_servo4==0){
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f43f aea6 	beq.w	8004808 <main+0x90>
 8004abc:	7bbb      	ldrb	r3, [r7, #14]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f43f aea2 	beq.w	8004808 <main+0x90>
 8004ac4:	7b7b      	ldrb	r3, [r7, #13]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f43f ae9e 	beq.w	8004808 <main+0x90>
 8004acc:	7b3b      	ldrb	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f43f ae9a 	beq.w	8004808 <main+0x90>
	  	  	for(pose_actual=0; pose_actual<pose_counter; pose_actual++){ //todas las posiciones guardadas
 8004ad4:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <main+0x37c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	4a06      	ldr	r2, [pc, #24]	; (8004af4 <main+0x37c>)
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <main+0x37c>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <main+0x380>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	f4ff ae79 	bcc.w	80047de <main+0x66>
check:  if(playing==1){
 8004aec:	e663      	b.n	80047b6 <main+0x3e>
 8004aee:	bf00      	nop
 8004af0:	20000990 	.word	0x20000990
 8004af4:	200000b4 	.word	0x200000b4
 8004af8:	200000b0 	.word	0x200000b0

08004afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b092      	sub	sp, #72	; 0x48
 8004b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b02:	f107 0314 	add.w	r3, r7, #20
 8004b06:	2234      	movs	r2, #52	; 0x34
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f001 fb58 	bl	80061c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b10:	463b      	mov	r3, r7
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	609a      	str	r2, [r3, #8]
 8004b1a:	60da      	str	r2, [r3, #12]
 8004b1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <SystemClock_Config+0x98>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8004b26:	4a1b      	ldr	r2, [pc, #108]	; (8004b94 <SystemClock_Config+0x98>)
 8004b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b2c:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b32:	2301      	movs	r3, #1
 8004b34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b36:	2310      	movs	r3, #16
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004b42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8004b48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004b4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b4e:	f107 0314 	add.w	r3, r7, #20
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd f8d6 	bl	8001d04 <HAL_RCC_OscConfig>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004b5e:	f000 fb35 	bl	80051cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b62:	230f      	movs	r3, #15
 8004b64:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b66:	2303      	movs	r3, #3
 8004b68:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b72:	2300      	movs	r3, #0
 8004b74:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004b76:	463b      	mov	r3, r7
 8004b78:	2101      	movs	r1, #1
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fd fbf2 	bl	8002364 <HAL_RCC_ClockConfig>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004b86:	f000 fb21 	bl	80051cc <Error_Handler>
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	3748      	adds	r7, #72	; 0x48
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40007000 	.word	0x40007000

08004b98 <user_init>:

/* USER CODE BEGIN 4 */
void user_init(void){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0

//limpiar la memoria de posiciones

	lcd_init();
 8004b9c:	f7ff fc12 	bl	80043c4 <lcd_init>
	lcd_clear();
 8004ba0:	f7ff fd46 	bl	8004630 <lcd_clear>
	lcd_send_string("Hello there!");
 8004ba4:	4820      	ldr	r0, [pc, #128]	; (8004c28 <user_init+0x90>)
 8004ba6:	f7ff fd2f 	bl	8004608 <lcd_send_string>
	lcd_print_x_y(2, 0, "proyect: Robot Arm");
 8004baa:	4a20      	ldr	r2, [pc, #128]	; (8004c2c <user_init+0x94>)
 8004bac:	2100      	movs	r1, #0
 8004bae:	2002      	movs	r0, #2
 8004bb0:	f7ff fcb4 	bl	800451c <lcd_print_x_y>
	lcd_print_x_y(3, 0, "by: Sergio and David");
 8004bb4:	4a1e      	ldr	r2, [pc, #120]	; (8004c30 <user_init+0x98>)
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	2003      	movs	r0, #3
 8004bba:	f7ff fcaf 	bl	800451c <lcd_print_x_y>
//posicion inicial para evitar choques

	default_position();
 8004bbe:	f000 f883 	bl	8004cc8 <default_position>
	playing=0;
 8004bc2:	4b1c      	ldr	r3, [pc, #112]	; (8004c34 <user_init+0x9c>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
//encender adc y DMA

	//aqui "adc_to_dma_values" es el buffer
	//donde el dma va a guardar las conversiones del adc

	HAL_ADC_Start_DMA(&hadc,adc_to_dma_values,NUM_SERVOS);
 8004bc8:	2204      	movs	r2, #4
 8004bca:	491b      	ldr	r1, [pc, #108]	; (8004c38 <user_init+0xa0>)
 8004bcc:	481b      	ldr	r0, [pc, #108]	; (8004c3c <user_init+0xa4>)
 8004bce:	f7fb fcab 	bl	8000528 <HAL_ADC_Start_DMA>

//encender servos (timers)

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	481a      	ldr	r0, [pc, #104]	; (8004c40 <user_init+0xa8>)
 8004bd6:	f7fd fecc 	bl	8002972 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4819      	ldr	r0, [pc, #100]	; (8004c44 <user_init+0xac>)
 8004bde:	f7fd fec8 	bl	8002972 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004be2:	2100      	movs	r1, #0
 8004be4:	4818      	ldr	r0, [pc, #96]	; (8004c48 <user_init+0xb0>)
 8004be6:	f7fd fec4 	bl	8002972 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8004bea:	2100      	movs	r1, #0
 8004bec:	4817      	ldr	r0, [pc, #92]	; (8004c4c <user_init+0xb4>)
 8004bee:	f7fd fec0 	bl	8002972 <HAL_TIM_PWM_Start>
//canvas inicial

	HAL_Delay(2000);
 8004bf2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004bf6:	f7fb fb2f 	bl	8000258 <HAL_Delay>
	lcd_manager(2, 0);
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	2002      	movs	r0, #2
 8004bfe:	f000 f8a3 	bl	8004d48 <lcd_manager>
//el timer 7 es para coger valores de forma periodica en el
//dma por el adc
	HAL_TIM_Base_Start(&htim7);
 8004c02:	4813      	ldr	r0, [pc, #76]	; (8004c50 <user_init+0xb8>)
 8004c04:	f7fd fdf7 	bl	80027f6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim7);
 8004c08:	4811      	ldr	r0, [pc, #68]	; (8004c50 <user_init+0xb8>)
 8004c0a:	f7fd fe39 	bl	8002880 <HAL_TIM_Base_Start_IT>
//el timer 6 es para actualizar los valores del lcd prediodicamente
//evita retrasos en la ejecucion de funciones como el posicionamineto de servos
//*el timer 6 tambien es: debouncer reset (usado en el record BTM y laser led BTM)
	HAL_TIM_Base_Start(&htim6);
 8004c0e:	4811      	ldr	r0, [pc, #68]	; (8004c54 <user_init+0xbc>)
 8004c10:	f7fd fdf1 	bl	80027f6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8004c14:	480f      	ldr	r0, [pc, #60]	; (8004c54 <user_init+0xbc>)
 8004c16:	f7fd fe33 	bl	8002880 <HAL_TIM_Base_Start_IT>
// Habilitamos poder recibir datos del uart para guardar o cargar las posiciones
	HAL_UART_Receive_IT(&huart2, &uart_recieve, sizeof(uint8_t));
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	490e      	ldr	r1, [pc, #56]	; (8004c58 <user_init+0xc0>)
 8004c1e:	480f      	ldr	r0, [pc, #60]	; (8004c5c <user_init+0xc4>)
 8004c20:	f7fe fd3f 	bl	80036a2 <HAL_UART_Receive_IT>

}
 8004c24:	bf00      	nop
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	08007350 	.word	0x08007350
 8004c2c:	08007360 	.word	0x08007360
 8004c30:	08007374 	.word	0x08007374
 8004c34:	20000990 	.word	0x20000990
 8004c38:	20000090 	.word	0x20000090
 8004c3c:	20000118 	.word	0x20000118
 8004c40:	20000a84 	.word	0x20000a84
 8004c44:	200009d0 	.word	0x200009d0
 8004c48:	20000994 	.word	0x20000994
 8004c4c:	20000a48 	.word	0x20000a48
 8004c50:	20000ac0 	.word	0x20000ac0
 8004c54:	20000a0c 	.word	0x20000a0c
 8004c58:	200000b8 	.word	0x200000b8
 8004c5c:	20000afc 	.word	0x20000afc

08004c60 <reset_positions>:

//-----------------FUNIONES_PROPIAS------------------

void reset_positions(void){
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
	for(int i = 0; i<MAX_POSES ;i++){
 8004c66:	2300      	movs	r3, #0
 8004c68:	607b      	str	r3, [r7, #4]
 8004c6a:	e020      	b.n	8004cae <reset_positions+0x4e>
		posiciones.servo1[i]=0;
 8004c6c:	4a14      	ldr	r2, [pc, #80]	; (8004cc0 <reset_positions+0x60>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2100      	movs	r1, #0
 8004c72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		posiciones.servo2[i]=0;
 8004c76:	4a12      	ldr	r2, [pc, #72]	; (8004cc0 <reset_positions+0x60>)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	33f8      	adds	r3, #248	; 0xf8
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	4413      	add	r3, r2
 8004c80:	2200      	movs	r2, #0
 8004c82:	809a      	strh	r2, [r3, #4]
		posiciones.servo3[i]=0;
 8004c84:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <reset_positions+0x60>)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		posiciones.servo4[i]=0;
 8004c92:	4a0b      	ldr	r2, [pc, #44]	; (8004cc0 <reset_positions+0x60>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	4413      	add	r3, r2
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	809a      	strh	r2, [r3, #4]
		pose_counter=0;
 8004ca2:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <reset_positions+0x64>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<MAX_POSES ;i++){
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3301      	adds	r3, #1
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2bf9      	cmp	r3, #249	; 0xf9
 8004cb2:	dddb      	ble.n	8004c6c <reset_positions+0xc>
	}
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	2000016c 	.word	0x2000016c
 8004cc4:	200000b0 	.word	0x200000b0

08004cc8 <default_position>:

void default_position(void){
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
	TIM2->CCR1=1100;
 8004ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cd0:	f240 424c 	movw	r2, #1100	; 0x44c
 8004cd4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR1=1100;
 8004cd6:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <default_position+0x30>)
 8004cd8:	f240 424c 	movw	r2, #1100	; 0x44c
 8004cdc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR1=1100;
 8004cde:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <default_position+0x34>)
 8004ce0:	f240 424c 	movw	r2, #1100	; 0x44c
 8004ce4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM9->CCR1=1100;
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <default_position+0x38>)
 8004ce8:	f240 424c 	movw	r2, #1100	; 0x44c
 8004cec:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004cee:	bf00      	nop
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800
 8004d00:	40010800 	.word	0x40010800

08004d04 <get_dma_value_norm>:
}
void stop_adc_dma(void){
	HAL_ADC_Stop_DMA(&hadc);
}

int get_dma_value_norm(int i){
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	if(i>NUM_SERVOS){
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	dd01      	ble.n	8004d16 <get_dma_value_norm+0x12>
		return 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	e00e      	b.n	8004d34 <get_dma_value_norm+0x30>
	}
	//la recta es adc*1,3+1500
	return ((adc_to_dma_values[i]*13)/10+1500);
 8004d16:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <get_dma_value_norm+0x3c>)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	4a06      	ldr	r2, [pc, #24]	; (8004d44 <get_dma_value_norm+0x40>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	08db      	lsrs	r3, r3, #3
 8004d30:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc


}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000090 	.word	0x20000090
 8004d44:	cccccccd 	.word	0xcccccccd

08004d48 <lcd_manager>:
//--------------lcd--manager----------------
void lcd_manager(uint8_t code, uint16_t code_value){
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	460a      	mov	r2, r1
 8004d52:	71fb      	strb	r3, [r7, #7]
 8004d54:	4613      	mov	r3, r2
 8004d56:	80bb      	strh	r3, [r7, #4]

	switch (code) {
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	f200 8127 	bhi.w	8004fae <lcd_manager+0x266>
 8004d60:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <lcd_manager+0x20>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d79 	.word	0x08004d79
 8004d6c:	08004ef9 	.word	0x08004ef9
 8004d70:	08004f5d 	.word	0x08004f5d
 8004d74:	08004f9f 	.word	0x08004f9f
	case 0: //modo: 0 code_value recording 0 - playing 1 - saved pose 2 - stopped 3-
		switch (code_value) {
 8004d78:	88bb      	ldrh	r3, [r7, #4]
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	f200 80ba 	bhi.w	8004ef4 <lcd_manager+0x1ac>
 8004d80:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <lcd_manager+0x40>)
 8004d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d86:	bf00      	nop
 8004d88:	08004dad 	.word	0x08004dad
 8004d8c:	08004de5 	.word	0x08004de5
 8004d90:	08004e35 	.word	0x08004e35
 8004d94:	08004e6d 	.word	0x08004e6d
 8004d98:	08004e79 	.word	0x08004e79
 8004d9c:	08004e85 	.word	0x08004e85
 8004da0:	08004e91 	.word	0x08004e91
 8004da4:	08004ec9 	.word	0x08004ec9
 8004da8:	08004edf 	.word	0x08004edf
		case 0:
			lcd_print_x_y(0,0,"                    ");//clear line 1
 8004dac:	4a82      	ldr	r2, [pc, #520]	; (8004fb8 <lcd_manager+0x270>)
 8004dae:	2100      	movs	r1, #0
 8004db0:	2000      	movs	r0, #0
 8004db2:	f7ff fbb3 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(0, 0, "MODE: recording");
 8004db6:	4a81      	ldr	r2, [pc, #516]	; (8004fbc <lcd_manager+0x274>)
 8004db8:	2100      	movs	r1, #0
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f7ff fbae 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(1,0,"                    ");//clear line 1
 8004dc0:	4a7d      	ldr	r2, [pc, #500]	; (8004fb8 <lcd_manager+0x270>)
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	f7ff fba9 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(1,0,"saved poses:");
 8004dca:	4a7d      	ldr	r2, [pc, #500]	; (8004fc0 <lcd_manager+0x278>)
 8004dcc:	2100      	movs	r1, #0
 8004dce:	2001      	movs	r0, #1
 8004dd0:	f7ff fba4 	bl	800451c <lcd_print_x_y>
			lcd_send_number(1, 13, pose_counter);
 8004dd4:	4b7b      	ldr	r3, [pc, #492]	; (8004fc4 <lcd_manager+0x27c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	210d      	movs	r1, #13
 8004ddc:	2001      	movs	r0, #1
 8004dde:	f7ff fb25 	bl	800442c <lcd_send_number>
			break;
 8004de2:	e088      	b.n	8004ef6 <lcd_manager+0x1ae>
		case 1:
			lcd_print_x_y(0,0,"                    ");//clear line 1
 8004de4:	4a74      	ldr	r2, [pc, #464]	; (8004fb8 <lcd_manager+0x270>)
 8004de6:	2100      	movs	r1, #0
 8004de8:	2000      	movs	r0, #0
 8004dea:	f7ff fb97 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(0, 0, "MODE: playing");
 8004dee:	4a76      	ldr	r2, [pc, #472]	; (8004fc8 <lcd_manager+0x280>)
 8004df0:	2100      	movs	r1, #0
 8004df2:	2000      	movs	r0, #0
 8004df4:	f7ff fb92 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(1,0,"                    ");//clear line 1
 8004df8:	4a6f      	ldr	r2, [pc, #444]	; (8004fb8 <lcd_manager+0x270>)
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	2001      	movs	r0, #1
 8004dfe:	f7ff fb8d 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(1,0,"playing:");
 8004e02:	4a72      	ldr	r2, [pc, #456]	; (8004fcc <lcd_manager+0x284>)
 8004e04:	2100      	movs	r1, #0
 8004e06:	2001      	movs	r0, #1
 8004e08:	f7ff fb88 	bl	800451c <lcd_print_x_y>
			lcd_send_number(1, 9, pose_actual);
 8004e0c:	4b70      	ldr	r3, [pc, #448]	; (8004fd0 <lcd_manager+0x288>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	2109      	movs	r1, #9
 8004e14:	2001      	movs	r0, #1
 8004e16:	f7ff fb09 	bl	800442c <lcd_send_number>
			lcd_print_x_y(1, 12, "of ");
 8004e1a:	4a6e      	ldr	r2, [pc, #440]	; (8004fd4 <lcd_manager+0x28c>)
 8004e1c:	210c      	movs	r1, #12
 8004e1e:	2001      	movs	r0, #1
 8004e20:	f7ff fb7c 	bl	800451c <lcd_print_x_y>
			lcd_send_number(1, 14, pose_counter);
 8004e24:	4b67      	ldr	r3, [pc, #412]	; (8004fc4 <lcd_manager+0x27c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	210e      	movs	r1, #14
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	f7ff fafd 	bl	800442c <lcd_send_number>
			break;
 8004e32:	e060      	b.n	8004ef6 <lcd_manager+0x1ae>
		case 2:
			lcd_print_x_y(0,0,"                    ");//clear line 1
 8004e34:	4a60      	ldr	r2, [pc, #384]	; (8004fb8 <lcd_manager+0x270>)
 8004e36:	2100      	movs	r1, #0
 8004e38:	2000      	movs	r0, #0
 8004e3a:	f7ff fb6f 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(0, 0, "MODE: pose saved! ");
 8004e3e:	4a66      	ldr	r2, [pc, #408]	; (8004fd8 <lcd_manager+0x290>)
 8004e40:	2100      	movs	r1, #0
 8004e42:	2000      	movs	r0, #0
 8004e44:	f7ff fb6a 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(1,0,"                    ");//clear line 1
 8004e48:	4a5b      	ldr	r2, [pc, #364]	; (8004fb8 <lcd_manager+0x270>)
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f7ff fb65 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(1,0,"saved poses:");
 8004e52:	4a5b      	ldr	r2, [pc, #364]	; (8004fc0 <lcd_manager+0x278>)
 8004e54:	2100      	movs	r1, #0
 8004e56:	2001      	movs	r0, #1
 8004e58:	f7ff fb60 	bl	800451c <lcd_print_x_y>
			lcd_send_number(1, 13, pose_counter);
 8004e5c:	4b59      	ldr	r3, [pc, #356]	; (8004fc4 <lcd_manager+0x27c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	210d      	movs	r1, #13
 8004e64:	2001      	movs	r0, #1
 8004e66:	f7ff fae1 	bl	800442c <lcd_send_number>

			break;
 8004e6a:	e044      	b.n	8004ef6 <lcd_manager+0x1ae>
		case 3:
			lcd_print_x_y(0, 0, "MODE: stopped!!");
 8004e6c:	4a5b      	ldr	r2, [pc, #364]	; (8004fdc <lcd_manager+0x294>)
 8004e6e:	2100      	movs	r1, #0
 8004e70:	2000      	movs	r0, #0
 8004e72:	f7ff fb53 	bl	800451c <lcd_print_x_y>
			break;
 8004e76:	e03e      	b.n	8004ef6 <lcd_manager+0x1ae>
		case 4:
			lcd_print_x_y(0, 0, "MODE: load_pc");
 8004e78:	4a59      	ldr	r2, [pc, #356]	; (8004fe0 <lcd_manager+0x298>)
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	f7ff fb4d 	bl	800451c <lcd_print_x_y>
			break;
 8004e82:	e038      	b.n	8004ef6 <lcd_manager+0x1ae>
		case 5:
			lcd_print_x_y(0, 0, "MODE: saved_pc");
 8004e84:	4a57      	ldr	r2, [pc, #348]	; (8004fe4 <lcd_manager+0x29c>)
 8004e86:	2100      	movs	r1, #0
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f7ff fb47 	bl	800451c <lcd_print_x_y>
			break;
 8004e8e:	e032      	b.n	8004ef6 <lcd_manager+0x1ae>
		case 6://reset poses -> recording poses
			lcd_print_x_y(0,0,"                    ");//clear line 1
 8004e90:	4a49      	ldr	r2, [pc, #292]	; (8004fb8 <lcd_manager+0x270>)
 8004e92:	2100      	movs	r1, #0
 8004e94:	2000      	movs	r0, #0
 8004e96:	f7ff fb41 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(0, 0, "MODE: deleted poses!");
 8004e9a:	4a53      	ldr	r2, [pc, #332]	; (8004fe8 <lcd_manager+0x2a0>)
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	f7ff fb3c 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(1,0,"                    ");//clear line 1
 8004ea4:	4a44      	ldr	r2, [pc, #272]	; (8004fb8 <lcd_manager+0x270>)
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	f7ff fb37 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(1,0,"saved poses:");
 8004eae:	4a44      	ldr	r2, [pc, #272]	; (8004fc0 <lcd_manager+0x278>)
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	f7ff fb32 	bl	800451c <lcd_print_x_y>
			lcd_send_number(1, 13, pose_counter);
 8004eb8:	4b42      	ldr	r3, [pc, #264]	; (8004fc4 <lcd_manager+0x27c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	210d      	movs	r1, #13
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f7ff fab3 	bl	800442c <lcd_send_number>
			break;
 8004ec6:	e016      	b.n	8004ef6 <lcd_manager+0x1ae>
		case 7:
			lcd_print_x_y(0,0,"                    ");//clear line 1
 8004ec8:	4a3b      	ldr	r2, [pc, #236]	; (8004fb8 <lcd_manager+0x270>)
 8004eca:	2100      	movs	r1, #0
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f7ff fb25 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(0, 0, "MODE: UART SENT");
 8004ed2:	4a46      	ldr	r2, [pc, #280]	; (8004fec <lcd_manager+0x2a4>)
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f7ff fb20 	bl	800451c <lcd_print_x_y>
			break;
 8004edc:	e00b      	b.n	8004ef6 <lcd_manager+0x1ae>
		case 8:
			lcd_print_x_y(0,0,"                    ");//clear line 1
 8004ede:	4a36      	ldr	r2, [pc, #216]	; (8004fb8 <lcd_manager+0x270>)
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	f7ff fb1a 	bl	800451c <lcd_print_x_y>
			lcd_print_x_y(0, 0, "MODE: UART PC->MICRO");
 8004ee8:	4a41      	ldr	r2, [pc, #260]	; (8004ff0 <lcd_manager+0x2a8>)
 8004eea:	2100      	movs	r1, #0
 8004eec:	2000      	movs	r0, #0
 8004eee:	f7ff fb15 	bl	800451c <lcd_print_x_y>
			break;
 8004ef2:	e000      	b.n	8004ef6 <lcd_manager+0x1ae>
		default:
			break;
 8004ef4:	bf00      	nop
		}
		break;
 8004ef6:	e05b      	b.n	8004fb0 <lcd_manager+0x268>
	case 1:
		lcd_print_x_y(2, 0, "s1:");
 8004ef8:	4a3e      	ldr	r2, [pc, #248]	; (8004ff4 <lcd_manager+0x2ac>)
 8004efa:	2100      	movs	r1, #0
 8004efc:	2002      	movs	r0, #2
 8004efe:	f7ff fb0d 	bl	800451c <lcd_print_x_y>
		lcd_send_number(2, 4, TIM2->CCR1);
 8004f02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2104      	movs	r1, #4
 8004f0c:	2002      	movs	r0, #2
 8004f0e:	f7ff fa8d 	bl	800442c <lcd_send_number>
		//servo2
		lcd_print_x_y(2, 9, "s2:");
 8004f12:	4a39      	ldr	r2, [pc, #228]	; (8004ff8 <lcd_manager+0x2b0>)
 8004f14:	2109      	movs	r1, #9
 8004f16:	2002      	movs	r0, #2
 8004f18:	f7ff fb00 	bl	800451c <lcd_print_x_y>
		lcd_send_number(2, 13, TIM3->CCR1);
 8004f1c:	4b37      	ldr	r3, [pc, #220]	; (8004ffc <lcd_manager+0x2b4>)
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f20:	461a      	mov	r2, r3
 8004f22:	210d      	movs	r1, #13
 8004f24:	2002      	movs	r0, #2
 8004f26:	f7ff fa81 	bl	800442c <lcd_send_number>
		//servo3
		lcd_print_x_y(3, 0, "s3:");
 8004f2a:	4a35      	ldr	r2, [pc, #212]	; (8005000 <lcd_manager+0x2b8>)
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	2003      	movs	r0, #3
 8004f30:	f7ff faf4 	bl	800451c <lcd_print_x_y>
		lcd_send_number(3, 4, TIM4->CCR1);
 8004f34:	4b33      	ldr	r3, [pc, #204]	; (8005004 <lcd_manager+0x2bc>)
 8004f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f38:	461a      	mov	r2, r3
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	2003      	movs	r0, #3
 8004f3e:	f7ff fa75 	bl	800442c <lcd_send_number>
		//servo4
		lcd_print_x_y(3, 9, "s4:");
 8004f42:	4a31      	ldr	r2, [pc, #196]	; (8005008 <lcd_manager+0x2c0>)
 8004f44:	2109      	movs	r1, #9
 8004f46:	2003      	movs	r0, #3
 8004f48:	f7ff fae8 	bl	800451c <lcd_print_x_y>
		lcd_send_number(3, 13, TIM9->CCR1);
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	; (800500c <lcd_manager+0x2c4>)
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f50:	461a      	mov	r2, r3
 8004f52:	210d      	movs	r1, #13
 8004f54:	2003      	movs	r0, #3
 8004f56:	f7ff fa69 	bl	800442c <lcd_send_number>
		break;
 8004f5a:	e029      	b.n	8004fb0 <lcd_manager+0x268>
	case 2: //canvas inicial
		lcd_clear();
 8004f5c:	f7ff fb68 	bl	8004630 <lcd_clear>
		lcd_print_x_y(0, 0, "MODE: LOADING...");
 8004f60:	4a2b      	ldr	r2, [pc, #172]	; (8005010 <lcd_manager+0x2c8>)
 8004f62:	2100      	movs	r1, #0
 8004f64:	2000      	movs	r0, #0
 8004f66:	f7ff fad9 	bl	800451c <lcd_print_x_y>
		lcd_print_x_y(1,0,"saved poses:");
 8004f6a:	4a15      	ldr	r2, [pc, #84]	; (8004fc0 <lcd_manager+0x278>)
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	2001      	movs	r0, #1
 8004f70:	f7ff fad4 	bl	800451c <lcd_print_x_y>
		lcd_print_x_y(2, 0, "s1:");
 8004f74:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <lcd_manager+0x2ac>)
 8004f76:	2100      	movs	r1, #0
 8004f78:	2002      	movs	r0, #2
 8004f7a:	f7ff facf 	bl	800451c <lcd_print_x_y>
		lcd_print_x_y(2, 9, "s2:");
 8004f7e:	4a1e      	ldr	r2, [pc, #120]	; (8004ff8 <lcd_manager+0x2b0>)
 8004f80:	2109      	movs	r1, #9
 8004f82:	2002      	movs	r0, #2
 8004f84:	f7ff faca 	bl	800451c <lcd_print_x_y>
		lcd_print_x_y(3, 0, "s3:");
 8004f88:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <lcd_manager+0x2b8>)
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	2003      	movs	r0, #3
 8004f8e:	f7ff fac5 	bl	800451c <lcd_print_x_y>
		lcd_print_x_y(3, 9, "s4:");
 8004f92:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <lcd_manager+0x2c0>)
 8004f94:	2109      	movs	r1, #9
 8004f96:	2003      	movs	r0, #3
 8004f98:	f7ff fac0 	bl	800451c <lcd_print_x_y>

		break;
 8004f9c:	e008      	b.n	8004fb0 <lcd_manager+0x268>
	case 3: //error
		lcd_clear();
 8004f9e:	f7ff fb47 	bl	8004630 <lcd_clear>
		lcd_print_x_y(0, 0, "MODE: ERROR");
 8004fa2:	4a1c      	ldr	r2, [pc, #112]	; (8005014 <lcd_manager+0x2cc>)
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	f7ff fab8 	bl	800451c <lcd_print_x_y>
		break;
 8004fac:	e000      	b.n	8004fb0 <lcd_manager+0x268>
	default:
		break;
 8004fae:	bf00      	nop
	}
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	0800738c 	.word	0x0800738c
 8004fbc:	080073a4 	.word	0x080073a4
 8004fc0:	080073b4 	.word	0x080073b4
 8004fc4:	200000b0 	.word	0x200000b0
 8004fc8:	080073c4 	.word	0x080073c4
 8004fcc:	080073d4 	.word	0x080073d4
 8004fd0:	200000b4 	.word	0x200000b4
 8004fd4:	080073e0 	.word	0x080073e0
 8004fd8:	080073e4 	.word	0x080073e4
 8004fdc:	080073f8 	.word	0x080073f8
 8004fe0:	08007408 	.word	0x08007408
 8004fe4:	08007418 	.word	0x08007418
 8004fe8:	08007428 	.word	0x08007428
 8004fec:	08007440 	.word	0x08007440
 8004ff0:	08007450 	.word	0x08007450
 8004ff4:	08007468 	.word	0x08007468
 8004ff8:	0800746c 	.word	0x0800746c
 8004ffc:	40000400 	.word	0x40000400
 8005000:	08007470 	.word	0x08007470
 8005004:	40000800 	.word	0x40000800
 8005008:	08007474 	.word	0x08007474
 800500c:	40010800 	.word	0x40010800
 8005010:	08007478 	.word	0x08007478
 8005014:	0800748c 	.word	0x0800748c

08005018 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b087      	sub	sp, #28
 800501c:	af02      	add	r7, sp, #8
 800501e:	6078      	str	r0, [r7, #4]

	//ENVIA LA INFORMACION
	if(uart_recieve!='\n' && (uart_recieve=='s'||uart_recieve=='S')){
 8005020:	4b5f      	ldr	r3, [pc, #380]	; (80051a0 <HAL_UART_RxCpltCallback+0x188>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b0a      	cmp	r3, #10
 8005026:	d04d      	beq.n	80050c4 <HAL_UART_RxCpltCallback+0xac>
 8005028:	4b5d      	ldr	r3, [pc, #372]	; (80051a0 <HAL_UART_RxCpltCallback+0x188>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b73      	cmp	r3, #115	; 0x73
 800502e:	d003      	beq.n	8005038 <HAL_UART_RxCpltCallback+0x20>
 8005030:	4b5b      	ldr	r3, [pc, #364]	; (80051a0 <HAL_UART_RxCpltCallback+0x188>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b53      	cmp	r3, #83	; 0x53
 8005036:	d145      	bne.n	80050c4 <HAL_UART_RxCpltCallback+0xac>
		HAL_TIM_Base_Stop(&htim6);
 8005038:	485a      	ldr	r0, [pc, #360]	; (80051a4 <HAL_UART_RxCpltCallback+0x18c>)
 800503a:	f7fd fbff 	bl	800283c <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim6);
 800503e:	4859      	ldr	r0, [pc, #356]	; (80051a4 <HAL_UART_RxCpltCallback+0x18c>)
 8005040:	f7fd fc41 	bl	80028c6 <HAL_TIM_Base_Stop_IT>
		lcd_manager(0, 7);
 8005044:	2107      	movs	r1, #7
 8005046:	2000      	movs	r0, #0
 8005048:	f7ff fe7e 	bl	8004d48 <lcd_manager>
		//printf("saved poses %d \r\n",pose_counter);
		printf("%d \r\n",pose_counter);
 800504c:	4b56      	ldr	r3, [pc, #344]	; (80051a8 <HAL_UART_RxCpltCallback+0x190>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4619      	mov	r1, r3
 8005052:	4856      	ldr	r0, [pc, #344]	; (80051ac <HAL_UART_RxCpltCallback+0x194>)
 8005054:	f001 f8bc 	bl	80061d0 <iprintf>
		if(playing==0){
 8005058:	4b55      	ldr	r3, [pc, #340]	; (80051b0 <HAL_UART_RxCpltCallback+0x198>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d12a      	bne.n	80050b6 <HAL_UART_RxCpltCallback+0x9e>
			for(int pose=0;pose<pose_counter;pose++){
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e022      	b.n	80050ac <HAL_UART_RxCpltCallback+0x94>
				printf("%d,%d,%d,%d\r\n",posiciones.servo1[pose],posiciones.servo2[pose],posiciones.servo3[pose],posiciones.servo4[pose]);
 8005066:	4a53      	ldr	r2, [pc, #332]	; (80051b4 <HAL_UART_RxCpltCallback+0x19c>)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800506e:	4619      	mov	r1, r3
 8005070:	4a50      	ldr	r2, [pc, #320]	; (80051b4 <HAL_UART_RxCpltCallback+0x19c>)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	33f8      	adds	r3, #248	; 0xf8
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	4413      	add	r3, r2
 800507a:	889b      	ldrh	r3, [r3, #4]
 800507c:	4618      	mov	r0, r3
 800507e:	4a4d      	ldr	r2, [pc, #308]	; (80051b4 <HAL_UART_RxCpltCallback+0x19c>)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800508a:	461c      	mov	r4, r3
 800508c:	4a49      	ldr	r2, [pc, #292]	; (80051b4 <HAL_UART_RxCpltCallback+0x19c>)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4413      	add	r3, r2
 8005098:	889b      	ldrh	r3, [r3, #4]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	4623      	mov	r3, r4
 800509e:	4602      	mov	r2, r0
 80050a0:	4845      	ldr	r0, [pc, #276]	; (80051b8 <HAL_UART_RxCpltCallback+0x1a0>)
 80050a2:	f001 f895 	bl	80061d0 <iprintf>
			for(int pose=0;pose<pose_counter;pose++){
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3301      	adds	r3, #1
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4b3e      	ldr	r3, [pc, #248]	; (80051a8 <HAL_UART_RxCpltCallback+0x190>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d3d7      	bcc.n	8005066 <HAL_UART_RxCpltCallback+0x4e>
			}
		}
		HAL_TIM_Base_Start(&htim6);
 80050b6:	483b      	ldr	r0, [pc, #236]	; (80051a4 <HAL_UART_RxCpltCallback+0x18c>)
 80050b8:	f7fd fb9d 	bl	80027f6 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start_IT(&htim6);
 80050bc:	4839      	ldr	r0, [pc, #228]	; (80051a4 <HAL_UART_RxCpltCallback+0x18c>)
 80050be:	f7fd fbdf 	bl	8002880 <HAL_TIM_Base_Start_IT>
 80050c2:	e064      	b.n	800518e <HAL_UART_RxCpltCallback+0x176>
	}else if(uart_recieve!='\n' && (uart_recieve=='l'||uart_recieve=='L')){
 80050c4:	4b36      	ldr	r3, [pc, #216]	; (80051a0 <HAL_UART_RxCpltCallback+0x188>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b0a      	cmp	r3, #10
 80050ca:	d060      	beq.n	800518e <HAL_UART_RxCpltCallback+0x176>
 80050cc:	4b34      	ldr	r3, [pc, #208]	; (80051a0 <HAL_UART_RxCpltCallback+0x188>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b6c      	cmp	r3, #108	; 0x6c
 80050d2:	d003      	beq.n	80050dc <HAL_UART_RxCpltCallback+0xc4>
 80050d4:	4b32      	ldr	r3, [pc, #200]	; (80051a0 <HAL_UART_RxCpltCallback+0x188>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b4c      	cmp	r3, #76	; 0x4c
 80050da:	d158      	bne.n	800518e <HAL_UART_RxCpltCallback+0x176>

		HAL_UART_Receive(&huart2,&uart_data, sizeof(uart_data),50);
 80050dc:	2332      	movs	r3, #50	; 0x32
 80050de:	2202      	movs	r2, #2
 80050e0:	4936      	ldr	r1, [pc, #216]	; (80051bc <HAL_UART_RxCpltCallback+0x1a4>)
 80050e2:	4837      	ldr	r0, [pc, #220]	; (80051c0 <HAL_UART_RxCpltCallback+0x1a8>)
 80050e4:	f7fe fa37 	bl	8003556 <HAL_UART_Receive>

		pose_counter=uart_data;
 80050e8:	4b34      	ldr	r3, [pc, #208]	; (80051bc <HAL_UART_RxCpltCallback+0x1a4>)
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	4b2e      	ldr	r3, [pc, #184]	; (80051a8 <HAL_UART_RxCpltCallback+0x190>)
 80050f0:	601a      	str	r2, [r3, #0]
		pose_actual=0;//creo que esto sobra
 80050f2:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <HAL_UART_RxCpltCallback+0x1ac>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

		for(int data=0;data<pose_counter;data++){
 80050f8:	2300      	movs	r3, #0
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	e03b      	b.n	8005176 <HAL_UART_RxCpltCallback+0x15e>
			HAL_UART_Receive(&huart2,&uart_data, sizeof(uart_data),50);
 80050fe:	2332      	movs	r3, #50	; 0x32
 8005100:	2202      	movs	r2, #2
 8005102:	492e      	ldr	r1, [pc, #184]	; (80051bc <HAL_UART_RxCpltCallback+0x1a4>)
 8005104:	482e      	ldr	r0, [pc, #184]	; (80051c0 <HAL_UART_RxCpltCallback+0x1a8>)
 8005106:	f7fe fa26 	bl	8003556 <HAL_UART_Receive>
			posiciones.servo1[data]=uart_data;
 800510a:	4b2c      	ldr	r3, [pc, #176]	; (80051bc <HAL_UART_RxCpltCallback+0x1a4>)
 800510c:	8819      	ldrh	r1, [r3, #0]
 800510e:	4a29      	ldr	r2, [pc, #164]	; (80051b4 <HAL_UART_RxCpltCallback+0x19c>)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			HAL_UART_Receive(&huart2,&uart_data, sizeof(uart_data),50);
 8005116:	2332      	movs	r3, #50	; 0x32
 8005118:	2202      	movs	r2, #2
 800511a:	4928      	ldr	r1, [pc, #160]	; (80051bc <HAL_UART_RxCpltCallback+0x1a4>)
 800511c:	4828      	ldr	r0, [pc, #160]	; (80051c0 <HAL_UART_RxCpltCallback+0x1a8>)
 800511e:	f7fe fa1a 	bl	8003556 <HAL_UART_Receive>
			posiciones.servo2[data]=uart_data;
 8005122:	4b26      	ldr	r3, [pc, #152]	; (80051bc <HAL_UART_RxCpltCallback+0x1a4>)
 8005124:	8819      	ldrh	r1, [r3, #0]
 8005126:	4a23      	ldr	r2, [pc, #140]	; (80051b4 <HAL_UART_RxCpltCallback+0x19c>)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	33f8      	adds	r3, #248	; 0xf8
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	460a      	mov	r2, r1
 8005132:	809a      	strh	r2, [r3, #4]
			HAL_UART_Receive(&huart2,&uart_data, sizeof(uart_data),50);
 8005134:	2332      	movs	r3, #50	; 0x32
 8005136:	2202      	movs	r2, #2
 8005138:	4920      	ldr	r1, [pc, #128]	; (80051bc <HAL_UART_RxCpltCallback+0x1a4>)
 800513a:	4821      	ldr	r0, [pc, #132]	; (80051c0 <HAL_UART_RxCpltCallback+0x1a8>)
 800513c:	f7fe fa0b 	bl	8003556 <HAL_UART_Receive>
			posiciones.servo3[data]=uart_data;
 8005140:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <HAL_UART_RxCpltCallback+0x1a4>)
 8005142:	8819      	ldrh	r1, [r3, #0]
 8005144:	4a1b      	ldr	r2, [pc, #108]	; (80051b4 <HAL_UART_RxCpltCallback+0x19c>)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800514c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			HAL_UART_Receive(&huart2,&uart_data, sizeof(uart_data),50);
 8005150:	2332      	movs	r3, #50	; 0x32
 8005152:	2202      	movs	r2, #2
 8005154:	4919      	ldr	r1, [pc, #100]	; (80051bc <HAL_UART_RxCpltCallback+0x1a4>)
 8005156:	481a      	ldr	r0, [pc, #104]	; (80051c0 <HAL_UART_RxCpltCallback+0x1a8>)
 8005158:	f7fe f9fd 	bl	8003556 <HAL_UART_Receive>
			posiciones.servo4[data]=uart_data;
 800515c:	4b17      	ldr	r3, [pc, #92]	; (80051bc <HAL_UART_RxCpltCallback+0x1a4>)
 800515e:	8819      	ldrh	r1, [r3, #0]
 8005160:	4a14      	ldr	r2, [pc, #80]	; (80051b4 <HAL_UART_RxCpltCallback+0x19c>)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	460a      	mov	r2, r1
 800516e:	809a      	strh	r2, [r3, #4]
		for(int data=0;data<pose_counter;data++){
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	3301      	adds	r3, #1
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <HAL_UART_RxCpltCallback+0x190>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d3be      	bcc.n	80050fe <HAL_UART_RxCpltCallback+0xe6>
		}
		syncr_status=0;
 8005180:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <HAL_UART_RxCpltCallback+0x1b0>)
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
		lcd_manager(0,8);
 8005186:	2108      	movs	r1, #8
 8005188:	2000      	movs	r0, #0
 800518a:	f7ff fddd 	bl	8004d48 <lcd_manager>


	}

	HAL_UART_Receive_IT(&huart2, &uart_recieve, sizeof(uint8_t));
 800518e:	2201      	movs	r2, #1
 8005190:	4903      	ldr	r1, [pc, #12]	; (80051a0 <HAL_UART_RxCpltCallback+0x188>)
 8005192:	480b      	ldr	r0, [pc, #44]	; (80051c0 <HAL_UART_RxCpltCallback+0x1a8>)
 8005194:	f7fe fa85 	bl	80036a2 <HAL_UART_Receive_IT>

}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	bd90      	pop	{r4, r7, pc}
 80051a0:	200000b8 	.word	0x200000b8
 80051a4:	20000a0c 	.word	0x20000a0c
 80051a8:	200000b0 	.word	0x200000b0
 80051ac:	08007498 	.word	0x08007498
 80051b0:	20000990 	.word	0x20000990
 80051b4:	2000016c 	.word	0x2000016c
 80051b8:	080074a0 	.word	0x080074a0
 80051bc:	200000ba 	.word	0x200000ba
 80051c0:	20000afc 	.word	0x20000afc
 80051c4:	200000b4 	.word	0x200000b4
 80051c8:	200000bc 	.word	0x200000bc

080051cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80051d0:	bf00      	nop
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <HAL_MspInit+0x5c>)
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	4a14      	ldr	r2, [pc, #80]	; (8005234 <HAL_MspInit+0x5c>)
 80051e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051e8:	6253      	str	r3, [r2, #36]	; 0x24
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <HAL_MspInit+0x5c>)
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f6:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <HAL_MspInit+0x5c>)
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	4a0e      	ldr	r2, [pc, #56]	; (8005234 <HAL_MspInit+0x5c>)
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	6213      	str	r3, [r2, #32]
 8005202:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <HAL_MspInit+0x5c>)
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	60bb      	str	r3, [r7, #8]
 800520c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <HAL_MspInit+0x5c>)
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	4a08      	ldr	r2, [pc, #32]	; (8005234 <HAL_MspInit+0x5c>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005218:	6253      	str	r3, [r2, #36]	; 0x24
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <HAL_MspInit+0x5c>)
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	607b      	str	r3, [r7, #4]
 8005224:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005226:	2007      	movs	r0, #7
 8005228:	f7fb fd32 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40023800 	.word	0x40023800

08005238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800523c:	bf00      	nop
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr

08005244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  lcd_manager(3, 0);
 8005248:	2100      	movs	r1, #0
 800524a:	2003      	movs	r0, #3
 800524c:	f7ff fd7c 	bl	8004d48 <lcd_manager>
 8005250:	e7fa      	b.n	8005248 <HardFault_Handler+0x4>

08005252 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005252:	b480      	push	{r7}
 8005254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005256:	e7fe      	b.n	8005256 <MemManage_Handler+0x4>

08005258 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800525c:	e7fe      	b.n	800525c <BusFault_Handler+0x4>

0800525e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800525e:	b480      	push	{r7}
 8005260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005262:	e7fe      	b.n	8005262 <UsageFault_Handler+0x4>

08005264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005268:	bf00      	nop
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005280:	bf00      	nop
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800528c:	f7fa ffc8 	bl	8000220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}

08005294 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005298:	b672      	cpsid	i
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	__disable_irq();
	//RESET POSES:
if(playing==0){
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <EXTI0_IRQHandler+0x48>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d115      	bne.n	80052ce <EXTI0_IRQHandler+0x3a>
	//reset posiciones y continua la toma de datos dma
	if(pose_counter>0){
 80052a2:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <EXTI0_IRQHandler+0x4c>)
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d011      	beq.n	80052ce <EXTI0_IRQHandler+0x3a>

		//lcd sincronismo al "syncr_status" ciclo
		syncr_status=0;
 80052aa:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <EXTI0_IRQHandler+0x50>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
		lcd_manager(0, 6);
 80052b0:	2106      	movs	r1, #6
 80052b2:	2000      	movs	r0, #0
 80052b4:	f7ff fd48 	bl	8004d48 <lcd_manager>

		reset_positions();
 80052b8:	f7ff fcd2 	bl	8004c60 <reset_positions>
		playing=0;
 80052bc:	4b07      	ldr	r3, [pc, #28]	; (80052dc <EXTI0_IRQHandler+0x48>)
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start(&htim7);
 80052c2:	4809      	ldr	r0, [pc, #36]	; (80052e8 <EXTI0_IRQHandler+0x54>)
 80052c4:	f7fd fa97 	bl	80027f6 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start_IT(&htim7);
 80052c8:	4807      	ldr	r0, [pc, #28]	; (80052e8 <EXTI0_IRQHandler+0x54>)
 80052ca:	f7fd fad9 	bl	8002880 <HAL_TIM_Base_Start_IT>
	}
}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80052ce:	2001      	movs	r0, #1
 80052d0:	f7fc f8d4 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  __ASM volatile ("cpsie i" : : : "memory");
 80052d4:	b662      	cpsie	i
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  __enable_irq();
  /* USER CODE END EXTI0_IRQn 1 */
}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000990 	.word	0x20000990
 80052e0:	200000b0 	.word	0x200000b0
 80052e4:	200000bc 	.word	0x200000bc
 80052e8:	20000ac0 	.word	0x20000ac0

080052ec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80052f0:	b672      	cpsid	i
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	__disable_irq();

	//START PLAY POSITIONS:
	if(playing == 0 && pose_counter > 0){
 80052f2:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <EXTI1_IRQHandler+0x44>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d113      	bne.n	8005322 <EXTI1_IRQHandler+0x36>
 80052fa:	4b0e      	ldr	r3, [pc, #56]	; (8005334 <EXTI1_IRQHandler+0x48>)
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00f      	beq.n	8005322 <EXTI1_IRQHandler+0x36>
		//lcd sincronismo al "syncr_status" ciclo
		lcd_manager(0, 1);
 8005302:	2101      	movs	r1, #1
 8005304:	2000      	movs	r0, #0
 8005306:	f7ff fd1f 	bl	8004d48 <lcd_manager>
		syncr_status=0;
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <EXTI1_IRQHandler+0x4c>)
 800530c:	2200      	movs	r2, #0
 800530e:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Stop(&htim7);
 8005310:	480a      	ldr	r0, [pc, #40]	; (800533c <EXTI1_IRQHandler+0x50>)
 8005312:	f7fd fa93 	bl	800283c <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim7);
 8005316:	4809      	ldr	r0, [pc, #36]	; (800533c <EXTI1_IRQHandler+0x50>)
 8005318:	f7fd fad5 	bl	80028c6 <HAL_TIM_Base_Stop_IT>
		playing=1;
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <EXTI1_IRQHandler+0x44>)
 800531e:	2201      	movs	r2, #1
 8005320:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005322:	2002      	movs	r0, #2
 8005324:	f7fc f8aa 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  __ASM volatile ("cpsie i" : : : "memory");
 8005328:	b662      	cpsie	i
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  __enable_irq();
  /* USER CODE END EXTI1_IRQn 1 */
}
 800532a:	bf00      	nop
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000990 	.word	0x20000990
 8005334:	200000b0 	.word	0x200000b0
 8005338:	200000bc 	.word	0x200000bc
 800533c:	20000ac0 	.word	0x20000ac0

08005340 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005344:	b672      	cpsid	i
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	__disable_irq();
	//STOP: positions without reset the pose_counter
	if(playing==1){
 8005346:	4b0d      	ldr	r3, [pc, #52]	; (800537c <EXTI2_IRQHandler+0x3c>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d10f      	bne.n	800536e <EXTI2_IRQHandler+0x2e>
		//lcd sincronismo al "syncr_status" ciclo
		lcd_manager(0, 3);
 800534e:	2103      	movs	r1, #3
 8005350:	2000      	movs	r0, #0
 8005352:	f7ff fcf9 	bl	8004d48 <lcd_manager>
		syncr_status=0;
 8005356:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <EXTI2_IRQHandler+0x40>)
 8005358:	2200      	movs	r2, #0
 800535a:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Start(&htim7);
 800535c:	4809      	ldr	r0, [pc, #36]	; (8005384 <EXTI2_IRQHandler+0x44>)
 800535e:	f7fd fa4a 	bl	80027f6 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start_IT(&htim7);
 8005362:	4808      	ldr	r0, [pc, #32]	; (8005384 <EXTI2_IRQHandler+0x44>)
 8005364:	f7fd fa8c 	bl	8002880 <HAL_TIM_Base_Start_IT>
		playing=0;
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <EXTI2_IRQHandler+0x3c>)
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800536e:	2004      	movs	r0, #4
 8005370:	f7fc f884 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  __ASM volatile ("cpsie i" : : : "memory");
 8005374:	b662      	cpsie	i
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  __enable_irq();
  /* USER CODE END EXTI2_IRQn 1 */
}
 8005376:	bf00      	nop
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000990 	.word	0x20000990
 8005380:	200000bc 	.word	0x200000bc
 8005384:	20000ac0 	.word	0x20000ac0

08005388 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800538c:	4802      	ldr	r0, [pc, #8]	; (8005398 <DMA1_Channel1_IRQHandler+0x10>)
 800538e:	f7fb fdd6 	bl	8000f3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005392:	bf00      	nop
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	200000d4 	.word	0x200000d4

0800539c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	//LASER LED
	if(debouncer==0){
 80053a0:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <EXTI9_5_IRQHandler+0x28>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d107      	bne.n	80053b8 <EXTI9_5_IRQHandler+0x1c>
		debouncer=1;
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <EXTI9_5_IRQHandler+0x28>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 80053ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053b2:	4805      	ldr	r0, [pc, #20]	; (80053c8 <EXTI9_5_IRQHandler+0x2c>)
 80053b4:	f7fc f848 	bl	8001448 <HAL_GPIO_TogglePin>
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80053b8:	2080      	movs	r0, #128	; 0x80
 80053ba:	f7fc f85f 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000991 	.word	0x20000991
 80053c8:	40020000 	.word	0x40020000

080053cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80053d0:	4802      	ldr	r0, [pc, #8]	; (80053dc <USART2_IRQHandler+0x10>)
 80053d2:	f7fe f9bb 	bl	800374c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000afc 	.word	0x20000afc

080053e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  //SAVE POSE
if(playing==0){
 80053e6:	4b2e      	ldr	r3, [pc, #184]	; (80054a0 <EXTI15_10_IRQHandler+0xc0>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d150      	bne.n	8005490 <EXTI15_10_IRQHandler+0xb0>
	if(debouncer==0){
 80053ee:	4b2d      	ldr	r3, [pc, #180]	; (80054a4 <EXTI15_10_IRQHandler+0xc4>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d14c      	bne.n	8005490 <EXTI15_10_IRQHandler+0xb0>
		if(pose_counter < MAX_POSES){
 80053f6:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <EXTI15_10_IRQHandler+0xc8>)
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	2bf9      	cmp	r3, #249	; 0xf9
 80053fc:	d841      	bhi.n	8005482 <EXTI15_10_IRQHandler+0xa2>
			for(int i = 0; i<4;i++){
 80053fe:	2300      	movs	r3, #0
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	e02d      	b.n	8005460 <EXTI15_10_IRQHandler+0x80>
				posiciones.servo1[pose_counter]= TIM2->CCR1;
 8005404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005408:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800540a:	4b27      	ldr	r3, [pc, #156]	; (80054a8 <EXTI15_10_IRQHandler+0xc8>)
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	b289      	uxth	r1, r1
 8005412:	4b26      	ldr	r3, [pc, #152]	; (80054ac <EXTI15_10_IRQHandler+0xcc>)
 8005414:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				posiciones.servo2[pose_counter]= TIM3->CCR1;
 8005418:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <EXTI15_10_IRQHandler+0xd0>)
 800541a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800541c:	4b22      	ldr	r3, [pc, #136]	; (80054a8 <EXTI15_10_IRQHandler+0xc8>)
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	b291      	uxth	r1, r2
 8005422:	4a22      	ldr	r2, [pc, #136]	; (80054ac <EXTI15_10_IRQHandler+0xcc>)
 8005424:	33f8      	adds	r3, #248	; 0xf8
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	4413      	add	r3, r2
 800542a:	460a      	mov	r2, r1
 800542c:	809a      	strh	r2, [r3, #4]
				posiciones.servo3[pose_counter]= TIM4->CCR1;
 800542e:	4b21      	ldr	r3, [pc, #132]	; (80054b4 <EXTI15_10_IRQHandler+0xd4>)
 8005430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005432:	4b1d      	ldr	r3, [pc, #116]	; (80054a8 <EXTI15_10_IRQHandler+0xc8>)
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	b291      	uxth	r1, r2
 8005438:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <EXTI15_10_IRQHandler+0xcc>)
 800543a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800543e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				posiciones.servo4[pose_counter]= TIM9->CCR1;
 8005442:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <EXTI15_10_IRQHandler+0xd8>)
 8005444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005446:	4b18      	ldr	r3, [pc, #96]	; (80054a8 <EXTI15_10_IRQHandler+0xc8>)
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b291      	uxth	r1, r2
 800544c:	4a17      	ldr	r2, [pc, #92]	; (80054ac <EXTI15_10_IRQHandler+0xcc>)
 800544e:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	4413      	add	r3, r2
 8005456:	460a      	mov	r2, r1
 8005458:	809a      	strh	r2, [r3, #4]
			for(int i = 0; i<4;i++){
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3301      	adds	r3, #1
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b03      	cmp	r3, #3
 8005464:	ddce      	ble.n	8005404 <EXTI15_10_IRQHandler+0x24>
			}
			pose_counter++;
 8005466:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <EXTI15_10_IRQHandler+0xc8>)
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <EXTI15_10_IRQHandler+0xc8>)
 8005470:	801a      	strh	r2, [r3, #0]
			//lcd sincronismo al "syncr_status" ciclo
			lcd_manager(0, 2);
 8005472:	2102      	movs	r1, #2
 8005474:	2000      	movs	r0, #0
 8005476:	f7ff fc67 	bl	8004d48 <lcd_manager>
			syncr_status=0;
 800547a:	4b10      	ldr	r3, [pc, #64]	; (80054bc <EXTI15_10_IRQHandler+0xdc>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	e003      	b.n	800548a <EXTI15_10_IRQHandler+0xaa>

		}else {
			lcd_manager(3, 0);
 8005482:	2100      	movs	r1, #0
 8005484:	2003      	movs	r0, #3
 8005486:	f7ff fc5f 	bl	8004d48 <lcd_manager>
		}
		debouncer=1;
 800548a:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <EXTI15_10_IRQHandler+0xc4>)
 800548c:	2201      	movs	r2, #1
 800548e:	701a      	strb	r2, [r3, #0]
	}
}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005490:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005494:	f7fb fff2 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20000990 	.word	0x20000990
 80054a4:	20000991 	.word	0x20000991
 80054a8:	200000b0 	.word	0x200000b0
 80054ac:	2000016c 	.word	0x2000016c
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800
 80054b8:	40010800 	.word	0x40010800
 80054bc:	200000bc 	.word	0x200000bc

080054c0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	//lcd servo and mode manager call
	HAL_TIM_Base_Stop(&htim6);
 80054c4:	481f      	ldr	r0, [pc, #124]	; (8005544 <TIM6_IRQHandler+0x84>)
 80054c6:	f7fd f9b9 	bl	800283c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 80054ca:	481e      	ldr	r0, [pc, #120]	; (8005544 <TIM6_IRQHandler+0x84>)
 80054cc:	f7fd f9fb 	bl	80028c6 <HAL_TIM_Base_Stop_IT>
	//debido al delay del lcd si no hacemos cada x ciclos
	//no variamos el modo: stop modo: saved pose
	static uint8_t delay_syncr=4;


	if(playing == 0){
 80054d0:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <TIM6_IRQHandler+0x88>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d11e      	bne.n	8005516 <TIM6_IRQHandler+0x56>
		//modo 0 record (0)
		if(syncr_status<delay_syncr){
 80054d8:	4b1c      	ldr	r3, [pc, #112]	; (800554c <TIM6_IRQHandler+0x8c>)
 80054da:	781a      	ldrb	r2, [r3, #0]
 80054dc:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <TIM6_IRQHandler+0x90>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d206      	bcs.n	80054f2 <TIM6_IRQHandler+0x32>
			syncr_status++;
 80054e4:	4b19      	ldr	r3, [pc, #100]	; (800554c <TIM6_IRQHandler+0x8c>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	3301      	adds	r3, #1
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	4b17      	ldr	r3, [pc, #92]	; (800554c <TIM6_IRQHandler+0x8c>)
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	e00c      	b.n	800550c <TIM6_IRQHandler+0x4c>
		}else if(syncr_status==delay_syncr){
 80054f2:	4b16      	ldr	r3, [pc, #88]	; (800554c <TIM6_IRQHandler+0x8c>)
 80054f4:	781a      	ldrb	r2, [r3, #0]
 80054f6:	4b16      	ldr	r3, [pc, #88]	; (8005550 <TIM6_IRQHandler+0x90>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d106      	bne.n	800550c <TIM6_IRQHandler+0x4c>

			syncr_status=0;
 80054fe:	4b13      	ldr	r3, [pc, #76]	; (800554c <TIM6_IRQHandler+0x8c>)
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
			lcd_manager(0, 0);		//servo pose updating in lcd (0 have no meaning here)
 8005504:	2100      	movs	r1, #0
 8005506:	2000      	movs	r0, #0
 8005508:	f7ff fc1e 	bl	8004d48 <lcd_manager>

		}
		lcd_manager(1,0);
 800550c:	2100      	movs	r1, #0
 800550e:	2001      	movs	r0, #1
 8005510:	f7ff fc1a 	bl	8004d48 <lcd_manager>
 8005514:	e007      	b.n	8005526 <TIM6_IRQHandler+0x66>
	}else if(playing == 1){
 8005516:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <TIM6_IRQHandler+0x88>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d103      	bne.n	8005526 <TIM6_IRQHandler+0x66>

		//servo pose updating in lcd (0 have no meaning here)
		lcd_manager(1,0);
 800551e:	2100      	movs	r1, #0
 8005520:	2001      	movs	r0, #1
 8005522:	f7ff fc11 	bl	8004d48 <lcd_manager>
	}
	HAL_TIM_Base_Start(&htim6);
 8005526:	4807      	ldr	r0, [pc, #28]	; (8005544 <TIM6_IRQHandler+0x84>)
 8005528:	f7fd f965 	bl	80027f6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 800552c:	4805      	ldr	r0, [pc, #20]	; (8005544 <TIM6_IRQHandler+0x84>)
 800552e:	f7fd f9a7 	bl	8002880 <HAL_TIM_Base_Start_IT>

	//debouncer reset (usado en el record BTM y laser led BTM)
	debouncer=0;
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <TIM6_IRQHandler+0x94>)
 8005534:	2200      	movs	r2, #0
 8005536:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005538:	4802      	ldr	r0, [pc, #8]	; (8005544 <TIM6_IRQHandler+0x84>)
 800553a:	f7fd fa3c 	bl	80029b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000a0c 	.word	0x20000a0c
 8005548:	20000990 	.word	0x20000990
 800554c:	200000bc 	.word	0x200000bc
 8005550:	20000008 	.word	0x20000008
 8005554:	20000991 	.word	0x20000991

08005558 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08e      	sub	sp, #56	; 0x38
 800555c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

//RECORDING POSE:
HAL_TIM_Base_Stop(&htim7);
 800555e:	4891      	ldr	r0, [pc, #580]	; (80057a4 <TIM7_IRQHandler+0x24c>)
 8005560:	f7fd f96c 	bl	800283c <HAL_TIM_Base_Stop>
HAL_TIM_Base_Stop_IT(&htim7);
 8005564:	488f      	ldr	r0, [pc, #572]	; (80057a4 <TIM7_IRQHandler+0x24c>)
 8005566:	f7fd f9ae 	bl	80028c6 <HAL_TIM_Base_Stop_IT>
	//comparamos los valores de last_dma con dma en cada servo

if(playing==0){
 800556a:	4b8f      	ldr	r3, [pc, #572]	; (80057a8 <TIM7_IRQHandler+0x250>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 8110 	bne.w	8005794 <TIM7_IRQHandler+0x23c>
	for(int i=0; i< NUM_SERVOS; i++){
 8005574:	2300      	movs	r3, #0
 8005576:	637b      	str	r3, [r7, #52]	; 0x34
 8005578:	e102      	b.n	8005780 <TIM7_IRQHandler+0x228>
		//variables para evitar desbordamiento en la resta (threshold)
		int value = get_dma_value_norm(i);
 800557a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800557c:	f7ff fbc2 	bl	8004d04 <get_dma_value_norm>
 8005580:	6138      	str	r0, [r7, #16]
		int lastvalue = adc_to_dma_lastvalues[i];
 8005582:	4a8a      	ldr	r2, [pc, #552]	; (80057ac <TIM7_IRQHandler+0x254>)
 8005584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800558a:	60fb      	str	r3, [r7, #12]

		//(avoid freezing) por si cambia el dma durante el movimiento

		int valor= get_dma_value_norm(i);
 800558c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800558e:	f7ff fbb9 	bl	8004d04 <get_dma_value_norm>
 8005592:	60b8      	str	r0, [r7, #8]

		//si la diferencia absoluta last dma y dma que el THRESHOLD_POT

		if(abs(value-lastvalue) > THRESHOLD_POT){
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	bfb8      	it	lt
 800559e:	425b      	neglt	r3, r3
 80055a0:	2b32      	cmp	r3, #50	; 0x32
 80055a2:	f340 80e7 	ble.w	8005774 <TIM7_IRQHandler+0x21c>

			//como ha cambiado:
			//adc_to_dma_values copiamos para la siguiente iteracion de comprobaciones
			adc_to_dma_lastvalues[i]=adc_to_dma_values[i];
 80055a6:	4a82      	ldr	r2, [pc, #520]	; (80057b0 <TIM7_IRQHandler+0x258>)
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80055ae:	497f      	ldr	r1, [pc, #508]	; (80057ac <TIM7_IRQHandler+0x254>)
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			uint8_t pose_ok=0;//flag de si ha terminado el movimineto
 80055b6:	2300      	movs	r3, #0
 80055b8:	71fb      	strb	r3, [r7, #7]
				switch(i){
 80055ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055bc:	2b03      	cmp	r3, #3
 80055be:	f200 80db 	bhi.w	8005778 <TIM7_IRQHandler+0x220>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <TIM7_IRQHandler+0x70>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	08005641 	.word	0x08005641
 80055cc:	080056a5 	.word	0x080056a5
 80055d0:	08005709 	.word	0x08005709
 80055d4:	0800576d 	.word	0x0800576d
				case 0:
					while(pose_ok==0){
						if(TIM2->CCR1<valor){
 80055d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d211      	bcs.n	8005608 <TIM7_IRQHandler+0xb0>
							TIM2->CCR1=TIM2->CCR1+1;
 80055e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055ee:	3301      	adds	r3, #1
 80055f0:	6353      	str	r3, [r2, #52]	; 0x34
							for(int time=0; time<DELAY_PASO_ADC; time++){}
 80055f2:	2300      	movs	r3, #0
 80055f4:	633b      	str	r3, [r7, #48]	; 0x30
 80055f6:	e002      	b.n	80055fe <TIM7_IRQHandler+0xa6>
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	3301      	adds	r3, #1
 80055fc:	633b      	str	r3, [r7, #48]	; 0x30
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005604:	dbf8      	blt.n	80055f8 <TIM7_IRQHandler+0xa0>
 8005606:	e01b      	b.n	8005640 <TIM7_IRQHandler+0xe8>
						}else if(TIM2->CCR1>valor){
 8005608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800560c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	429a      	cmp	r2, r3
 8005612:	d911      	bls.n	8005638 <TIM7_IRQHandler+0xe0>
							TIM2->CCR1=TIM2->CCR1-1;
 8005614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800561e:	3b01      	subs	r3, #1
 8005620:	6353      	str	r3, [r2, #52]	; 0x34
							for(int time=0; time<DELAY_PASO_ADC; time++){}
 8005622:	2300      	movs	r3, #0
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005626:	e002      	b.n	800562e <TIM7_IRQHandler+0xd6>
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	3301      	adds	r3, #1
 800562c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005634:	dbf8      	blt.n	8005628 <TIM7_IRQHandler+0xd0>
 8005636:	e003      	b.n	8005640 <TIM7_IRQHandler+0xe8>
						}else{
							pose_ok=1;
 8005638:	2301      	movs	r3, #1
 800563a:	71fb      	strb	r3, [r7, #7]
							break;
 800563c:	bf00      	nop
						}
					}
					break;
 800563e:	e09c      	b.n	800577a <TIM7_IRQHandler+0x222>
					while(pose_ok==0){
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0c8      	beq.n	80055d8 <TIM7_IRQHandler+0x80>
					break;
 8005646:	e098      	b.n	800577a <TIM7_IRQHandler+0x222>
				case 1:
					while(pose_ok==0){
						if(TIM3->CCR1<valor){
 8005648:	4b5a      	ldr	r3, [pc, #360]	; (80057b4 <TIM7_IRQHandler+0x25c>)
 800564a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	429a      	cmp	r2, r3
 8005650:	d20f      	bcs.n	8005672 <TIM7_IRQHandler+0x11a>
							TIM3->CCR1=TIM3->CCR1+1;
 8005652:	4b58      	ldr	r3, [pc, #352]	; (80057b4 <TIM7_IRQHandler+0x25c>)
 8005654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005656:	4a57      	ldr	r2, [pc, #348]	; (80057b4 <TIM7_IRQHandler+0x25c>)
 8005658:	3301      	adds	r3, #1
 800565a:	6353      	str	r3, [r2, #52]	; 0x34
							for(int time=0; time<DELAY_PASO_ADC; time++){}
 800565c:	2300      	movs	r3, #0
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005660:	e002      	b.n	8005668 <TIM7_IRQHandler+0x110>
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	3301      	adds	r3, #1
 8005666:	62bb      	str	r3, [r7, #40]	; 0x28
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800566e:	dbf8      	blt.n	8005662 <TIM7_IRQHandler+0x10a>
 8005670:	e018      	b.n	80056a4 <TIM7_IRQHandler+0x14c>
						}else if(TIM3->CCR1>valor){
 8005672:	4b50      	ldr	r3, [pc, #320]	; (80057b4 <TIM7_IRQHandler+0x25c>)
 8005674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	429a      	cmp	r2, r3
 800567a:	d90f      	bls.n	800569c <TIM7_IRQHandler+0x144>
							TIM3->CCR1=TIM3->CCR1-1;
 800567c:	4b4d      	ldr	r3, [pc, #308]	; (80057b4 <TIM7_IRQHandler+0x25c>)
 800567e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005680:	4a4c      	ldr	r2, [pc, #304]	; (80057b4 <TIM7_IRQHandler+0x25c>)
 8005682:	3b01      	subs	r3, #1
 8005684:	6353      	str	r3, [r2, #52]	; 0x34
							for(int time=0; time<DELAY_PASO_ADC; time++){}
 8005686:	2300      	movs	r3, #0
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
 800568a:	e002      	b.n	8005692 <TIM7_IRQHandler+0x13a>
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	3301      	adds	r3, #1
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005698:	dbf8      	blt.n	800568c <TIM7_IRQHandler+0x134>
 800569a:	e003      	b.n	80056a4 <TIM7_IRQHandler+0x14c>
						}else{
							pose_ok=1;
 800569c:	2301      	movs	r3, #1
 800569e:	71fb      	strb	r3, [r7, #7]
							break;
 80056a0:	bf00      	nop
						}
					}
					break;
 80056a2:	e06a      	b.n	800577a <TIM7_IRQHandler+0x222>
					while(pose_ok==0){
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0ce      	beq.n	8005648 <TIM7_IRQHandler+0xf0>
					break;
 80056aa:	e066      	b.n	800577a <TIM7_IRQHandler+0x222>
				case 2:
					while(pose_ok==0){
						if(TIM4->CCR1<valor){
 80056ac:	4b42      	ldr	r3, [pc, #264]	; (80057b8 <TIM7_IRQHandler+0x260>)
 80056ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d20f      	bcs.n	80056d6 <TIM7_IRQHandler+0x17e>
							TIM4->CCR1=TIM4->CCR1+1;
 80056b6:	4b40      	ldr	r3, [pc, #256]	; (80057b8 <TIM7_IRQHandler+0x260>)
 80056b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ba:	4a3f      	ldr	r2, [pc, #252]	; (80057b8 <TIM7_IRQHandler+0x260>)
 80056bc:	3301      	adds	r3, #1
 80056be:	6353      	str	r3, [r2, #52]	; 0x34
							for(int time=0; time<DELAY_PASO_ADC; time++){}
 80056c0:	2300      	movs	r3, #0
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	e002      	b.n	80056cc <TIM7_IRQHandler+0x174>
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	3301      	adds	r3, #1
 80056ca:	623b      	str	r3, [r7, #32]
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80056d2:	dbf8      	blt.n	80056c6 <TIM7_IRQHandler+0x16e>
 80056d4:	e018      	b.n	8005708 <TIM7_IRQHandler+0x1b0>
						}else if(TIM4->CCR1>valor){
 80056d6:	4b38      	ldr	r3, [pc, #224]	; (80057b8 <TIM7_IRQHandler+0x260>)
 80056d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d90f      	bls.n	8005700 <TIM7_IRQHandler+0x1a8>
							TIM4->CCR1=TIM4->CCR1-1;
 80056e0:	4b35      	ldr	r3, [pc, #212]	; (80057b8 <TIM7_IRQHandler+0x260>)
 80056e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e4:	4a34      	ldr	r2, [pc, #208]	; (80057b8 <TIM7_IRQHandler+0x260>)
 80056e6:	3b01      	subs	r3, #1
 80056e8:	6353      	str	r3, [r2, #52]	; 0x34
							for(int time=0; time<DELAY_PASO_ADC; time++){}
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	e002      	b.n	80056f6 <TIM7_IRQHandler+0x19e>
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	3301      	adds	r3, #1
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80056fc:	dbf8      	blt.n	80056f0 <TIM7_IRQHandler+0x198>
 80056fe:	e003      	b.n	8005708 <TIM7_IRQHandler+0x1b0>
						}else{
							pose_ok=1;
 8005700:	2301      	movs	r3, #1
 8005702:	71fb      	strb	r3, [r7, #7]
							break;
 8005704:	bf00      	nop
						}
					}
					break;
 8005706:	e038      	b.n	800577a <TIM7_IRQHandler+0x222>
					while(pose_ok==0){
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0ce      	beq.n	80056ac <TIM7_IRQHandler+0x154>
					break;
 800570e:	e034      	b.n	800577a <TIM7_IRQHandler+0x222>
				case 3:
					while(pose_ok==0){
						if(TIM9->CCR1<valor){
 8005710:	4b2a      	ldr	r3, [pc, #168]	; (80057bc <TIM7_IRQHandler+0x264>)
 8005712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	d20f      	bcs.n	800573a <TIM7_IRQHandler+0x1e2>
							TIM9->CCR1=TIM9->CCR1+1;
 800571a:	4b28      	ldr	r3, [pc, #160]	; (80057bc <TIM7_IRQHandler+0x264>)
 800571c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571e:	4a27      	ldr	r2, [pc, #156]	; (80057bc <TIM7_IRQHandler+0x264>)
 8005720:	3301      	adds	r3, #1
 8005722:	6353      	str	r3, [r2, #52]	; 0x34
							for(int time=0; time<DELAY_PASO_ADC; time++){}
 8005724:	2300      	movs	r3, #0
 8005726:	61bb      	str	r3, [r7, #24]
 8005728:	e002      	b.n	8005730 <TIM7_IRQHandler+0x1d8>
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	3301      	adds	r3, #1
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005736:	dbf8      	blt.n	800572a <TIM7_IRQHandler+0x1d2>
 8005738:	e018      	b.n	800576c <TIM7_IRQHandler+0x214>
						}else if(TIM9->CCR1>valor){
 800573a:	4b20      	ldr	r3, [pc, #128]	; (80057bc <TIM7_IRQHandler+0x264>)
 800573c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	429a      	cmp	r2, r3
 8005742:	d90f      	bls.n	8005764 <TIM7_IRQHandler+0x20c>
							TIM9->CCR1=TIM9->CCR1-1;
 8005744:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <TIM7_IRQHandler+0x264>)
 8005746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005748:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <TIM7_IRQHandler+0x264>)
 800574a:	3b01      	subs	r3, #1
 800574c:	6353      	str	r3, [r2, #52]	; 0x34
							for(int time=0; time<DELAY_PASO_ADC; time++){}
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	e002      	b.n	800575a <TIM7_IRQHandler+0x202>
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	3301      	adds	r3, #1
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005760:	dbf8      	blt.n	8005754 <TIM7_IRQHandler+0x1fc>
 8005762:	e003      	b.n	800576c <TIM7_IRQHandler+0x214>
						}else{
							pose_ok=1;
 8005764:	2301      	movs	r3, #1
 8005766:	71fb      	strb	r3, [r7, #7]
							break;
 8005768:	bf00      	nop
						}
					}
					break;
 800576a:	e006      	b.n	800577a <TIM7_IRQHandler+0x222>
					while(pose_ok==0){
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0ce      	beq.n	8005710 <TIM7_IRQHandler+0x1b8>
					break;
 8005772:	e002      	b.n	800577a <TIM7_IRQHandler+0x222>
				default:
					//error
					break;
				}
			}
 8005774:	bf00      	nop
 8005776:	e000      	b.n	800577a <TIM7_IRQHandler+0x222>
					break;
 8005778:	bf00      	nop
	for(int i=0; i< NUM_SERVOS; i++){
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	3301      	adds	r3, #1
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
 8005780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005782:	2b03      	cmp	r3, #3
 8005784:	f77f aef9 	ble.w	800557a <TIM7_IRQHandler+0x22>

	}

//lcd recording mode
HAL_TIM_Base_Start(&htim7);
 8005788:	4806      	ldr	r0, [pc, #24]	; (80057a4 <TIM7_IRQHandler+0x24c>)
 800578a:	f7fd f834 	bl	80027f6 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start_IT(&htim7);
 800578e:	4805      	ldr	r0, [pc, #20]	; (80057a4 <TIM7_IRQHandler+0x24c>)
 8005790:	f7fd f876 	bl	8002880 <HAL_TIM_Base_Start_IT>
}

	//memcpy(adc_to_dma_lastvalues,adc_to_dma_values, NUM_SERVOS*sizeof(uint32_t));

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005794:	4803      	ldr	r0, [pc, #12]	; (80057a4 <TIM7_IRQHandler+0x24c>)
 8005796:	f7fd f90e 	bl	80029b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */


  /* USER CODE END TIM7_IRQn 1 */
}
 800579a:	bf00      	nop
 800579c:	3738      	adds	r7, #56	; 0x38
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000ac0 	.word	0x20000ac0
 80057a8:	20000990 	.word	0x20000990
 80057ac:	200000a0 	.word	0x200000a0
 80057b0:	20000090 	.word	0x20000090
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800
 80057bc:	40010800 	.word	0x40010800

080057c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	e00a      	b.n	80057e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80057d2:	f7fe ffbf 	bl	8004754 <__io_getchar>
 80057d6:	4601      	mov	r1, r0
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	60ba      	str	r2, [r7, #8]
 80057de:	b2ca      	uxtb	r2, r1
 80057e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	3301      	adds	r3, #1
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	dbf0      	blt.n	80057d2 <_read+0x12>
	}

return len;
 80057f0:	687b      	ldr	r3, [r7, #4]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	e009      	b.n	8005820 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	60ba      	str	r2, [r7, #8]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f7fe ff8b 	bl	8004730 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	3301      	adds	r3, #1
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	dbf1      	blt.n	800580c <_write+0x12>
	}
	return len;
 8005828:	687b      	ldr	r3, [r7, #4]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <_close>:

int _close(int file)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
	return -1;
 800583a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005858:	605a      	str	r2, [r3, #4]
	return 0;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr

08005866 <_isatty>:

int _isatty(int file)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
	return 1;
 800586e:	2301      	movs	r3, #1
}
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
	return 0;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr
	...

08005894 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800589c:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <_sbrk+0x50>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <_sbrk+0x16>
		heap_end = &end;
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <_sbrk+0x50>)
 80058a6:	4a10      	ldr	r2, [pc, #64]	; (80058e8 <_sbrk+0x54>)
 80058a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80058aa:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <_sbrk+0x50>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <_sbrk+0x50>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4413      	add	r3, r2
 80058b8:	466a      	mov	r2, sp
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d907      	bls.n	80058ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80058be:	f000 fc55 	bl	800616c <__errno>
 80058c2:	4602      	mov	r2, r0
 80058c4:	230c      	movs	r3, #12
 80058c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058cc:	e006      	b.n	80058dc <_sbrk+0x48>
	}

	heap_end += incr;
 80058ce:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <_sbrk+0x50>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4413      	add	r3, r2
 80058d6:	4a03      	ldr	r2, [pc, #12]	; (80058e4 <_sbrk+0x50>)
 80058d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80058da:	68fb      	ldr	r3, [r7, #12]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	200000c4 	.word	0x200000c4
 80058e8:	20000b40 	.word	0x20000b40

080058ec <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80058f0:	4b15      	ldr	r3, [pc, #84]	; (8005948 <SystemInit+0x5c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a14      	ldr	r2, [pc, #80]	; (8005948 <SystemInit+0x5c>)
 80058f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fa:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80058fc:	4b12      	ldr	r3, [pc, #72]	; (8005948 <SystemInit+0x5c>)
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	4911      	ldr	r1, [pc, #68]	; (8005948 <SystemInit+0x5c>)
 8005902:	4b12      	ldr	r3, [pc, #72]	; (800594c <SystemInit+0x60>)
 8005904:	4013      	ands	r3, r2
 8005906:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <SystemInit+0x5c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a0e      	ldr	r2, [pc, #56]	; (8005948 <SystemInit+0x5c>)
 800590e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005912:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8005916:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <SystemInit+0x5c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a0a      	ldr	r2, [pc, #40]	; (8005948 <SystemInit+0x5c>)
 800591e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005922:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8005924:	4b08      	ldr	r3, [pc, #32]	; (8005948 <SystemInit+0x5c>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	4a07      	ldr	r2, [pc, #28]	; (8005948 <SystemInit+0x5c>)
 800592a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800592e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <SystemInit+0x5c>)
 8005932:	2200      	movs	r2, #0
 8005934:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <SystemInit+0x64>)
 8005938:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800593c:	609a      	str	r2, [r3, #8]
#endif
}
 800593e:	bf00      	nop
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40023800 	.word	0x40023800
 800594c:	88ffc00c 	.word	0x88ffc00c
 8005950:	e000ed00 	.word	0xe000ed00

08005954 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08a      	sub	sp, #40	; 0x28
 8005958:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800595a:	f107 0318 	add.w	r3, r7, #24
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	605a      	str	r2, [r3, #4]
 8005964:	609a      	str	r2, [r3, #8]
 8005966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005968:	f107 0310 	add.w	r3, r7, #16
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005972:	463b      	mov	r3, r7
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	609a      	str	r2, [r3, #8]
 800597c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800597e:	4b2d      	ldr	r3, [pc, #180]	; (8005a34 <MX_TIM2_Init+0xe0>)
 8005980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005984:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8005986:	4b2b      	ldr	r3, [pc, #172]	; (8005a34 <MX_TIM2_Init+0xe0>)
 8005988:	220a      	movs	r2, #10
 800598a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800598c:	4b29      	ldr	r3, [pc, #164]	; (8005a34 <MX_TIM2_Init+0xe0>)
 800598e:	2200      	movs	r2, #0
 8005990:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8005992:	4b28      	ldr	r3, [pc, #160]	; (8005a34 <MX_TIM2_Init+0xe0>)
 8005994:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005998:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800599a:	4b26      	ldr	r3, [pc, #152]	; (8005a34 <MX_TIM2_Init+0xe0>)
 800599c:	2200      	movs	r2, #0
 800599e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059a0:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <MX_TIM2_Init+0xe0>)
 80059a2:	2280      	movs	r2, #128	; 0x80
 80059a4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80059a6:	4823      	ldr	r0, [pc, #140]	; (8005a34 <MX_TIM2_Init+0xe0>)
 80059a8:	f7fc fefa 	bl	80027a0 <HAL_TIM_Base_Init>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80059b2:	f7ff fc0b 	bl	80051cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059ba:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80059bc:	f107 0318 	add.w	r3, r7, #24
 80059c0:	4619      	mov	r1, r3
 80059c2:	481c      	ldr	r0, [pc, #112]	; (8005a34 <MX_TIM2_Init+0xe0>)
 80059c4:	f7fd f99a 	bl	8002cfc <HAL_TIM_ConfigClockSource>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80059ce:	f7ff fbfd 	bl	80051cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80059d2:	4818      	ldr	r0, [pc, #96]	; (8005a34 <MX_TIM2_Init+0xe0>)
 80059d4:	f7fc ff99 	bl	800290a <HAL_TIM_PWM_Init>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80059de:	f7ff fbf5 	bl	80051cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059e2:	2300      	movs	r3, #0
 80059e4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80059ea:	f107 0310 	add.w	r3, r7, #16
 80059ee:	4619      	mov	r1, r3
 80059f0:	4810      	ldr	r0, [pc, #64]	; (8005a34 <MX_TIM2_Init+0xe0>)
 80059f2:	f7fd fc86 	bl	8003302 <HAL_TIMEx_MasterConfigSynchronization>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80059fc:	f7ff fbe6 	bl	80051cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a00:	2360      	movs	r3, #96	; 0x60
 8005a02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a10:	463b      	mov	r3, r7
 8005a12:	2200      	movs	r2, #0
 8005a14:	4619      	mov	r1, r3
 8005a16:	4807      	ldr	r0, [pc, #28]	; (8005a34 <MX_TIM2_Init+0xe0>)
 8005a18:	f7fd f8aa 	bl	8002b70 <HAL_TIM_PWM_ConfigChannel>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8005a22:	f7ff fbd3 	bl	80051cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005a26:	4803      	ldr	r0, [pc, #12]	; (8005a34 <MX_TIM2_Init+0xe0>)
 8005a28:	f000 fa5e 	bl	8005ee8 <HAL_TIM_MspPostInit>

}
 8005a2c:	bf00      	nop
 8005a2e:	3728      	adds	r7, #40	; 0x28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20000a84 	.word	0x20000a84

08005a38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	; 0x28
 8005a3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a3e:	f107 0318 	add.w	r3, r7, #24
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	605a      	str	r2, [r3, #4]
 8005a48:	609a      	str	r2, [r3, #8]
 8005a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a4c:	f107 0310 	add.w	r3, r7, #16
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a56:	463b      	mov	r3, r7
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	605a      	str	r2, [r3, #4]
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8005a62:	4b2d      	ldr	r3, [pc, #180]	; (8005b18 <MX_TIM3_Init+0xe0>)
 8005a64:	4a2d      	ldr	r2, [pc, #180]	; (8005b1c <MX_TIM3_Init+0xe4>)
 8005a66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8005a68:	4b2b      	ldr	r3, [pc, #172]	; (8005b18 <MX_TIM3_Init+0xe0>)
 8005a6a:	220a      	movs	r2, #10
 8005a6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a6e:	4b2a      	ldr	r3, [pc, #168]	; (8005b18 <MX_TIM3_Init+0xe0>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8005a74:	4b28      	ldr	r3, [pc, #160]	; (8005b18 <MX_TIM3_Init+0xe0>)
 8005a76:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005a7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a7c:	4b26      	ldr	r3, [pc, #152]	; (8005b18 <MX_TIM3_Init+0xe0>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a82:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <MX_TIM3_Init+0xe0>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005a88:	4823      	ldr	r0, [pc, #140]	; (8005b18 <MX_TIM3_Init+0xe0>)
 8005a8a:	f7fc fe89 	bl	80027a0 <HAL_TIM_Base_Init>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8005a94:	f7ff fb9a 	bl	80051cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a9c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005a9e:	f107 0318 	add.w	r3, r7, #24
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	481c      	ldr	r0, [pc, #112]	; (8005b18 <MX_TIM3_Init+0xe0>)
 8005aa6:	f7fd f929 	bl	8002cfc <HAL_TIM_ConfigClockSource>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005ab0:	f7ff fb8c 	bl	80051cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005ab4:	4818      	ldr	r0, [pc, #96]	; (8005b18 <MX_TIM3_Init+0xe0>)
 8005ab6:	f7fc ff28 	bl	800290a <HAL_TIM_PWM_Init>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005ac0:	f7ff fb84 	bl	80051cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005acc:	f107 0310 	add.w	r3, r7, #16
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4811      	ldr	r0, [pc, #68]	; (8005b18 <MX_TIM3_Init+0xe0>)
 8005ad4:	f7fd fc15 	bl	8003302 <HAL_TIMEx_MasterConfigSynchronization>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8005ade:	f7ff fb75 	bl	80051cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ae2:	2360      	movs	r3, #96	; 0x60
 8005ae4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005af2:	463b      	mov	r3, r7
 8005af4:	2200      	movs	r2, #0
 8005af6:	4619      	mov	r1, r3
 8005af8:	4807      	ldr	r0, [pc, #28]	; (8005b18 <MX_TIM3_Init+0xe0>)
 8005afa:	f7fd f839 	bl	8002b70 <HAL_TIM_PWM_ConfigChannel>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8005b04:	f7ff fb62 	bl	80051cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005b08:	4803      	ldr	r0, [pc, #12]	; (8005b18 <MX_TIM3_Init+0xe0>)
 8005b0a:	f000 f9ed 	bl	8005ee8 <HAL_TIM_MspPostInit>

}
 8005b0e:	bf00      	nop
 8005b10:	3728      	adds	r7, #40	; 0x28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200009d0 	.word	0x200009d0
 8005b1c:	40000400 	.word	0x40000400

08005b20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	; 0x28
 8005b24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b26:	f107 0318 	add.w	r3, r7, #24
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	605a      	str	r2, [r3, #4]
 8005b30:	609a      	str	r2, [r3, #8]
 8005b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b34:	f107 0310 	add.w	r3, r7, #16
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b3e:	463b      	mov	r3, r7
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	605a      	str	r2, [r3, #4]
 8005b46:	609a      	str	r2, [r3, #8]
 8005b48:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 8005b4a:	4b2d      	ldr	r3, [pc, #180]	; (8005c00 <MX_TIM4_Init+0xe0>)
 8005b4c:	4a2d      	ldr	r2, [pc, #180]	; (8005c04 <MX_TIM4_Init+0xe4>)
 8005b4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8005b50:	4b2b      	ldr	r3, [pc, #172]	; (8005c00 <MX_TIM4_Init+0xe0>)
 8005b52:	220a      	movs	r2, #10
 8005b54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b56:	4b2a      	ldr	r3, [pc, #168]	; (8005c00 <MX_TIM4_Init+0xe0>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8005b5c:	4b28      	ldr	r3, [pc, #160]	; (8005c00 <MX_TIM4_Init+0xe0>)
 8005b5e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005b62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b64:	4b26      	ldr	r3, [pc, #152]	; (8005c00 <MX_TIM4_Init+0xe0>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b6a:	4b25      	ldr	r3, [pc, #148]	; (8005c00 <MX_TIM4_Init+0xe0>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005b70:	4823      	ldr	r0, [pc, #140]	; (8005c00 <MX_TIM4_Init+0xe0>)
 8005b72:	f7fc fe15 	bl	80027a0 <HAL_TIM_Base_Init>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8005b7c:	f7ff fb26 	bl	80051cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b84:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005b86:	f107 0318 	add.w	r3, r7, #24
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	481c      	ldr	r0, [pc, #112]	; (8005c00 <MX_TIM4_Init+0xe0>)
 8005b8e:	f7fd f8b5 	bl	8002cfc <HAL_TIM_ConfigClockSource>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8005b98:	f7ff fb18 	bl	80051cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005b9c:	4818      	ldr	r0, [pc, #96]	; (8005c00 <MX_TIM4_Init+0xe0>)
 8005b9e:	f7fc feb4 	bl	800290a <HAL_TIM_PWM_Init>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005ba8:	f7ff fb10 	bl	80051cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bac:	2300      	movs	r3, #0
 8005bae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005bb4:	f107 0310 	add.w	r3, r7, #16
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4811      	ldr	r0, [pc, #68]	; (8005c00 <MX_TIM4_Init+0xe0>)
 8005bbc:	f7fd fba1 	bl	8003302 <HAL_TIMEx_MasterConfigSynchronization>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8005bc6:	f7ff fb01 	bl	80051cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005bca:	2360      	movs	r3, #96	; 0x60
 8005bcc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005bda:	463b      	mov	r3, r7
 8005bdc:	2200      	movs	r2, #0
 8005bde:	4619      	mov	r1, r3
 8005be0:	4807      	ldr	r0, [pc, #28]	; (8005c00 <MX_TIM4_Init+0xe0>)
 8005be2:	f7fc ffc5 	bl	8002b70 <HAL_TIM_PWM_ConfigChannel>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8005bec:	f7ff faee 	bl	80051cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8005bf0:	4803      	ldr	r0, [pc, #12]	; (8005c00 <MX_TIM4_Init+0xe0>)
 8005bf2:	f000 f979 	bl	8005ee8 <HAL_TIM_MspPostInit>

}
 8005bf6:	bf00      	nop
 8005bf8:	3728      	adds	r7, #40	; 0x28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000994 	.word	0x20000994
 8005c04:	40000800 	.word	0x40000800

08005c08 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c0e:	463b      	mov	r3, r7
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8005c16:	4b15      	ldr	r3, [pc, #84]	; (8005c6c <MX_TIM6_Init+0x64>)
 8005c18:	4a15      	ldr	r2, [pc, #84]	; (8005c70 <MX_TIM6_Init+0x68>)
 8005c1a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 196;
 8005c1c:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <MX_TIM6_Init+0x64>)
 8005c1e:	22c4      	movs	r2, #196	; 0xc4
 8005c20:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c22:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <MX_TIM6_Init+0x64>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65306;
 8005c28:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <MX_TIM6_Init+0x64>)
 8005c2a:	f64f 721a 	movw	r2, #65306	; 0xff1a
 8005c2e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c30:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <MX_TIM6_Init+0x64>)
 8005c32:	2280      	movs	r2, #128	; 0x80
 8005c34:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005c36:	480d      	ldr	r0, [pc, #52]	; (8005c6c <MX_TIM6_Init+0x64>)
 8005c38:	f7fc fdb2 	bl	80027a0 <HAL_TIM_Base_Init>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005c42:	f7ff fac3 	bl	80051cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005c46:	2320      	movs	r3, #32
 8005c48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005c4e:	463b      	mov	r3, r7
 8005c50:	4619      	mov	r1, r3
 8005c52:	4806      	ldr	r0, [pc, #24]	; (8005c6c <MX_TIM6_Init+0x64>)
 8005c54:	f7fd fb55 	bl	8003302 <HAL_TIMEx_MasterConfigSynchronization>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005c5e:	f7ff fab5 	bl	80051cc <Error_Handler>
  }

}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000a0c 	.word	0x20000a0c
 8005c70:	40001000 	.word	0x40001000

08005c74 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8005c82:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <MX_TIM7_Init+0x64>)
 8005c84:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <MX_TIM7_Init+0x68>)
 8005c86:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 123;
 8005c88:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <MX_TIM7_Init+0x64>)
 8005c8a:	227b      	movs	r2, #123	; 0x7b
 8005c8c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <MX_TIM7_Init+0x64>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65041;
 8005c94:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <MX_TIM7_Init+0x64>)
 8005c96:	f64f 6211 	movw	r2, #65041	; 0xfe11
 8005c9a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c9c:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <MX_TIM7_Init+0x64>)
 8005c9e:	2280      	movs	r2, #128	; 0x80
 8005ca0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005ca2:	480d      	ldr	r0, [pc, #52]	; (8005cd8 <MX_TIM7_Init+0x64>)
 8005ca4:	f7fc fd7c 	bl	80027a0 <HAL_TIM_Base_Init>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8005cae:	f7ff fa8d 	bl	80051cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005cb2:	2320      	movs	r3, #32
 8005cb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005cba:	463b      	mov	r3, r7
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4806      	ldr	r0, [pc, #24]	; (8005cd8 <MX_TIM7_Init+0x64>)
 8005cc0:	f7fd fb1f 	bl	8003302 <HAL_TIMEx_MasterConfigSynchronization>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005cca:	f7ff fa7f 	bl	80051cc <Error_Handler>
  }

}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000ac0 	.word	0x20000ac0
 8005cdc:	40001400 	.word	0x40001400

08005ce0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08a      	sub	sp, #40	; 0x28
 8005ce4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ce6:	f107 0318 	add.w	r3, r7, #24
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	605a      	str	r2, [r3, #4]
 8005cf0:	609a      	str	r2, [r3, #8]
 8005cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cf4:	f107 0310 	add.w	r3, r7, #16
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005cfe:	463b      	mov	r3, r7
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	609a      	str	r2, [r3, #8]
 8005d08:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8005d0a:	4b2d      	ldr	r3, [pc, #180]	; (8005dc0 <MX_TIM9_Init+0xe0>)
 8005d0c:	4a2d      	ldr	r2, [pc, #180]	; (8005dc4 <MX_TIM9_Init+0xe4>)
 8005d0e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10;
 8005d10:	4b2b      	ldr	r3, [pc, #172]	; (8005dc0 <MX_TIM9_Init+0xe0>)
 8005d12:	220a      	movs	r2, #10
 8005d14:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d16:	4b2a      	ldr	r3, [pc, #168]	; (8005dc0 <MX_TIM9_Init+0xe0>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 7000;
 8005d1c:	4b28      	ldr	r3, [pc, #160]	; (8005dc0 <MX_TIM9_Init+0xe0>)
 8005d1e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005d22:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d24:	4b26      	ldr	r3, [pc, #152]	; (8005dc0 <MX_TIM9_Init+0xe0>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d2a:	4b25      	ldr	r3, [pc, #148]	; (8005dc0 <MX_TIM9_Init+0xe0>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005d30:	4823      	ldr	r0, [pc, #140]	; (8005dc0 <MX_TIM9_Init+0xe0>)
 8005d32:	f7fc fd35 	bl	80027a0 <HAL_TIM_Base_Init>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8005d3c:	f7ff fa46 	bl	80051cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d44:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005d46:	f107 0318 	add.w	r3, r7, #24
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	481c      	ldr	r0, [pc, #112]	; (8005dc0 <MX_TIM9_Init+0xe0>)
 8005d4e:	f7fc ffd5 	bl	8002cfc <HAL_TIM_ConfigClockSource>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <MX_TIM9_Init+0x7c>
  {
    Error_Handler();
 8005d58:	f7ff fa38 	bl	80051cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8005d5c:	4818      	ldr	r0, [pc, #96]	; (8005dc0 <MX_TIM9_Init+0xe0>)
 8005d5e:	f7fc fdd4 	bl	800290a <HAL_TIM_PWM_Init>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8005d68:	f7ff fa30 	bl	80051cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8005d74:	f107 0310 	add.w	r3, r7, #16
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4811      	ldr	r0, [pc, #68]	; (8005dc0 <MX_TIM9_Init+0xe0>)
 8005d7c:	f7fd fac1 	bl	8003302 <HAL_TIMEx_MasterConfigSynchronization>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <MX_TIM9_Init+0xaa>
  {
    Error_Handler();
 8005d86:	f7ff fa21 	bl	80051cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d8a:	2360      	movs	r3, #96	; 0x60
 8005d8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4807      	ldr	r0, [pc, #28]	; (8005dc0 <MX_TIM9_Init+0xe0>)
 8005da2:	f7fc fee5 	bl	8002b70 <HAL_TIM_PWM_ConfigChannel>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <MX_TIM9_Init+0xd0>
  {
    Error_Handler();
 8005dac:	f7ff fa0e 	bl	80051cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8005db0:	4803      	ldr	r0, [pc, #12]	; (8005dc0 <MX_TIM9_Init+0xe0>)
 8005db2:	f000 f899 	bl	8005ee8 <HAL_TIM_MspPostInit>

}
 8005db6:	bf00      	nop
 8005db8:	3728      	adds	r7, #40	; 0x28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000a48 	.word	0x20000a48
 8005dc4:	40010800 	.word	0x40010800

08005dc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b088      	sub	sp, #32
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd8:	d10c      	bne.n	8005df4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005dda:	4b3d      	ldr	r3, [pc, #244]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	4a3c      	ldr	r2, [pc, #240]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	6253      	str	r3, [r2, #36]	; 0x24
 8005de6:	4b3a      	ldr	r3, [pc, #232]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8005df2:	e068      	b.n	8005ec6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM3)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a36      	ldr	r2, [pc, #216]	; (8005ed4 <HAL_TIM_Base_MspInit+0x10c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10c      	bne.n	8005e18 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005dfe:	4b34      	ldr	r3, [pc, #208]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	4a33      	ldr	r2, [pc, #204]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005e04:	f043 0302 	orr.w	r3, r3, #2
 8005e08:	6253      	str	r3, [r2, #36]	; 0x24
 8005e0a:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	69bb      	ldr	r3, [r7, #24]
}
 8005e16:	e056      	b.n	8005ec6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM4)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a2e      	ldr	r2, [pc, #184]	; (8005ed8 <HAL_TIM_Base_MspInit+0x110>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d10c      	bne.n	8005e3c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005e22:	4b2b      	ldr	r3, [pc, #172]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	4a2a      	ldr	r2, [pc, #168]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005e28:	f043 0304 	orr.w	r3, r3, #4
 8005e2c:	6253      	str	r3, [r2, #36]	; 0x24
 8005e2e:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	697b      	ldr	r3, [r7, #20]
}
 8005e3a:	e044      	b.n	8005ec6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM6)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a26      	ldr	r2, [pc, #152]	; (8005edc <HAL_TIM_Base_MspInit+0x114>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d114      	bne.n	8005e70 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005e46:	4b22      	ldr	r3, [pc, #136]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	4a21      	ldr	r2, [pc, #132]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005e4c:	f043 0310 	orr.w	r3, r3, #16
 8005e50:	6253      	str	r3, [r2, #36]	; 0x24
 8005e52:	4b1f      	ldr	r3, [pc, #124]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	f003 0310 	and.w	r3, r3, #16
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2100      	movs	r1, #0
 8005e62:	202b      	movs	r0, #43	; 0x2b
 8005e64:	f7fa ff1f 	bl	8000ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005e68:	202b      	movs	r0, #43	; 0x2b
 8005e6a:	f7fa ff38 	bl	8000cde <HAL_NVIC_EnableIRQ>
}
 8005e6e:	e02a      	b.n	8005ec6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM7)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <HAL_TIM_Base_MspInit+0x118>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d114      	bne.n	8005ea4 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005e7a:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	4a14      	ldr	r2, [pc, #80]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005e80:	f043 0320 	orr.w	r3, r3, #32
 8005e84:	6253      	str	r3, [r2, #36]	; 0x24
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005e92:	2200      	movs	r2, #0
 8005e94:	2100      	movs	r1, #0
 8005e96:	202c      	movs	r0, #44	; 0x2c
 8005e98:	f7fa ff05 	bl	8000ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005e9c:	202c      	movs	r0, #44	; 0x2c
 8005e9e:	f7fa ff1e 	bl	8000cde <HAL_NVIC_EnableIRQ>
}
 8005ea2:	e010      	b.n	8005ec6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM9)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a0e      	ldr	r2, [pc, #56]	; (8005ee4 <HAL_TIM_Base_MspInit+0x11c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10b      	bne.n	8005ec6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005eae:	4b08      	ldr	r3, [pc, #32]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	4a07      	ldr	r2, [pc, #28]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005eb4:	f043 0304 	orr.w	r3, r3, #4
 8005eb8:	6213      	str	r3, [r2, #32]
 8005eba:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <HAL_TIM_Base_MspInit+0x108>)
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	60bb      	str	r3, [r7, #8]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
}
 8005ec6:	bf00      	nop
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40001000 	.word	0x40001000
 8005ee0:	40001400 	.word	0x40001400
 8005ee4:	40010800 	.word	0x40010800

08005ee8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08c      	sub	sp, #48	; 0x30
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef0:	f107 031c 	add.w	r3, r7, #28
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	605a      	str	r2, [r3, #4]
 8005efa:	609a      	str	r2, [r3, #8]
 8005efc:	60da      	str	r2, [r3, #12]
 8005efe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f08:	d11d      	bne.n	8005f46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f0a:	4b44      	ldr	r3, [pc, #272]	; (800601c <HAL_TIM_MspPostInit+0x134>)
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	4a43      	ldr	r2, [pc, #268]	; (800601c <HAL_TIM_MspPostInit+0x134>)
 8005f10:	f043 0301 	orr.w	r3, r3, #1
 8005f14:	61d3      	str	r3, [r2, #28]
 8005f16:	4b41      	ldr	r3, [pc, #260]	; (800601c <HAL_TIM_MspPostInit+0x134>)
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = SERVO1_Pin;
 8005f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f30:	2300      	movs	r3, #0
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f34:	2301      	movs	r3, #1
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_GPIO_Port, &GPIO_InitStruct);
 8005f38:	f107 031c 	add.w	r3, r7, #28
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4838      	ldr	r0, [pc, #224]	; (8006020 <HAL_TIM_MspPostInit+0x138>)
 8005f40:	f7fb f8dc 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8005f44:	e065      	b.n	8006012 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM3)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a36      	ldr	r2, [pc, #216]	; (8006024 <HAL_TIM_MspPostInit+0x13c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d11c      	bne.n	8005f8a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f50:	4b32      	ldr	r3, [pc, #200]	; (800601c <HAL_TIM_MspPostInit+0x134>)
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	4a31      	ldr	r2, [pc, #196]	; (800601c <HAL_TIM_MspPostInit+0x134>)
 8005f56:	f043 0301 	orr.w	r3, r3, #1
 8005f5a:	61d3      	str	r3, [r2, #28]
 8005f5c:	4b2f      	ldr	r3, [pc, #188]	; (800601c <HAL_TIM_MspPostInit+0x134>)
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO2_Pin;
 8005f68:	2340      	movs	r3, #64	; 0x40
 8005f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f70:	2301      	movs	r3, #1
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f74:	2300      	movs	r3, #0
 8005f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8005f7c:	f107 031c 	add.w	r3, r7, #28
 8005f80:	4619      	mov	r1, r3
 8005f82:	4827      	ldr	r0, [pc, #156]	; (8006020 <HAL_TIM_MspPostInit+0x138>)
 8005f84:	f7fb f8ba 	bl	80010fc <HAL_GPIO_Init>
}
 8005f88:	e043      	b.n	8006012 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM4)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a26      	ldr	r2, [pc, #152]	; (8006028 <HAL_TIM_MspPostInit+0x140>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d11c      	bne.n	8005fce <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f94:	4b21      	ldr	r3, [pc, #132]	; (800601c <HAL_TIM_MspPostInit+0x134>)
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	4a20      	ldr	r2, [pc, #128]	; (800601c <HAL_TIM_MspPostInit+0x134>)
 8005f9a:	f043 0302 	orr.w	r3, r3, #2
 8005f9e:	61d3      	str	r3, [r2, #28]
 8005fa0:	4b1e      	ldr	r3, [pc, #120]	; (800601c <HAL_TIM_MspPostInit+0x134>)
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO3_Pin;
 8005fac:	2340      	movs	r3, #64	; 0x40
 8005fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO3_GPIO_Port, &GPIO_InitStruct);
 8005fc0:	f107 031c 	add.w	r3, r7, #28
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4819      	ldr	r0, [pc, #100]	; (800602c <HAL_TIM_MspPostInit+0x144>)
 8005fc8:	f7fb f898 	bl	80010fc <HAL_GPIO_Init>
}
 8005fcc:	e021      	b.n	8006012 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM9)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a17      	ldr	r2, [pc, #92]	; (8006030 <HAL_TIM_MspPostInit+0x148>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d11c      	bne.n	8006012 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fd8:	4b10      	ldr	r3, [pc, #64]	; (800601c <HAL_TIM_MspPostInit+0x134>)
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	4a0f      	ldr	r2, [pc, #60]	; (800601c <HAL_TIM_MspPostInit+0x134>)
 8005fde:	f043 0302 	orr.w	r3, r3, #2
 8005fe2:	61d3      	str	r3, [r2, #28]
 8005fe4:	4b0d      	ldr	r3, [pc, #52]	; (800601c <HAL_TIM_MspPostInit+0x134>)
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO4_Pin;
 8005ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ffe:	2300      	movs	r3, #0
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8006002:	2303      	movs	r3, #3
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO4_GPIO_Port, &GPIO_InitStruct);
 8006006:	f107 031c 	add.w	r3, r7, #28
 800600a:	4619      	mov	r1, r3
 800600c:	4807      	ldr	r0, [pc, #28]	; (800602c <HAL_TIM_MspPostInit+0x144>)
 800600e:	f7fb f875 	bl	80010fc <HAL_GPIO_Init>
}
 8006012:	bf00      	nop
 8006014:	3730      	adds	r7, #48	; 0x30
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40023800 	.word	0x40023800
 8006020:	40020000 	.word	0x40020000
 8006024:	40000400 	.word	0x40000400
 8006028:	40000800 	.word	0x40000800
 800602c:	40020400 	.word	0x40020400
 8006030:	40010800 	.word	0x40010800

08006034 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006038:	4b11      	ldr	r3, [pc, #68]	; (8006080 <MX_USART2_UART_Init+0x4c>)
 800603a:	4a12      	ldr	r2, [pc, #72]	; (8006084 <MX_USART2_UART_Init+0x50>)
 800603c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800603e:	4b10      	ldr	r3, [pc, #64]	; (8006080 <MX_USART2_UART_Init+0x4c>)
 8006040:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8006044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006046:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <MX_USART2_UART_Init+0x4c>)
 8006048:	2200      	movs	r2, #0
 800604a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800604c:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <MX_USART2_UART_Init+0x4c>)
 800604e:	2200      	movs	r2, #0
 8006050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006052:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <MX_USART2_UART_Init+0x4c>)
 8006054:	2200      	movs	r2, #0
 8006056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006058:	4b09      	ldr	r3, [pc, #36]	; (8006080 <MX_USART2_UART_Init+0x4c>)
 800605a:	220c      	movs	r2, #12
 800605c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <MX_USART2_UART_Init+0x4c>)
 8006060:	2200      	movs	r2, #0
 8006062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <MX_USART2_UART_Init+0x4c>)
 8006066:	2200      	movs	r2, #0
 8006068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800606a:	4805      	ldr	r0, [pc, #20]	; (8006080 <MX_USART2_UART_Init+0x4c>)
 800606c:	f7fd f98d 	bl	800338a <HAL_UART_Init>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006076:	f7ff f8a9 	bl	80051cc <Error_Handler>
  }

}
 800607a:	bf00      	nop
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000afc 	.word	0x20000afc
 8006084:	40004400 	.word	0x40004400

08006088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	; 0x28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006090:	f107 0314 	add.w	r3, r7, #20
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1b      	ldr	r2, [pc, #108]	; (8006114 <HAL_UART_MspInit+0x8c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d12f      	bne.n	800610a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80060aa:	4b1b      	ldr	r3, [pc, #108]	; (8006118 <HAL_UART_MspInit+0x90>)
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	4a1a      	ldr	r2, [pc, #104]	; (8006118 <HAL_UART_MspInit+0x90>)
 80060b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b4:	6253      	str	r3, [r2, #36]	; 0x24
 80060b6:	4b18      	ldr	r3, [pc, #96]	; (8006118 <HAL_UART_MspInit+0x90>)
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <HAL_UART_MspInit+0x90>)
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	4a14      	ldr	r2, [pc, #80]	; (8006118 <HAL_UART_MspInit+0x90>)
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	61d3      	str	r3, [r2, #28]
 80060ce:	4b12      	ldr	r3, [pc, #72]	; (8006118 <HAL_UART_MspInit+0x90>)
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80060da:	230c      	movs	r3, #12
 80060dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060de:	2302      	movs	r3, #2
 80060e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80060e2:	2301      	movs	r3, #1
 80060e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060e6:	2303      	movs	r3, #3
 80060e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060ea:	2307      	movs	r3, #7
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060ee:	f107 0314 	add.w	r3, r7, #20
 80060f2:	4619      	mov	r1, r3
 80060f4:	4809      	ldr	r0, [pc, #36]	; (800611c <HAL_UART_MspInit+0x94>)
 80060f6:	f7fb f801 	bl	80010fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80060fa:	2200      	movs	r2, #0
 80060fc:	2100      	movs	r1, #0
 80060fe:	2026      	movs	r0, #38	; 0x26
 8006100:	f7fa fdd1 	bl	8000ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006104:	2026      	movs	r0, #38	; 0x26
 8006106:	f7fa fdea 	bl	8000cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800610a:	bf00      	nop
 800610c:	3728      	adds	r7, #40	; 0x28
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40004400 	.word	0x40004400
 8006118:	40023800 	.word	0x40023800
 800611c:	40020000 	.word	0x40020000

08006120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006120:	2100      	movs	r1, #0

  b LoopCopyDataInit
 8006122:	e003      	b.n	800612c <LoopCopyDataInit>

08006124 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006126:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006128:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800612a:	3104      	adds	r1, #4

0800612c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800612c:	480a      	ldr	r0, [pc, #40]	; (8006158 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800612e:	4b0b      	ldr	r3, [pc, #44]	; (800615c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006130:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006132:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006134:	d3f6      	bcc.n	8006124 <CopyDataInit>
  ldr r2, =_sbss
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006138:	e002      	b.n	8006140 <LoopFillZerobss>

0800613a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800613a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800613c:	f842 3b04 	str.w	r3, [r2], #4

08006140 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006140:	4b08      	ldr	r3, [pc, #32]	; (8006164 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006142:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006144:	d3f9      	bcc.n	800613a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006146:	f7ff fbd1 	bl	80058ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800614a:	f000 f815 	bl	8006178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800614e:	f7fe fb13 	bl	8004778 <main>
  bx lr
 8006152:	4770      	bx	lr
  ldr r3, =_sidata
 8006154:	08007574 	.word	0x08007574
  ldr r0, =_sdata
 8006158:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800615c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8006160:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8006164:	20000b40 	.word	0x20000b40

08006168 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006168:	e7fe      	b.n	8006168 <ADC1_IRQHandler>
	...

0800616c <__errno>:
 800616c:	4b01      	ldr	r3, [pc, #4]	; (8006174 <__errno+0x8>)
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20000010 	.word	0x20000010

08006178 <__libc_init_array>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	2500      	movs	r5, #0
 800617c:	4e0c      	ldr	r6, [pc, #48]	; (80061b0 <__libc_init_array+0x38>)
 800617e:	4c0d      	ldr	r4, [pc, #52]	; (80061b4 <__libc_init_array+0x3c>)
 8006180:	1ba4      	subs	r4, r4, r6
 8006182:	10a4      	asrs	r4, r4, #2
 8006184:	42a5      	cmp	r5, r4
 8006186:	d109      	bne.n	800619c <__libc_init_array+0x24>
 8006188:	f001 f8d4 	bl	8007334 <_init>
 800618c:	2500      	movs	r5, #0
 800618e:	4e0a      	ldr	r6, [pc, #40]	; (80061b8 <__libc_init_array+0x40>)
 8006190:	4c0a      	ldr	r4, [pc, #40]	; (80061bc <__libc_init_array+0x44>)
 8006192:	1ba4      	subs	r4, r4, r6
 8006194:	10a4      	asrs	r4, r4, #2
 8006196:	42a5      	cmp	r5, r4
 8006198:	d105      	bne.n	80061a6 <__libc_init_array+0x2e>
 800619a:	bd70      	pop	{r4, r5, r6, pc}
 800619c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061a0:	4798      	blx	r3
 80061a2:	3501      	adds	r5, #1
 80061a4:	e7ee      	b.n	8006184 <__libc_init_array+0xc>
 80061a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061aa:	4798      	blx	r3
 80061ac:	3501      	adds	r5, #1
 80061ae:	e7f2      	b.n	8006196 <__libc_init_array+0x1e>
 80061b0:	0800756c 	.word	0x0800756c
 80061b4:	0800756c 	.word	0x0800756c
 80061b8:	0800756c 	.word	0x0800756c
 80061bc:	08007570 	.word	0x08007570

080061c0 <memset>:
 80061c0:	4603      	mov	r3, r0
 80061c2:	4402      	add	r2, r0
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d100      	bne.n	80061ca <memset+0xa>
 80061c8:	4770      	bx	lr
 80061ca:	f803 1b01 	strb.w	r1, [r3], #1
 80061ce:	e7f9      	b.n	80061c4 <memset+0x4>

080061d0 <iprintf>:
 80061d0:	b40f      	push	{r0, r1, r2, r3}
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <iprintf+0x2c>)
 80061d4:	b513      	push	{r0, r1, r4, lr}
 80061d6:	681c      	ldr	r4, [r3, #0]
 80061d8:	b124      	cbz	r4, 80061e4 <iprintf+0x14>
 80061da:	69a3      	ldr	r3, [r4, #24]
 80061dc:	b913      	cbnz	r3, 80061e4 <iprintf+0x14>
 80061de:	4620      	mov	r0, r4
 80061e0:	f000 f86e 	bl	80062c0 <__sinit>
 80061e4:	ab05      	add	r3, sp, #20
 80061e6:	9a04      	ldr	r2, [sp, #16]
 80061e8:	68a1      	ldr	r1, [r4, #8]
 80061ea:	4620      	mov	r0, r4
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	f000 fac5 	bl	800677c <_vfiprintf_r>
 80061f2:	b002      	add	sp, #8
 80061f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061f8:	b004      	add	sp, #16
 80061fa:	4770      	bx	lr
 80061fc:	20000010 	.word	0x20000010

08006200 <siprintf>:
 8006200:	b40e      	push	{r1, r2, r3}
 8006202:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006206:	b500      	push	{lr}
 8006208:	b09c      	sub	sp, #112	; 0x70
 800620a:	ab1d      	add	r3, sp, #116	; 0x74
 800620c:	9002      	str	r0, [sp, #8]
 800620e:	9006      	str	r0, [sp, #24]
 8006210:	9107      	str	r1, [sp, #28]
 8006212:	9104      	str	r1, [sp, #16]
 8006214:	4808      	ldr	r0, [pc, #32]	; (8006238 <siprintf+0x38>)
 8006216:	4909      	ldr	r1, [pc, #36]	; (800623c <siprintf+0x3c>)
 8006218:	f853 2b04 	ldr.w	r2, [r3], #4
 800621c:	9105      	str	r1, [sp, #20]
 800621e:	6800      	ldr	r0, [r0, #0]
 8006220:	a902      	add	r1, sp, #8
 8006222:	9301      	str	r3, [sp, #4]
 8006224:	f000 f98a 	bl	800653c <_svfiprintf_r>
 8006228:	2200      	movs	r2, #0
 800622a:	9b02      	ldr	r3, [sp, #8]
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	b01c      	add	sp, #112	; 0x70
 8006230:	f85d eb04 	ldr.w	lr, [sp], #4
 8006234:	b003      	add	sp, #12
 8006236:	4770      	bx	lr
 8006238:	20000010 	.word	0x20000010
 800623c:	ffff0208 	.word	0xffff0208

08006240 <std>:
 8006240:	2300      	movs	r3, #0
 8006242:	b510      	push	{r4, lr}
 8006244:	4604      	mov	r4, r0
 8006246:	e9c0 3300 	strd	r3, r3, [r0]
 800624a:	6083      	str	r3, [r0, #8]
 800624c:	8181      	strh	r1, [r0, #12]
 800624e:	6643      	str	r3, [r0, #100]	; 0x64
 8006250:	81c2      	strh	r2, [r0, #14]
 8006252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006256:	6183      	str	r3, [r0, #24]
 8006258:	4619      	mov	r1, r3
 800625a:	2208      	movs	r2, #8
 800625c:	305c      	adds	r0, #92	; 0x5c
 800625e:	f7ff ffaf 	bl	80061c0 <memset>
 8006262:	4b05      	ldr	r3, [pc, #20]	; (8006278 <std+0x38>)
 8006264:	6224      	str	r4, [r4, #32]
 8006266:	6263      	str	r3, [r4, #36]	; 0x24
 8006268:	4b04      	ldr	r3, [pc, #16]	; (800627c <std+0x3c>)
 800626a:	62a3      	str	r3, [r4, #40]	; 0x28
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <std+0x40>)
 800626e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <std+0x44>)
 8006272:	6323      	str	r3, [r4, #48]	; 0x30
 8006274:	bd10      	pop	{r4, pc}
 8006276:	bf00      	nop
 8006278:	08006cd9 	.word	0x08006cd9
 800627c:	08006cfb 	.word	0x08006cfb
 8006280:	08006d33 	.word	0x08006d33
 8006284:	08006d57 	.word	0x08006d57

08006288 <_cleanup_r>:
 8006288:	4901      	ldr	r1, [pc, #4]	; (8006290 <_cleanup_r+0x8>)
 800628a:	f000 b885 	b.w	8006398 <_fwalk_reent>
 800628e:	bf00      	nop
 8006290:	08007031 	.word	0x08007031

08006294 <__sfmoreglue>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	2568      	movs	r5, #104	; 0x68
 8006298:	1e4a      	subs	r2, r1, #1
 800629a:	4355      	muls	r5, r2
 800629c:	460e      	mov	r6, r1
 800629e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062a2:	f000 f897 	bl	80063d4 <_malloc_r>
 80062a6:	4604      	mov	r4, r0
 80062a8:	b140      	cbz	r0, 80062bc <__sfmoreglue+0x28>
 80062aa:	2100      	movs	r1, #0
 80062ac:	e9c0 1600 	strd	r1, r6, [r0]
 80062b0:	300c      	adds	r0, #12
 80062b2:	60a0      	str	r0, [r4, #8]
 80062b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062b8:	f7ff ff82 	bl	80061c0 <memset>
 80062bc:	4620      	mov	r0, r4
 80062be:	bd70      	pop	{r4, r5, r6, pc}

080062c0 <__sinit>:
 80062c0:	6983      	ldr	r3, [r0, #24]
 80062c2:	b510      	push	{r4, lr}
 80062c4:	4604      	mov	r4, r0
 80062c6:	bb33      	cbnz	r3, 8006316 <__sinit+0x56>
 80062c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80062cc:	6503      	str	r3, [r0, #80]	; 0x50
 80062ce:	4b12      	ldr	r3, [pc, #72]	; (8006318 <__sinit+0x58>)
 80062d0:	4a12      	ldr	r2, [pc, #72]	; (800631c <__sinit+0x5c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6282      	str	r2, [r0, #40]	; 0x28
 80062d6:	4298      	cmp	r0, r3
 80062d8:	bf04      	itt	eq
 80062da:	2301      	moveq	r3, #1
 80062dc:	6183      	streq	r3, [r0, #24]
 80062de:	f000 f81f 	bl	8006320 <__sfp>
 80062e2:	6060      	str	r0, [r4, #4]
 80062e4:	4620      	mov	r0, r4
 80062e6:	f000 f81b 	bl	8006320 <__sfp>
 80062ea:	60a0      	str	r0, [r4, #8]
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 f817 	bl	8006320 <__sfp>
 80062f2:	2200      	movs	r2, #0
 80062f4:	60e0      	str	r0, [r4, #12]
 80062f6:	2104      	movs	r1, #4
 80062f8:	6860      	ldr	r0, [r4, #4]
 80062fa:	f7ff ffa1 	bl	8006240 <std>
 80062fe:	2201      	movs	r2, #1
 8006300:	2109      	movs	r1, #9
 8006302:	68a0      	ldr	r0, [r4, #8]
 8006304:	f7ff ff9c 	bl	8006240 <std>
 8006308:	2202      	movs	r2, #2
 800630a:	2112      	movs	r1, #18
 800630c:	68e0      	ldr	r0, [r4, #12]
 800630e:	f7ff ff97 	bl	8006240 <std>
 8006312:	2301      	movs	r3, #1
 8006314:	61a3      	str	r3, [r4, #24]
 8006316:	bd10      	pop	{r4, pc}
 8006318:	080074d4 	.word	0x080074d4
 800631c:	08006289 	.word	0x08006289

08006320 <__sfp>:
 8006320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006322:	4b1b      	ldr	r3, [pc, #108]	; (8006390 <__sfp+0x70>)
 8006324:	4607      	mov	r7, r0
 8006326:	681e      	ldr	r6, [r3, #0]
 8006328:	69b3      	ldr	r3, [r6, #24]
 800632a:	b913      	cbnz	r3, 8006332 <__sfp+0x12>
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff ffc7 	bl	80062c0 <__sinit>
 8006332:	3648      	adds	r6, #72	; 0x48
 8006334:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006338:	3b01      	subs	r3, #1
 800633a:	d503      	bpl.n	8006344 <__sfp+0x24>
 800633c:	6833      	ldr	r3, [r6, #0]
 800633e:	b133      	cbz	r3, 800634e <__sfp+0x2e>
 8006340:	6836      	ldr	r6, [r6, #0]
 8006342:	e7f7      	b.n	8006334 <__sfp+0x14>
 8006344:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006348:	b16d      	cbz	r5, 8006366 <__sfp+0x46>
 800634a:	3468      	adds	r4, #104	; 0x68
 800634c:	e7f4      	b.n	8006338 <__sfp+0x18>
 800634e:	2104      	movs	r1, #4
 8006350:	4638      	mov	r0, r7
 8006352:	f7ff ff9f 	bl	8006294 <__sfmoreglue>
 8006356:	6030      	str	r0, [r6, #0]
 8006358:	2800      	cmp	r0, #0
 800635a:	d1f1      	bne.n	8006340 <__sfp+0x20>
 800635c:	230c      	movs	r3, #12
 800635e:	4604      	mov	r4, r0
 8006360:	603b      	str	r3, [r7, #0]
 8006362:	4620      	mov	r0, r4
 8006364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006366:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <__sfp+0x74>)
 8006368:	6665      	str	r5, [r4, #100]	; 0x64
 800636a:	e9c4 5500 	strd	r5, r5, [r4]
 800636e:	60a5      	str	r5, [r4, #8]
 8006370:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006374:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006378:	2208      	movs	r2, #8
 800637a:	4629      	mov	r1, r5
 800637c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006380:	f7ff ff1e 	bl	80061c0 <memset>
 8006384:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006388:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800638c:	e7e9      	b.n	8006362 <__sfp+0x42>
 800638e:	bf00      	nop
 8006390:	080074d4 	.word	0x080074d4
 8006394:	ffff0001 	.word	0xffff0001

08006398 <_fwalk_reent>:
 8006398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800639c:	4680      	mov	r8, r0
 800639e:	4689      	mov	r9, r1
 80063a0:	2600      	movs	r6, #0
 80063a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063a6:	b914      	cbnz	r4, 80063ae <_fwalk_reent+0x16>
 80063a8:	4630      	mov	r0, r6
 80063aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80063b2:	3f01      	subs	r7, #1
 80063b4:	d501      	bpl.n	80063ba <_fwalk_reent+0x22>
 80063b6:	6824      	ldr	r4, [r4, #0]
 80063b8:	e7f5      	b.n	80063a6 <_fwalk_reent+0xe>
 80063ba:	89ab      	ldrh	r3, [r5, #12]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d907      	bls.n	80063d0 <_fwalk_reent+0x38>
 80063c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063c4:	3301      	adds	r3, #1
 80063c6:	d003      	beq.n	80063d0 <_fwalk_reent+0x38>
 80063c8:	4629      	mov	r1, r5
 80063ca:	4640      	mov	r0, r8
 80063cc:	47c8      	blx	r9
 80063ce:	4306      	orrs	r6, r0
 80063d0:	3568      	adds	r5, #104	; 0x68
 80063d2:	e7ee      	b.n	80063b2 <_fwalk_reent+0x1a>

080063d4 <_malloc_r>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	1ccd      	adds	r5, r1, #3
 80063d8:	f025 0503 	bic.w	r5, r5, #3
 80063dc:	3508      	adds	r5, #8
 80063de:	2d0c      	cmp	r5, #12
 80063e0:	bf38      	it	cc
 80063e2:	250c      	movcc	r5, #12
 80063e4:	2d00      	cmp	r5, #0
 80063e6:	4606      	mov	r6, r0
 80063e8:	db01      	blt.n	80063ee <_malloc_r+0x1a>
 80063ea:	42a9      	cmp	r1, r5
 80063ec:	d903      	bls.n	80063f6 <_malloc_r+0x22>
 80063ee:	230c      	movs	r3, #12
 80063f0:	6033      	str	r3, [r6, #0]
 80063f2:	2000      	movs	r0, #0
 80063f4:	bd70      	pop	{r4, r5, r6, pc}
 80063f6:	f000 feed 	bl	80071d4 <__malloc_lock>
 80063fa:	4a21      	ldr	r2, [pc, #132]	; (8006480 <_malloc_r+0xac>)
 80063fc:	6814      	ldr	r4, [r2, #0]
 80063fe:	4621      	mov	r1, r4
 8006400:	b991      	cbnz	r1, 8006428 <_malloc_r+0x54>
 8006402:	4c20      	ldr	r4, [pc, #128]	; (8006484 <_malloc_r+0xb0>)
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	b91b      	cbnz	r3, 8006410 <_malloc_r+0x3c>
 8006408:	4630      	mov	r0, r6
 800640a:	f000 fc55 	bl	8006cb8 <_sbrk_r>
 800640e:	6020      	str	r0, [r4, #0]
 8006410:	4629      	mov	r1, r5
 8006412:	4630      	mov	r0, r6
 8006414:	f000 fc50 	bl	8006cb8 <_sbrk_r>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d124      	bne.n	8006466 <_malloc_r+0x92>
 800641c:	230c      	movs	r3, #12
 800641e:	4630      	mov	r0, r6
 8006420:	6033      	str	r3, [r6, #0]
 8006422:	f000 fed8 	bl	80071d6 <__malloc_unlock>
 8006426:	e7e4      	b.n	80063f2 <_malloc_r+0x1e>
 8006428:	680b      	ldr	r3, [r1, #0]
 800642a:	1b5b      	subs	r3, r3, r5
 800642c:	d418      	bmi.n	8006460 <_malloc_r+0x8c>
 800642e:	2b0b      	cmp	r3, #11
 8006430:	d90f      	bls.n	8006452 <_malloc_r+0x7e>
 8006432:	600b      	str	r3, [r1, #0]
 8006434:	18cc      	adds	r4, r1, r3
 8006436:	50cd      	str	r5, [r1, r3]
 8006438:	4630      	mov	r0, r6
 800643a:	f000 fecc 	bl	80071d6 <__malloc_unlock>
 800643e:	f104 000b 	add.w	r0, r4, #11
 8006442:	1d23      	adds	r3, r4, #4
 8006444:	f020 0007 	bic.w	r0, r0, #7
 8006448:	1ac3      	subs	r3, r0, r3
 800644a:	d0d3      	beq.n	80063f4 <_malloc_r+0x20>
 800644c:	425a      	negs	r2, r3
 800644e:	50e2      	str	r2, [r4, r3]
 8006450:	e7d0      	b.n	80063f4 <_malloc_r+0x20>
 8006452:	684b      	ldr	r3, [r1, #4]
 8006454:	428c      	cmp	r4, r1
 8006456:	bf16      	itet	ne
 8006458:	6063      	strne	r3, [r4, #4]
 800645a:	6013      	streq	r3, [r2, #0]
 800645c:	460c      	movne	r4, r1
 800645e:	e7eb      	b.n	8006438 <_malloc_r+0x64>
 8006460:	460c      	mov	r4, r1
 8006462:	6849      	ldr	r1, [r1, #4]
 8006464:	e7cc      	b.n	8006400 <_malloc_r+0x2c>
 8006466:	1cc4      	adds	r4, r0, #3
 8006468:	f024 0403 	bic.w	r4, r4, #3
 800646c:	42a0      	cmp	r0, r4
 800646e:	d005      	beq.n	800647c <_malloc_r+0xa8>
 8006470:	1a21      	subs	r1, r4, r0
 8006472:	4630      	mov	r0, r6
 8006474:	f000 fc20 	bl	8006cb8 <_sbrk_r>
 8006478:	3001      	adds	r0, #1
 800647a:	d0cf      	beq.n	800641c <_malloc_r+0x48>
 800647c:	6025      	str	r5, [r4, #0]
 800647e:	e7db      	b.n	8006438 <_malloc_r+0x64>
 8006480:	200000c8 	.word	0x200000c8
 8006484:	200000cc 	.word	0x200000cc

08006488 <__ssputs_r>:
 8006488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	688e      	ldr	r6, [r1, #8]
 800648e:	4682      	mov	sl, r0
 8006490:	429e      	cmp	r6, r3
 8006492:	460c      	mov	r4, r1
 8006494:	4690      	mov	r8, r2
 8006496:	4699      	mov	r9, r3
 8006498:	d837      	bhi.n	800650a <__ssputs_r+0x82>
 800649a:	898a      	ldrh	r2, [r1, #12]
 800649c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064a0:	d031      	beq.n	8006506 <__ssputs_r+0x7e>
 80064a2:	2302      	movs	r3, #2
 80064a4:	6825      	ldr	r5, [r4, #0]
 80064a6:	6909      	ldr	r1, [r1, #16]
 80064a8:	1a6f      	subs	r7, r5, r1
 80064aa:	6965      	ldr	r5, [r4, #20]
 80064ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80064b4:	f109 0301 	add.w	r3, r9, #1
 80064b8:	443b      	add	r3, r7
 80064ba:	429d      	cmp	r5, r3
 80064bc:	bf38      	it	cc
 80064be:	461d      	movcc	r5, r3
 80064c0:	0553      	lsls	r3, r2, #21
 80064c2:	d530      	bpl.n	8006526 <__ssputs_r+0x9e>
 80064c4:	4629      	mov	r1, r5
 80064c6:	f7ff ff85 	bl	80063d4 <_malloc_r>
 80064ca:	4606      	mov	r6, r0
 80064cc:	b950      	cbnz	r0, 80064e4 <__ssputs_r+0x5c>
 80064ce:	230c      	movs	r3, #12
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064d4:	f8ca 3000 	str.w	r3, [sl]
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064de:	81a3      	strh	r3, [r4, #12]
 80064e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e4:	463a      	mov	r2, r7
 80064e6:	6921      	ldr	r1, [r4, #16]
 80064e8:	f000 fe50 	bl	800718c <memcpy>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	6126      	str	r6, [r4, #16]
 80064fa:	443e      	add	r6, r7
 80064fc:	6026      	str	r6, [r4, #0]
 80064fe:	464e      	mov	r6, r9
 8006500:	6165      	str	r5, [r4, #20]
 8006502:	1bed      	subs	r5, r5, r7
 8006504:	60a5      	str	r5, [r4, #8]
 8006506:	454e      	cmp	r6, r9
 8006508:	d900      	bls.n	800650c <__ssputs_r+0x84>
 800650a:	464e      	mov	r6, r9
 800650c:	4632      	mov	r2, r6
 800650e:	4641      	mov	r1, r8
 8006510:	6820      	ldr	r0, [r4, #0]
 8006512:	f000 fe46 	bl	80071a2 <memmove>
 8006516:	68a3      	ldr	r3, [r4, #8]
 8006518:	2000      	movs	r0, #0
 800651a:	1b9b      	subs	r3, r3, r6
 800651c:	60a3      	str	r3, [r4, #8]
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	441e      	add	r6, r3
 8006522:	6026      	str	r6, [r4, #0]
 8006524:	e7dc      	b.n	80064e0 <__ssputs_r+0x58>
 8006526:	462a      	mov	r2, r5
 8006528:	f000 fea2 	bl	8007270 <_realloc_r>
 800652c:	4606      	mov	r6, r0
 800652e:	2800      	cmp	r0, #0
 8006530:	d1e2      	bne.n	80064f8 <__ssputs_r+0x70>
 8006532:	6921      	ldr	r1, [r4, #16]
 8006534:	4650      	mov	r0, sl
 8006536:	f000 fe4f 	bl	80071d8 <_free_r>
 800653a:	e7c8      	b.n	80064ce <__ssputs_r+0x46>

0800653c <_svfiprintf_r>:
 800653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006540:	461d      	mov	r5, r3
 8006542:	898b      	ldrh	r3, [r1, #12]
 8006544:	b09d      	sub	sp, #116	; 0x74
 8006546:	061f      	lsls	r7, r3, #24
 8006548:	4680      	mov	r8, r0
 800654a:	460c      	mov	r4, r1
 800654c:	4616      	mov	r6, r2
 800654e:	d50f      	bpl.n	8006570 <_svfiprintf_r+0x34>
 8006550:	690b      	ldr	r3, [r1, #16]
 8006552:	b96b      	cbnz	r3, 8006570 <_svfiprintf_r+0x34>
 8006554:	2140      	movs	r1, #64	; 0x40
 8006556:	f7ff ff3d 	bl	80063d4 <_malloc_r>
 800655a:	6020      	str	r0, [r4, #0]
 800655c:	6120      	str	r0, [r4, #16]
 800655e:	b928      	cbnz	r0, 800656c <_svfiprintf_r+0x30>
 8006560:	230c      	movs	r3, #12
 8006562:	f8c8 3000 	str.w	r3, [r8]
 8006566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800656a:	e0c8      	b.n	80066fe <_svfiprintf_r+0x1c2>
 800656c:	2340      	movs	r3, #64	; 0x40
 800656e:	6163      	str	r3, [r4, #20]
 8006570:	2300      	movs	r3, #0
 8006572:	9309      	str	r3, [sp, #36]	; 0x24
 8006574:	2320      	movs	r3, #32
 8006576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800657a:	2330      	movs	r3, #48	; 0x30
 800657c:	f04f 0b01 	mov.w	fp, #1
 8006580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006584:	9503      	str	r5, [sp, #12]
 8006586:	4637      	mov	r7, r6
 8006588:	463d      	mov	r5, r7
 800658a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800658e:	b10b      	cbz	r3, 8006594 <_svfiprintf_r+0x58>
 8006590:	2b25      	cmp	r3, #37	; 0x25
 8006592:	d13e      	bne.n	8006612 <_svfiprintf_r+0xd6>
 8006594:	ebb7 0a06 	subs.w	sl, r7, r6
 8006598:	d00b      	beq.n	80065b2 <_svfiprintf_r+0x76>
 800659a:	4653      	mov	r3, sl
 800659c:	4632      	mov	r2, r6
 800659e:	4621      	mov	r1, r4
 80065a0:	4640      	mov	r0, r8
 80065a2:	f7ff ff71 	bl	8006488 <__ssputs_r>
 80065a6:	3001      	adds	r0, #1
 80065a8:	f000 80a4 	beq.w	80066f4 <_svfiprintf_r+0x1b8>
 80065ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ae:	4453      	add	r3, sl
 80065b0:	9309      	str	r3, [sp, #36]	; 0x24
 80065b2:	783b      	ldrb	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 809d 	beq.w	80066f4 <_svfiprintf_r+0x1b8>
 80065ba:	2300      	movs	r3, #0
 80065bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065c4:	9304      	str	r3, [sp, #16]
 80065c6:	9307      	str	r3, [sp, #28]
 80065c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065cc:	931a      	str	r3, [sp, #104]	; 0x68
 80065ce:	462f      	mov	r7, r5
 80065d0:	2205      	movs	r2, #5
 80065d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80065d6:	4850      	ldr	r0, [pc, #320]	; (8006718 <_svfiprintf_r+0x1dc>)
 80065d8:	f000 fdca 	bl	8007170 <memchr>
 80065dc:	9b04      	ldr	r3, [sp, #16]
 80065de:	b9d0      	cbnz	r0, 8006616 <_svfiprintf_r+0xda>
 80065e0:	06d9      	lsls	r1, r3, #27
 80065e2:	bf44      	itt	mi
 80065e4:	2220      	movmi	r2, #32
 80065e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065ea:	071a      	lsls	r2, r3, #28
 80065ec:	bf44      	itt	mi
 80065ee:	222b      	movmi	r2, #43	; 0x2b
 80065f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065f4:	782a      	ldrb	r2, [r5, #0]
 80065f6:	2a2a      	cmp	r2, #42	; 0x2a
 80065f8:	d015      	beq.n	8006626 <_svfiprintf_r+0xea>
 80065fa:	462f      	mov	r7, r5
 80065fc:	2000      	movs	r0, #0
 80065fe:	250a      	movs	r5, #10
 8006600:	9a07      	ldr	r2, [sp, #28]
 8006602:	4639      	mov	r1, r7
 8006604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006608:	3b30      	subs	r3, #48	; 0x30
 800660a:	2b09      	cmp	r3, #9
 800660c:	d94d      	bls.n	80066aa <_svfiprintf_r+0x16e>
 800660e:	b1b8      	cbz	r0, 8006640 <_svfiprintf_r+0x104>
 8006610:	e00f      	b.n	8006632 <_svfiprintf_r+0xf6>
 8006612:	462f      	mov	r7, r5
 8006614:	e7b8      	b.n	8006588 <_svfiprintf_r+0x4c>
 8006616:	4a40      	ldr	r2, [pc, #256]	; (8006718 <_svfiprintf_r+0x1dc>)
 8006618:	463d      	mov	r5, r7
 800661a:	1a80      	subs	r0, r0, r2
 800661c:	fa0b f000 	lsl.w	r0, fp, r0
 8006620:	4318      	orrs	r0, r3
 8006622:	9004      	str	r0, [sp, #16]
 8006624:	e7d3      	b.n	80065ce <_svfiprintf_r+0x92>
 8006626:	9a03      	ldr	r2, [sp, #12]
 8006628:	1d11      	adds	r1, r2, #4
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	9103      	str	r1, [sp, #12]
 800662e:	2a00      	cmp	r2, #0
 8006630:	db01      	blt.n	8006636 <_svfiprintf_r+0xfa>
 8006632:	9207      	str	r2, [sp, #28]
 8006634:	e004      	b.n	8006640 <_svfiprintf_r+0x104>
 8006636:	4252      	negs	r2, r2
 8006638:	f043 0302 	orr.w	r3, r3, #2
 800663c:	9207      	str	r2, [sp, #28]
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	783b      	ldrb	r3, [r7, #0]
 8006642:	2b2e      	cmp	r3, #46	; 0x2e
 8006644:	d10c      	bne.n	8006660 <_svfiprintf_r+0x124>
 8006646:	787b      	ldrb	r3, [r7, #1]
 8006648:	2b2a      	cmp	r3, #42	; 0x2a
 800664a:	d133      	bne.n	80066b4 <_svfiprintf_r+0x178>
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	3702      	adds	r7, #2
 8006650:	1d1a      	adds	r2, r3, #4
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	9203      	str	r2, [sp, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	bfb8      	it	lt
 800665a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800665e:	9305      	str	r3, [sp, #20]
 8006660:	4d2e      	ldr	r5, [pc, #184]	; (800671c <_svfiprintf_r+0x1e0>)
 8006662:	2203      	movs	r2, #3
 8006664:	7839      	ldrb	r1, [r7, #0]
 8006666:	4628      	mov	r0, r5
 8006668:	f000 fd82 	bl	8007170 <memchr>
 800666c:	b138      	cbz	r0, 800667e <_svfiprintf_r+0x142>
 800666e:	2340      	movs	r3, #64	; 0x40
 8006670:	1b40      	subs	r0, r0, r5
 8006672:	fa03 f000 	lsl.w	r0, r3, r0
 8006676:	9b04      	ldr	r3, [sp, #16]
 8006678:	3701      	adds	r7, #1
 800667a:	4303      	orrs	r3, r0
 800667c:	9304      	str	r3, [sp, #16]
 800667e:	7839      	ldrb	r1, [r7, #0]
 8006680:	2206      	movs	r2, #6
 8006682:	4827      	ldr	r0, [pc, #156]	; (8006720 <_svfiprintf_r+0x1e4>)
 8006684:	1c7e      	adds	r6, r7, #1
 8006686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800668a:	f000 fd71 	bl	8007170 <memchr>
 800668e:	2800      	cmp	r0, #0
 8006690:	d038      	beq.n	8006704 <_svfiprintf_r+0x1c8>
 8006692:	4b24      	ldr	r3, [pc, #144]	; (8006724 <_svfiprintf_r+0x1e8>)
 8006694:	bb13      	cbnz	r3, 80066dc <_svfiprintf_r+0x1a0>
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	3307      	adds	r3, #7
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	3308      	adds	r3, #8
 80066a0:	9303      	str	r3, [sp, #12]
 80066a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a4:	444b      	add	r3, r9
 80066a6:	9309      	str	r3, [sp, #36]	; 0x24
 80066a8:	e76d      	b.n	8006586 <_svfiprintf_r+0x4a>
 80066aa:	fb05 3202 	mla	r2, r5, r2, r3
 80066ae:	2001      	movs	r0, #1
 80066b0:	460f      	mov	r7, r1
 80066b2:	e7a6      	b.n	8006602 <_svfiprintf_r+0xc6>
 80066b4:	2300      	movs	r3, #0
 80066b6:	250a      	movs	r5, #10
 80066b8:	4619      	mov	r1, r3
 80066ba:	3701      	adds	r7, #1
 80066bc:	9305      	str	r3, [sp, #20]
 80066be:	4638      	mov	r0, r7
 80066c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066c4:	3a30      	subs	r2, #48	; 0x30
 80066c6:	2a09      	cmp	r2, #9
 80066c8:	d903      	bls.n	80066d2 <_svfiprintf_r+0x196>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0c8      	beq.n	8006660 <_svfiprintf_r+0x124>
 80066ce:	9105      	str	r1, [sp, #20]
 80066d0:	e7c6      	b.n	8006660 <_svfiprintf_r+0x124>
 80066d2:	fb05 2101 	mla	r1, r5, r1, r2
 80066d6:	2301      	movs	r3, #1
 80066d8:	4607      	mov	r7, r0
 80066da:	e7f0      	b.n	80066be <_svfiprintf_r+0x182>
 80066dc:	ab03      	add	r3, sp, #12
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	4622      	mov	r2, r4
 80066e2:	4b11      	ldr	r3, [pc, #68]	; (8006728 <_svfiprintf_r+0x1ec>)
 80066e4:	a904      	add	r1, sp, #16
 80066e6:	4640      	mov	r0, r8
 80066e8:	f3af 8000 	nop.w
 80066ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80066f0:	4681      	mov	r9, r0
 80066f2:	d1d6      	bne.n	80066a2 <_svfiprintf_r+0x166>
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	065b      	lsls	r3, r3, #25
 80066f8:	f53f af35 	bmi.w	8006566 <_svfiprintf_r+0x2a>
 80066fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066fe:	b01d      	add	sp, #116	; 0x74
 8006700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006704:	ab03      	add	r3, sp, #12
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	4622      	mov	r2, r4
 800670a:	4b07      	ldr	r3, [pc, #28]	; (8006728 <_svfiprintf_r+0x1ec>)
 800670c:	a904      	add	r1, sp, #16
 800670e:	4640      	mov	r0, r8
 8006710:	f000 f9c0 	bl	8006a94 <_printf_i>
 8006714:	e7ea      	b.n	80066ec <_svfiprintf_r+0x1b0>
 8006716:	bf00      	nop
 8006718:	08007538 	.word	0x08007538
 800671c:	0800753e 	.word	0x0800753e
 8006720:	08007542 	.word	0x08007542
 8006724:	00000000 	.word	0x00000000
 8006728:	08006489 	.word	0x08006489

0800672c <__sfputc_r>:
 800672c:	6893      	ldr	r3, [r2, #8]
 800672e:	b410      	push	{r4}
 8006730:	3b01      	subs	r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	6093      	str	r3, [r2, #8]
 8006736:	da07      	bge.n	8006748 <__sfputc_r+0x1c>
 8006738:	6994      	ldr	r4, [r2, #24]
 800673a:	42a3      	cmp	r3, r4
 800673c:	db01      	blt.n	8006742 <__sfputc_r+0x16>
 800673e:	290a      	cmp	r1, #10
 8006740:	d102      	bne.n	8006748 <__sfputc_r+0x1c>
 8006742:	bc10      	pop	{r4}
 8006744:	f000 bb0c 	b.w	8006d60 <__swbuf_r>
 8006748:	6813      	ldr	r3, [r2, #0]
 800674a:	1c58      	adds	r0, r3, #1
 800674c:	6010      	str	r0, [r2, #0]
 800674e:	7019      	strb	r1, [r3, #0]
 8006750:	4608      	mov	r0, r1
 8006752:	bc10      	pop	{r4}
 8006754:	4770      	bx	lr

08006756 <__sfputs_r>:
 8006756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006758:	4606      	mov	r6, r0
 800675a:	460f      	mov	r7, r1
 800675c:	4614      	mov	r4, r2
 800675e:	18d5      	adds	r5, r2, r3
 8006760:	42ac      	cmp	r4, r5
 8006762:	d101      	bne.n	8006768 <__sfputs_r+0x12>
 8006764:	2000      	movs	r0, #0
 8006766:	e007      	b.n	8006778 <__sfputs_r+0x22>
 8006768:	463a      	mov	r2, r7
 800676a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800676e:	4630      	mov	r0, r6
 8006770:	f7ff ffdc 	bl	800672c <__sfputc_r>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d1f3      	bne.n	8006760 <__sfputs_r+0xa>
 8006778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800677c <_vfiprintf_r>:
 800677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	460c      	mov	r4, r1
 8006782:	b09d      	sub	sp, #116	; 0x74
 8006784:	4617      	mov	r7, r2
 8006786:	461d      	mov	r5, r3
 8006788:	4606      	mov	r6, r0
 800678a:	b118      	cbz	r0, 8006794 <_vfiprintf_r+0x18>
 800678c:	6983      	ldr	r3, [r0, #24]
 800678e:	b90b      	cbnz	r3, 8006794 <_vfiprintf_r+0x18>
 8006790:	f7ff fd96 	bl	80062c0 <__sinit>
 8006794:	4b7c      	ldr	r3, [pc, #496]	; (8006988 <_vfiprintf_r+0x20c>)
 8006796:	429c      	cmp	r4, r3
 8006798:	d158      	bne.n	800684c <_vfiprintf_r+0xd0>
 800679a:	6874      	ldr	r4, [r6, #4]
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	0718      	lsls	r0, r3, #28
 80067a0:	d55e      	bpl.n	8006860 <_vfiprintf_r+0xe4>
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d05b      	beq.n	8006860 <_vfiprintf_r+0xe4>
 80067a8:	2300      	movs	r3, #0
 80067aa:	9309      	str	r3, [sp, #36]	; 0x24
 80067ac:	2320      	movs	r3, #32
 80067ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067b2:	2330      	movs	r3, #48	; 0x30
 80067b4:	f04f 0b01 	mov.w	fp, #1
 80067b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067bc:	9503      	str	r5, [sp, #12]
 80067be:	46b8      	mov	r8, r7
 80067c0:	4645      	mov	r5, r8
 80067c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80067c6:	b10b      	cbz	r3, 80067cc <_vfiprintf_r+0x50>
 80067c8:	2b25      	cmp	r3, #37	; 0x25
 80067ca:	d154      	bne.n	8006876 <_vfiprintf_r+0xfa>
 80067cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80067d0:	d00b      	beq.n	80067ea <_vfiprintf_r+0x6e>
 80067d2:	4653      	mov	r3, sl
 80067d4:	463a      	mov	r2, r7
 80067d6:	4621      	mov	r1, r4
 80067d8:	4630      	mov	r0, r6
 80067da:	f7ff ffbc 	bl	8006756 <__sfputs_r>
 80067de:	3001      	adds	r0, #1
 80067e0:	f000 80c2 	beq.w	8006968 <_vfiprintf_r+0x1ec>
 80067e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e6:	4453      	add	r3, sl
 80067e8:	9309      	str	r3, [sp, #36]	; 0x24
 80067ea:	f898 3000 	ldrb.w	r3, [r8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 80ba 	beq.w	8006968 <_vfiprintf_r+0x1ec>
 80067f4:	2300      	movs	r3, #0
 80067f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067fe:	9304      	str	r3, [sp, #16]
 8006800:	9307      	str	r3, [sp, #28]
 8006802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006806:	931a      	str	r3, [sp, #104]	; 0x68
 8006808:	46a8      	mov	r8, r5
 800680a:	2205      	movs	r2, #5
 800680c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006810:	485e      	ldr	r0, [pc, #376]	; (800698c <_vfiprintf_r+0x210>)
 8006812:	f000 fcad 	bl	8007170 <memchr>
 8006816:	9b04      	ldr	r3, [sp, #16]
 8006818:	bb78      	cbnz	r0, 800687a <_vfiprintf_r+0xfe>
 800681a:	06d9      	lsls	r1, r3, #27
 800681c:	bf44      	itt	mi
 800681e:	2220      	movmi	r2, #32
 8006820:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006824:	071a      	lsls	r2, r3, #28
 8006826:	bf44      	itt	mi
 8006828:	222b      	movmi	r2, #43	; 0x2b
 800682a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800682e:	782a      	ldrb	r2, [r5, #0]
 8006830:	2a2a      	cmp	r2, #42	; 0x2a
 8006832:	d02a      	beq.n	800688a <_vfiprintf_r+0x10e>
 8006834:	46a8      	mov	r8, r5
 8006836:	2000      	movs	r0, #0
 8006838:	250a      	movs	r5, #10
 800683a:	9a07      	ldr	r2, [sp, #28]
 800683c:	4641      	mov	r1, r8
 800683e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006842:	3b30      	subs	r3, #48	; 0x30
 8006844:	2b09      	cmp	r3, #9
 8006846:	d969      	bls.n	800691c <_vfiprintf_r+0x1a0>
 8006848:	b360      	cbz	r0, 80068a4 <_vfiprintf_r+0x128>
 800684a:	e024      	b.n	8006896 <_vfiprintf_r+0x11a>
 800684c:	4b50      	ldr	r3, [pc, #320]	; (8006990 <_vfiprintf_r+0x214>)
 800684e:	429c      	cmp	r4, r3
 8006850:	d101      	bne.n	8006856 <_vfiprintf_r+0xda>
 8006852:	68b4      	ldr	r4, [r6, #8]
 8006854:	e7a2      	b.n	800679c <_vfiprintf_r+0x20>
 8006856:	4b4f      	ldr	r3, [pc, #316]	; (8006994 <_vfiprintf_r+0x218>)
 8006858:	429c      	cmp	r4, r3
 800685a:	bf08      	it	eq
 800685c:	68f4      	ldreq	r4, [r6, #12]
 800685e:	e79d      	b.n	800679c <_vfiprintf_r+0x20>
 8006860:	4621      	mov	r1, r4
 8006862:	4630      	mov	r0, r6
 8006864:	f000 fae0 	bl	8006e28 <__swsetup_r>
 8006868:	2800      	cmp	r0, #0
 800686a:	d09d      	beq.n	80067a8 <_vfiprintf_r+0x2c>
 800686c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006870:	b01d      	add	sp, #116	; 0x74
 8006872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006876:	46a8      	mov	r8, r5
 8006878:	e7a2      	b.n	80067c0 <_vfiprintf_r+0x44>
 800687a:	4a44      	ldr	r2, [pc, #272]	; (800698c <_vfiprintf_r+0x210>)
 800687c:	4645      	mov	r5, r8
 800687e:	1a80      	subs	r0, r0, r2
 8006880:	fa0b f000 	lsl.w	r0, fp, r0
 8006884:	4318      	orrs	r0, r3
 8006886:	9004      	str	r0, [sp, #16]
 8006888:	e7be      	b.n	8006808 <_vfiprintf_r+0x8c>
 800688a:	9a03      	ldr	r2, [sp, #12]
 800688c:	1d11      	adds	r1, r2, #4
 800688e:	6812      	ldr	r2, [r2, #0]
 8006890:	9103      	str	r1, [sp, #12]
 8006892:	2a00      	cmp	r2, #0
 8006894:	db01      	blt.n	800689a <_vfiprintf_r+0x11e>
 8006896:	9207      	str	r2, [sp, #28]
 8006898:	e004      	b.n	80068a4 <_vfiprintf_r+0x128>
 800689a:	4252      	negs	r2, r2
 800689c:	f043 0302 	orr.w	r3, r3, #2
 80068a0:	9207      	str	r2, [sp, #28]
 80068a2:	9304      	str	r3, [sp, #16]
 80068a4:	f898 3000 	ldrb.w	r3, [r8]
 80068a8:	2b2e      	cmp	r3, #46	; 0x2e
 80068aa:	d10e      	bne.n	80068ca <_vfiprintf_r+0x14e>
 80068ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80068b0:	2b2a      	cmp	r3, #42	; 0x2a
 80068b2:	d138      	bne.n	8006926 <_vfiprintf_r+0x1aa>
 80068b4:	9b03      	ldr	r3, [sp, #12]
 80068b6:	f108 0802 	add.w	r8, r8, #2
 80068ba:	1d1a      	adds	r2, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	9203      	str	r2, [sp, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bfb8      	it	lt
 80068c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80068c8:	9305      	str	r3, [sp, #20]
 80068ca:	4d33      	ldr	r5, [pc, #204]	; (8006998 <_vfiprintf_r+0x21c>)
 80068cc:	2203      	movs	r2, #3
 80068ce:	f898 1000 	ldrb.w	r1, [r8]
 80068d2:	4628      	mov	r0, r5
 80068d4:	f000 fc4c 	bl	8007170 <memchr>
 80068d8:	b140      	cbz	r0, 80068ec <_vfiprintf_r+0x170>
 80068da:	2340      	movs	r3, #64	; 0x40
 80068dc:	1b40      	subs	r0, r0, r5
 80068de:	fa03 f000 	lsl.w	r0, r3, r0
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	f108 0801 	add.w	r8, r8, #1
 80068e8:	4303      	orrs	r3, r0
 80068ea:	9304      	str	r3, [sp, #16]
 80068ec:	f898 1000 	ldrb.w	r1, [r8]
 80068f0:	2206      	movs	r2, #6
 80068f2:	482a      	ldr	r0, [pc, #168]	; (800699c <_vfiprintf_r+0x220>)
 80068f4:	f108 0701 	add.w	r7, r8, #1
 80068f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068fc:	f000 fc38 	bl	8007170 <memchr>
 8006900:	2800      	cmp	r0, #0
 8006902:	d037      	beq.n	8006974 <_vfiprintf_r+0x1f8>
 8006904:	4b26      	ldr	r3, [pc, #152]	; (80069a0 <_vfiprintf_r+0x224>)
 8006906:	bb1b      	cbnz	r3, 8006950 <_vfiprintf_r+0x1d4>
 8006908:	9b03      	ldr	r3, [sp, #12]
 800690a:	3307      	adds	r3, #7
 800690c:	f023 0307 	bic.w	r3, r3, #7
 8006910:	3308      	adds	r3, #8
 8006912:	9303      	str	r3, [sp, #12]
 8006914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006916:	444b      	add	r3, r9
 8006918:	9309      	str	r3, [sp, #36]	; 0x24
 800691a:	e750      	b.n	80067be <_vfiprintf_r+0x42>
 800691c:	fb05 3202 	mla	r2, r5, r2, r3
 8006920:	2001      	movs	r0, #1
 8006922:	4688      	mov	r8, r1
 8006924:	e78a      	b.n	800683c <_vfiprintf_r+0xc0>
 8006926:	2300      	movs	r3, #0
 8006928:	250a      	movs	r5, #10
 800692a:	4619      	mov	r1, r3
 800692c:	f108 0801 	add.w	r8, r8, #1
 8006930:	9305      	str	r3, [sp, #20]
 8006932:	4640      	mov	r0, r8
 8006934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006938:	3a30      	subs	r2, #48	; 0x30
 800693a:	2a09      	cmp	r2, #9
 800693c:	d903      	bls.n	8006946 <_vfiprintf_r+0x1ca>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0c3      	beq.n	80068ca <_vfiprintf_r+0x14e>
 8006942:	9105      	str	r1, [sp, #20]
 8006944:	e7c1      	b.n	80068ca <_vfiprintf_r+0x14e>
 8006946:	fb05 2101 	mla	r1, r5, r1, r2
 800694a:	2301      	movs	r3, #1
 800694c:	4680      	mov	r8, r0
 800694e:	e7f0      	b.n	8006932 <_vfiprintf_r+0x1b6>
 8006950:	ab03      	add	r3, sp, #12
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4622      	mov	r2, r4
 8006956:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <_vfiprintf_r+0x228>)
 8006958:	a904      	add	r1, sp, #16
 800695a:	4630      	mov	r0, r6
 800695c:	f3af 8000 	nop.w
 8006960:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006964:	4681      	mov	r9, r0
 8006966:	d1d5      	bne.n	8006914 <_vfiprintf_r+0x198>
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	065b      	lsls	r3, r3, #25
 800696c:	f53f af7e 	bmi.w	800686c <_vfiprintf_r+0xf0>
 8006970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006972:	e77d      	b.n	8006870 <_vfiprintf_r+0xf4>
 8006974:	ab03      	add	r3, sp, #12
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	4622      	mov	r2, r4
 800697a:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <_vfiprintf_r+0x228>)
 800697c:	a904      	add	r1, sp, #16
 800697e:	4630      	mov	r0, r6
 8006980:	f000 f888 	bl	8006a94 <_printf_i>
 8006984:	e7ec      	b.n	8006960 <_vfiprintf_r+0x1e4>
 8006986:	bf00      	nop
 8006988:	080074f8 	.word	0x080074f8
 800698c:	08007538 	.word	0x08007538
 8006990:	08007518 	.word	0x08007518
 8006994:	080074d8 	.word	0x080074d8
 8006998:	0800753e 	.word	0x0800753e
 800699c:	08007542 	.word	0x08007542
 80069a0:	00000000 	.word	0x00000000
 80069a4:	08006757 	.word	0x08006757

080069a8 <_printf_common>:
 80069a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069ac:	4691      	mov	r9, r2
 80069ae:	461f      	mov	r7, r3
 80069b0:	688a      	ldr	r2, [r1, #8]
 80069b2:	690b      	ldr	r3, [r1, #16]
 80069b4:	4606      	mov	r6, r0
 80069b6:	4293      	cmp	r3, r2
 80069b8:	bfb8      	it	lt
 80069ba:	4613      	movlt	r3, r2
 80069bc:	f8c9 3000 	str.w	r3, [r9]
 80069c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069c4:	460c      	mov	r4, r1
 80069c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069ca:	b112      	cbz	r2, 80069d2 <_printf_common+0x2a>
 80069cc:	3301      	adds	r3, #1
 80069ce:	f8c9 3000 	str.w	r3, [r9]
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	0699      	lsls	r1, r3, #26
 80069d6:	bf42      	ittt	mi
 80069d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80069dc:	3302      	addmi	r3, #2
 80069de:	f8c9 3000 	strmi.w	r3, [r9]
 80069e2:	6825      	ldr	r5, [r4, #0]
 80069e4:	f015 0506 	ands.w	r5, r5, #6
 80069e8:	d107      	bne.n	80069fa <_printf_common+0x52>
 80069ea:	f104 0a19 	add.w	sl, r4, #25
 80069ee:	68e3      	ldr	r3, [r4, #12]
 80069f0:	f8d9 2000 	ldr.w	r2, [r9]
 80069f4:	1a9b      	subs	r3, r3, r2
 80069f6:	42ab      	cmp	r3, r5
 80069f8:	dc29      	bgt.n	8006a4e <_printf_common+0xa6>
 80069fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80069fe:	6822      	ldr	r2, [r4, #0]
 8006a00:	3300      	adds	r3, #0
 8006a02:	bf18      	it	ne
 8006a04:	2301      	movne	r3, #1
 8006a06:	0692      	lsls	r2, r2, #26
 8006a08:	d42e      	bmi.n	8006a68 <_printf_common+0xc0>
 8006a0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a0e:	4639      	mov	r1, r7
 8006a10:	4630      	mov	r0, r6
 8006a12:	47c0      	blx	r8
 8006a14:	3001      	adds	r0, #1
 8006a16:	d021      	beq.n	8006a5c <_printf_common+0xb4>
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	68e5      	ldr	r5, [r4, #12]
 8006a1c:	f003 0306 	and.w	r3, r3, #6
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	bf18      	it	ne
 8006a24:	2500      	movne	r5, #0
 8006a26:	f8d9 2000 	ldr.w	r2, [r9]
 8006a2a:	f04f 0900 	mov.w	r9, #0
 8006a2e:	bf08      	it	eq
 8006a30:	1aad      	subeq	r5, r5, r2
 8006a32:	68a3      	ldr	r3, [r4, #8]
 8006a34:	6922      	ldr	r2, [r4, #16]
 8006a36:	bf08      	it	eq
 8006a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	bfc4      	itt	gt
 8006a40:	1a9b      	subgt	r3, r3, r2
 8006a42:	18ed      	addgt	r5, r5, r3
 8006a44:	341a      	adds	r4, #26
 8006a46:	454d      	cmp	r5, r9
 8006a48:	d11a      	bne.n	8006a80 <_printf_common+0xd8>
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	e008      	b.n	8006a60 <_printf_common+0xb8>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4652      	mov	r2, sl
 8006a52:	4639      	mov	r1, r7
 8006a54:	4630      	mov	r0, r6
 8006a56:	47c0      	blx	r8
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d103      	bne.n	8006a64 <_printf_common+0xbc>
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a64:	3501      	adds	r5, #1
 8006a66:	e7c2      	b.n	80069ee <_printf_common+0x46>
 8006a68:	2030      	movs	r0, #48	; 0x30
 8006a6a:	18e1      	adds	r1, r4, r3
 8006a6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a76:	4422      	add	r2, r4
 8006a78:	3302      	adds	r3, #2
 8006a7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a7e:	e7c4      	b.n	8006a0a <_printf_common+0x62>
 8006a80:	2301      	movs	r3, #1
 8006a82:	4622      	mov	r2, r4
 8006a84:	4639      	mov	r1, r7
 8006a86:	4630      	mov	r0, r6
 8006a88:	47c0      	blx	r8
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d0e6      	beq.n	8006a5c <_printf_common+0xb4>
 8006a8e:	f109 0901 	add.w	r9, r9, #1
 8006a92:	e7d8      	b.n	8006a46 <_printf_common+0x9e>

08006a94 <_printf_i>:
 8006a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	7e09      	ldrb	r1, [r1, #24]
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	296e      	cmp	r1, #110	; 0x6e
 8006aa4:	4617      	mov	r7, r2
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	4698      	mov	r8, r3
 8006aaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aac:	f000 80b3 	beq.w	8006c16 <_printf_i+0x182>
 8006ab0:	d822      	bhi.n	8006af8 <_printf_i+0x64>
 8006ab2:	2963      	cmp	r1, #99	; 0x63
 8006ab4:	d036      	beq.n	8006b24 <_printf_i+0x90>
 8006ab6:	d80a      	bhi.n	8006ace <_printf_i+0x3a>
 8006ab8:	2900      	cmp	r1, #0
 8006aba:	f000 80b9 	beq.w	8006c30 <_printf_i+0x19c>
 8006abe:	2958      	cmp	r1, #88	; 0x58
 8006ac0:	f000 8083 	beq.w	8006bca <_printf_i+0x136>
 8006ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ac8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006acc:	e032      	b.n	8006b34 <_printf_i+0xa0>
 8006ace:	2964      	cmp	r1, #100	; 0x64
 8006ad0:	d001      	beq.n	8006ad6 <_printf_i+0x42>
 8006ad2:	2969      	cmp	r1, #105	; 0x69
 8006ad4:	d1f6      	bne.n	8006ac4 <_printf_i+0x30>
 8006ad6:	6820      	ldr	r0, [r4, #0]
 8006ad8:	6813      	ldr	r3, [r2, #0]
 8006ada:	0605      	lsls	r5, r0, #24
 8006adc:	f103 0104 	add.w	r1, r3, #4
 8006ae0:	d52a      	bpl.n	8006b38 <_printf_i+0xa4>
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6011      	str	r1, [r2, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	da03      	bge.n	8006af2 <_printf_i+0x5e>
 8006aea:	222d      	movs	r2, #45	; 0x2d
 8006aec:	425b      	negs	r3, r3
 8006aee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006af2:	486f      	ldr	r0, [pc, #444]	; (8006cb0 <_printf_i+0x21c>)
 8006af4:	220a      	movs	r2, #10
 8006af6:	e039      	b.n	8006b6c <_printf_i+0xd8>
 8006af8:	2973      	cmp	r1, #115	; 0x73
 8006afa:	f000 809d 	beq.w	8006c38 <_printf_i+0x1a4>
 8006afe:	d808      	bhi.n	8006b12 <_printf_i+0x7e>
 8006b00:	296f      	cmp	r1, #111	; 0x6f
 8006b02:	d020      	beq.n	8006b46 <_printf_i+0xb2>
 8006b04:	2970      	cmp	r1, #112	; 0x70
 8006b06:	d1dd      	bne.n	8006ac4 <_printf_i+0x30>
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	f043 0320 	orr.w	r3, r3, #32
 8006b0e:	6023      	str	r3, [r4, #0]
 8006b10:	e003      	b.n	8006b1a <_printf_i+0x86>
 8006b12:	2975      	cmp	r1, #117	; 0x75
 8006b14:	d017      	beq.n	8006b46 <_printf_i+0xb2>
 8006b16:	2978      	cmp	r1, #120	; 0x78
 8006b18:	d1d4      	bne.n	8006ac4 <_printf_i+0x30>
 8006b1a:	2378      	movs	r3, #120	; 0x78
 8006b1c:	4865      	ldr	r0, [pc, #404]	; (8006cb4 <_printf_i+0x220>)
 8006b1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b22:	e055      	b.n	8006bd0 <_printf_i+0x13c>
 8006b24:	6813      	ldr	r3, [r2, #0]
 8006b26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b2a:	1d19      	adds	r1, r3, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6011      	str	r1, [r2, #0]
 8006b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b34:	2301      	movs	r3, #1
 8006b36:	e08c      	b.n	8006c52 <_printf_i+0x1be>
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b3e:	6011      	str	r1, [r2, #0]
 8006b40:	bf18      	it	ne
 8006b42:	b21b      	sxthne	r3, r3
 8006b44:	e7cf      	b.n	8006ae6 <_printf_i+0x52>
 8006b46:	6813      	ldr	r3, [r2, #0]
 8006b48:	6825      	ldr	r5, [r4, #0]
 8006b4a:	1d18      	adds	r0, r3, #4
 8006b4c:	6010      	str	r0, [r2, #0]
 8006b4e:	0628      	lsls	r0, r5, #24
 8006b50:	d501      	bpl.n	8006b56 <_printf_i+0xc2>
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	e002      	b.n	8006b5c <_printf_i+0xc8>
 8006b56:	0668      	lsls	r0, r5, #25
 8006b58:	d5fb      	bpl.n	8006b52 <_printf_i+0xbe>
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	296f      	cmp	r1, #111	; 0x6f
 8006b5e:	bf14      	ite	ne
 8006b60:	220a      	movne	r2, #10
 8006b62:	2208      	moveq	r2, #8
 8006b64:	4852      	ldr	r0, [pc, #328]	; (8006cb0 <_printf_i+0x21c>)
 8006b66:	2100      	movs	r1, #0
 8006b68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b6c:	6865      	ldr	r5, [r4, #4]
 8006b6e:	2d00      	cmp	r5, #0
 8006b70:	60a5      	str	r5, [r4, #8]
 8006b72:	f2c0 8095 	blt.w	8006ca0 <_printf_i+0x20c>
 8006b76:	6821      	ldr	r1, [r4, #0]
 8006b78:	f021 0104 	bic.w	r1, r1, #4
 8006b7c:	6021      	str	r1, [r4, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d13d      	bne.n	8006bfe <_printf_i+0x16a>
 8006b82:	2d00      	cmp	r5, #0
 8006b84:	f040 808e 	bne.w	8006ca4 <_printf_i+0x210>
 8006b88:	4665      	mov	r5, ip
 8006b8a:	2a08      	cmp	r2, #8
 8006b8c:	d10b      	bne.n	8006ba6 <_printf_i+0x112>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	07db      	lsls	r3, r3, #31
 8006b92:	d508      	bpl.n	8006ba6 <_printf_i+0x112>
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	6862      	ldr	r2, [r4, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	bfde      	ittt	le
 8006b9c:	2330      	movle	r3, #48	; 0x30
 8006b9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ba2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ba6:	ebac 0305 	sub.w	r3, ip, r5
 8006baa:	6123      	str	r3, [r4, #16]
 8006bac:	f8cd 8000 	str.w	r8, [sp]
 8006bb0:	463b      	mov	r3, r7
 8006bb2:	aa03      	add	r2, sp, #12
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f7ff fef6 	bl	80069a8 <_printf_common>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d14d      	bne.n	8006c5c <_printf_i+0x1c8>
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bc4:	b005      	add	sp, #20
 8006bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bca:	4839      	ldr	r0, [pc, #228]	; (8006cb0 <_printf_i+0x21c>)
 8006bcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006bd0:	6813      	ldr	r3, [r2, #0]
 8006bd2:	6821      	ldr	r1, [r4, #0]
 8006bd4:	1d1d      	adds	r5, r3, #4
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6015      	str	r5, [r2, #0]
 8006bda:	060a      	lsls	r2, r1, #24
 8006bdc:	d50b      	bpl.n	8006bf6 <_printf_i+0x162>
 8006bde:	07ca      	lsls	r2, r1, #31
 8006be0:	bf44      	itt	mi
 8006be2:	f041 0120 	orrmi.w	r1, r1, #32
 8006be6:	6021      	strmi	r1, [r4, #0]
 8006be8:	b91b      	cbnz	r3, 8006bf2 <_printf_i+0x15e>
 8006bea:	6822      	ldr	r2, [r4, #0]
 8006bec:	f022 0220 	bic.w	r2, r2, #32
 8006bf0:	6022      	str	r2, [r4, #0]
 8006bf2:	2210      	movs	r2, #16
 8006bf4:	e7b7      	b.n	8006b66 <_printf_i+0xd2>
 8006bf6:	064d      	lsls	r5, r1, #25
 8006bf8:	bf48      	it	mi
 8006bfa:	b29b      	uxthmi	r3, r3
 8006bfc:	e7ef      	b.n	8006bde <_printf_i+0x14a>
 8006bfe:	4665      	mov	r5, ip
 8006c00:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c04:	fb02 3311 	mls	r3, r2, r1, r3
 8006c08:	5cc3      	ldrb	r3, [r0, r3]
 8006c0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c0e:	460b      	mov	r3, r1
 8006c10:	2900      	cmp	r1, #0
 8006c12:	d1f5      	bne.n	8006c00 <_printf_i+0x16c>
 8006c14:	e7b9      	b.n	8006b8a <_printf_i+0xf6>
 8006c16:	6813      	ldr	r3, [r2, #0]
 8006c18:	6825      	ldr	r5, [r4, #0]
 8006c1a:	1d18      	adds	r0, r3, #4
 8006c1c:	6961      	ldr	r1, [r4, #20]
 8006c1e:	6010      	str	r0, [r2, #0]
 8006c20:	0628      	lsls	r0, r5, #24
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	d501      	bpl.n	8006c2a <_printf_i+0x196>
 8006c26:	6019      	str	r1, [r3, #0]
 8006c28:	e002      	b.n	8006c30 <_printf_i+0x19c>
 8006c2a:	066a      	lsls	r2, r5, #25
 8006c2c:	d5fb      	bpl.n	8006c26 <_printf_i+0x192>
 8006c2e:	8019      	strh	r1, [r3, #0]
 8006c30:	2300      	movs	r3, #0
 8006c32:	4665      	mov	r5, ip
 8006c34:	6123      	str	r3, [r4, #16]
 8006c36:	e7b9      	b.n	8006bac <_printf_i+0x118>
 8006c38:	6813      	ldr	r3, [r2, #0]
 8006c3a:	1d19      	adds	r1, r3, #4
 8006c3c:	6011      	str	r1, [r2, #0]
 8006c3e:	681d      	ldr	r5, [r3, #0]
 8006c40:	6862      	ldr	r2, [r4, #4]
 8006c42:	2100      	movs	r1, #0
 8006c44:	4628      	mov	r0, r5
 8006c46:	f000 fa93 	bl	8007170 <memchr>
 8006c4a:	b108      	cbz	r0, 8006c50 <_printf_i+0x1bc>
 8006c4c:	1b40      	subs	r0, r0, r5
 8006c4e:	6060      	str	r0, [r4, #4]
 8006c50:	6863      	ldr	r3, [r4, #4]
 8006c52:	6123      	str	r3, [r4, #16]
 8006c54:	2300      	movs	r3, #0
 8006c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c5a:	e7a7      	b.n	8006bac <_printf_i+0x118>
 8006c5c:	6923      	ldr	r3, [r4, #16]
 8006c5e:	462a      	mov	r2, r5
 8006c60:	4639      	mov	r1, r7
 8006c62:	4630      	mov	r0, r6
 8006c64:	47c0      	blx	r8
 8006c66:	3001      	adds	r0, #1
 8006c68:	d0aa      	beq.n	8006bc0 <_printf_i+0x12c>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	079b      	lsls	r3, r3, #30
 8006c6e:	d413      	bmi.n	8006c98 <_printf_i+0x204>
 8006c70:	68e0      	ldr	r0, [r4, #12]
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	4298      	cmp	r0, r3
 8006c76:	bfb8      	it	lt
 8006c78:	4618      	movlt	r0, r3
 8006c7a:	e7a3      	b.n	8006bc4 <_printf_i+0x130>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	464a      	mov	r2, r9
 8006c80:	4639      	mov	r1, r7
 8006c82:	4630      	mov	r0, r6
 8006c84:	47c0      	blx	r8
 8006c86:	3001      	adds	r0, #1
 8006c88:	d09a      	beq.n	8006bc0 <_printf_i+0x12c>
 8006c8a:	3501      	adds	r5, #1
 8006c8c:	68e3      	ldr	r3, [r4, #12]
 8006c8e:	9a03      	ldr	r2, [sp, #12]
 8006c90:	1a9b      	subs	r3, r3, r2
 8006c92:	42ab      	cmp	r3, r5
 8006c94:	dcf2      	bgt.n	8006c7c <_printf_i+0x1e8>
 8006c96:	e7eb      	b.n	8006c70 <_printf_i+0x1dc>
 8006c98:	2500      	movs	r5, #0
 8006c9a:	f104 0919 	add.w	r9, r4, #25
 8006c9e:	e7f5      	b.n	8006c8c <_printf_i+0x1f8>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1ac      	bne.n	8006bfe <_printf_i+0x16a>
 8006ca4:	7803      	ldrb	r3, [r0, #0]
 8006ca6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006caa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cae:	e76c      	b.n	8006b8a <_printf_i+0xf6>
 8006cb0:	08007549 	.word	0x08007549
 8006cb4:	0800755a 	.word	0x0800755a

08006cb8 <_sbrk_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4c05      	ldr	r4, [pc, #20]	; (8006cd4 <_sbrk_r+0x1c>)
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	6023      	str	r3, [r4, #0]
 8006cc4:	f7fe fde6 	bl	8005894 <_sbrk>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_sbrk_r+0x1a>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_sbrk_r+0x1a>
 8006cd0:	602b      	str	r3, [r5, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	20000b3c 	.word	0x20000b3c

08006cd8 <__sread>:
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	460c      	mov	r4, r1
 8006cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce0:	f000 faec 	bl	80072bc <_read_r>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	bfab      	itete	ge
 8006ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cea:	89a3      	ldrhlt	r3, [r4, #12]
 8006cec:	181b      	addge	r3, r3, r0
 8006cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cf2:	bfac      	ite	ge
 8006cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cf6:	81a3      	strhlt	r3, [r4, #12]
 8006cf8:	bd10      	pop	{r4, pc}

08006cfa <__swrite>:
 8006cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfe:	461f      	mov	r7, r3
 8006d00:	898b      	ldrh	r3, [r1, #12]
 8006d02:	4605      	mov	r5, r0
 8006d04:	05db      	lsls	r3, r3, #23
 8006d06:	460c      	mov	r4, r1
 8006d08:	4616      	mov	r6, r2
 8006d0a:	d505      	bpl.n	8006d18 <__swrite+0x1e>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d14:	f000 f9b6 	bl	8007084 <_lseek_r>
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	4632      	mov	r2, r6
 8006d1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d20:	81a3      	strh	r3, [r4, #12]
 8006d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d26:	463b      	mov	r3, r7
 8006d28:	4628      	mov	r0, r5
 8006d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2e:	f000 b869 	b.w	8006e04 <_write_r>

08006d32 <__sseek>:
 8006d32:	b510      	push	{r4, lr}
 8006d34:	460c      	mov	r4, r1
 8006d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3a:	f000 f9a3 	bl	8007084 <_lseek_r>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	bf15      	itete	ne
 8006d44:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d4e:	81a3      	strheq	r3, [r4, #12]
 8006d50:	bf18      	it	ne
 8006d52:	81a3      	strhne	r3, [r4, #12]
 8006d54:	bd10      	pop	{r4, pc}

08006d56 <__sclose>:
 8006d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5a:	f000 b8d3 	b.w	8006f04 <_close_r>
	...

08006d60 <__swbuf_r>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	460e      	mov	r6, r1
 8006d64:	4614      	mov	r4, r2
 8006d66:	4605      	mov	r5, r0
 8006d68:	b118      	cbz	r0, 8006d72 <__swbuf_r+0x12>
 8006d6a:	6983      	ldr	r3, [r0, #24]
 8006d6c:	b90b      	cbnz	r3, 8006d72 <__swbuf_r+0x12>
 8006d6e:	f7ff faa7 	bl	80062c0 <__sinit>
 8006d72:	4b21      	ldr	r3, [pc, #132]	; (8006df8 <__swbuf_r+0x98>)
 8006d74:	429c      	cmp	r4, r3
 8006d76:	d12a      	bne.n	8006dce <__swbuf_r+0x6e>
 8006d78:	686c      	ldr	r4, [r5, #4]
 8006d7a:	69a3      	ldr	r3, [r4, #24]
 8006d7c:	60a3      	str	r3, [r4, #8]
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	071a      	lsls	r2, r3, #28
 8006d82:	d52e      	bpl.n	8006de2 <__swbuf_r+0x82>
 8006d84:	6923      	ldr	r3, [r4, #16]
 8006d86:	b363      	cbz	r3, 8006de2 <__swbuf_r+0x82>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	6820      	ldr	r0, [r4, #0]
 8006d8c:	b2f6      	uxtb	r6, r6
 8006d8e:	1ac0      	subs	r0, r0, r3
 8006d90:	6963      	ldr	r3, [r4, #20]
 8006d92:	4637      	mov	r7, r6
 8006d94:	4283      	cmp	r3, r0
 8006d96:	dc04      	bgt.n	8006da2 <__swbuf_r+0x42>
 8006d98:	4621      	mov	r1, r4
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f000 f948 	bl	8007030 <_fflush_r>
 8006da0:	bb28      	cbnz	r0, 8006dee <__swbuf_r+0x8e>
 8006da2:	68a3      	ldr	r3, [r4, #8]
 8006da4:	3001      	adds	r0, #1
 8006da6:	3b01      	subs	r3, #1
 8006da8:	60a3      	str	r3, [r4, #8]
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	6022      	str	r2, [r4, #0]
 8006db0:	701e      	strb	r6, [r3, #0]
 8006db2:	6963      	ldr	r3, [r4, #20]
 8006db4:	4283      	cmp	r3, r0
 8006db6:	d004      	beq.n	8006dc2 <__swbuf_r+0x62>
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	07db      	lsls	r3, r3, #31
 8006dbc:	d519      	bpl.n	8006df2 <__swbuf_r+0x92>
 8006dbe:	2e0a      	cmp	r6, #10
 8006dc0:	d117      	bne.n	8006df2 <__swbuf_r+0x92>
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 f933 	bl	8007030 <_fflush_r>
 8006dca:	b190      	cbz	r0, 8006df2 <__swbuf_r+0x92>
 8006dcc:	e00f      	b.n	8006dee <__swbuf_r+0x8e>
 8006dce:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <__swbuf_r+0x9c>)
 8006dd0:	429c      	cmp	r4, r3
 8006dd2:	d101      	bne.n	8006dd8 <__swbuf_r+0x78>
 8006dd4:	68ac      	ldr	r4, [r5, #8]
 8006dd6:	e7d0      	b.n	8006d7a <__swbuf_r+0x1a>
 8006dd8:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <__swbuf_r+0xa0>)
 8006dda:	429c      	cmp	r4, r3
 8006ddc:	bf08      	it	eq
 8006dde:	68ec      	ldreq	r4, [r5, #12]
 8006de0:	e7cb      	b.n	8006d7a <__swbuf_r+0x1a>
 8006de2:	4621      	mov	r1, r4
 8006de4:	4628      	mov	r0, r5
 8006de6:	f000 f81f 	bl	8006e28 <__swsetup_r>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	d0cc      	beq.n	8006d88 <__swbuf_r+0x28>
 8006dee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006df2:	4638      	mov	r0, r7
 8006df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df6:	bf00      	nop
 8006df8:	080074f8 	.word	0x080074f8
 8006dfc:	08007518 	.word	0x08007518
 8006e00:	080074d8 	.word	0x080074d8

08006e04 <_write_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4605      	mov	r5, r0
 8006e08:	4608      	mov	r0, r1
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4c05      	ldr	r4, [pc, #20]	; (8006e24 <_write_r+0x20>)
 8006e10:	6022      	str	r2, [r4, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	f7fe fcf1 	bl	80057fa <_write>
 8006e18:	1c43      	adds	r3, r0, #1
 8006e1a:	d102      	bne.n	8006e22 <_write_r+0x1e>
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	b103      	cbz	r3, 8006e22 <_write_r+0x1e>
 8006e20:	602b      	str	r3, [r5, #0]
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	20000b3c 	.word	0x20000b3c

08006e28 <__swsetup_r>:
 8006e28:	4b32      	ldr	r3, [pc, #200]	; (8006ef4 <__swsetup_r+0xcc>)
 8006e2a:	b570      	push	{r4, r5, r6, lr}
 8006e2c:	681d      	ldr	r5, [r3, #0]
 8006e2e:	4606      	mov	r6, r0
 8006e30:	460c      	mov	r4, r1
 8006e32:	b125      	cbz	r5, 8006e3e <__swsetup_r+0x16>
 8006e34:	69ab      	ldr	r3, [r5, #24]
 8006e36:	b913      	cbnz	r3, 8006e3e <__swsetup_r+0x16>
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f7ff fa41 	bl	80062c0 <__sinit>
 8006e3e:	4b2e      	ldr	r3, [pc, #184]	; (8006ef8 <__swsetup_r+0xd0>)
 8006e40:	429c      	cmp	r4, r3
 8006e42:	d10f      	bne.n	8006e64 <__swsetup_r+0x3c>
 8006e44:	686c      	ldr	r4, [r5, #4]
 8006e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	0715      	lsls	r5, r2, #28
 8006e4e:	d42c      	bmi.n	8006eaa <__swsetup_r+0x82>
 8006e50:	06d0      	lsls	r0, r2, #27
 8006e52:	d411      	bmi.n	8006e78 <__swsetup_r+0x50>
 8006e54:	2209      	movs	r2, #9
 8006e56:	6032      	str	r2, [r6, #0]
 8006e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e5c:	81a3      	strh	r3, [r4, #12]
 8006e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e62:	e03e      	b.n	8006ee2 <__swsetup_r+0xba>
 8006e64:	4b25      	ldr	r3, [pc, #148]	; (8006efc <__swsetup_r+0xd4>)
 8006e66:	429c      	cmp	r4, r3
 8006e68:	d101      	bne.n	8006e6e <__swsetup_r+0x46>
 8006e6a:	68ac      	ldr	r4, [r5, #8]
 8006e6c:	e7eb      	b.n	8006e46 <__swsetup_r+0x1e>
 8006e6e:	4b24      	ldr	r3, [pc, #144]	; (8006f00 <__swsetup_r+0xd8>)
 8006e70:	429c      	cmp	r4, r3
 8006e72:	bf08      	it	eq
 8006e74:	68ec      	ldreq	r4, [r5, #12]
 8006e76:	e7e6      	b.n	8006e46 <__swsetup_r+0x1e>
 8006e78:	0751      	lsls	r1, r2, #29
 8006e7a:	d512      	bpl.n	8006ea2 <__swsetup_r+0x7a>
 8006e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e7e:	b141      	cbz	r1, 8006e92 <__swsetup_r+0x6a>
 8006e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e84:	4299      	cmp	r1, r3
 8006e86:	d002      	beq.n	8006e8e <__swsetup_r+0x66>
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f000 f9a5 	bl	80071d8 <_free_r>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	6363      	str	r3, [r4, #52]	; 0x34
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e98:	81a3      	strh	r3, [r4, #12]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	6063      	str	r3, [r4, #4]
 8006e9e:	6923      	ldr	r3, [r4, #16]
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	f043 0308 	orr.w	r3, r3, #8
 8006ea8:	81a3      	strh	r3, [r4, #12]
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	b94b      	cbnz	r3, 8006ec2 <__swsetup_r+0x9a>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb8:	d003      	beq.n	8006ec2 <__swsetup_r+0x9a>
 8006eba:	4621      	mov	r1, r4
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f000 f917 	bl	80070f0 <__smakebuf_r>
 8006ec2:	89a2      	ldrh	r2, [r4, #12]
 8006ec4:	f012 0301 	ands.w	r3, r2, #1
 8006ec8:	d00c      	beq.n	8006ee4 <__swsetup_r+0xbc>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60a3      	str	r3, [r4, #8]
 8006ece:	6963      	ldr	r3, [r4, #20]
 8006ed0:	425b      	negs	r3, r3
 8006ed2:	61a3      	str	r3, [r4, #24]
 8006ed4:	6923      	ldr	r3, [r4, #16]
 8006ed6:	b953      	cbnz	r3, 8006eee <__swsetup_r+0xc6>
 8006ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006edc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006ee0:	d1ba      	bne.n	8006e58 <__swsetup_r+0x30>
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	0792      	lsls	r2, r2, #30
 8006ee6:	bf58      	it	pl
 8006ee8:	6963      	ldrpl	r3, [r4, #20]
 8006eea:	60a3      	str	r3, [r4, #8]
 8006eec:	e7f2      	b.n	8006ed4 <__swsetup_r+0xac>
 8006eee:	2000      	movs	r0, #0
 8006ef0:	e7f7      	b.n	8006ee2 <__swsetup_r+0xba>
 8006ef2:	bf00      	nop
 8006ef4:	20000010 	.word	0x20000010
 8006ef8:	080074f8 	.word	0x080074f8
 8006efc:	08007518 	.word	0x08007518
 8006f00:	080074d8 	.word	0x080074d8

08006f04 <_close_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	2300      	movs	r3, #0
 8006f08:	4c05      	ldr	r4, [pc, #20]	; (8006f20 <_close_r+0x1c>)
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	f7fe fc8f 	bl	8005832 <_close>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_close_r+0x1a>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_close_r+0x1a>
 8006f1c:	602b      	str	r3, [r5, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	20000b3c 	.word	0x20000b3c

08006f24 <__sflush_r>:
 8006f24:	898a      	ldrh	r2, [r1, #12]
 8006f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	0710      	lsls	r0, r2, #28
 8006f2e:	460c      	mov	r4, r1
 8006f30:	d458      	bmi.n	8006fe4 <__sflush_r+0xc0>
 8006f32:	684b      	ldr	r3, [r1, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	dc05      	bgt.n	8006f44 <__sflush_r+0x20>
 8006f38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	dc02      	bgt.n	8006f44 <__sflush_r+0x20>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	d0f9      	beq.n	8006f3e <__sflush_r+0x1a>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f50:	682f      	ldr	r7, [r5, #0]
 8006f52:	6a21      	ldr	r1, [r4, #32]
 8006f54:	602b      	str	r3, [r5, #0]
 8006f56:	d032      	beq.n	8006fbe <__sflush_r+0x9a>
 8006f58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	075a      	lsls	r2, r3, #29
 8006f5e:	d505      	bpl.n	8006f6c <__sflush_r+0x48>
 8006f60:	6863      	ldr	r3, [r4, #4]
 8006f62:	1ac0      	subs	r0, r0, r3
 8006f64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f66:	b10b      	cbz	r3, 8006f6c <__sflush_r+0x48>
 8006f68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f6a:	1ac0      	subs	r0, r0, r3
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f72:	6a21      	ldr	r1, [r4, #32]
 8006f74:	4628      	mov	r0, r5
 8006f76:	47b0      	blx	r6
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	d106      	bne.n	8006f8c <__sflush_r+0x68>
 8006f7e:	6829      	ldr	r1, [r5, #0]
 8006f80:	291d      	cmp	r1, #29
 8006f82:	d848      	bhi.n	8007016 <__sflush_r+0xf2>
 8006f84:	4a29      	ldr	r2, [pc, #164]	; (800702c <__sflush_r+0x108>)
 8006f86:	40ca      	lsrs	r2, r1
 8006f88:	07d6      	lsls	r6, r2, #31
 8006f8a:	d544      	bpl.n	8007016 <__sflush_r+0xf2>
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	6062      	str	r2, [r4, #4]
 8006f90:	6922      	ldr	r2, [r4, #16]
 8006f92:	04d9      	lsls	r1, r3, #19
 8006f94:	6022      	str	r2, [r4, #0]
 8006f96:	d504      	bpl.n	8006fa2 <__sflush_r+0x7e>
 8006f98:	1c42      	adds	r2, r0, #1
 8006f9a:	d101      	bne.n	8006fa0 <__sflush_r+0x7c>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b903      	cbnz	r3, 8006fa2 <__sflush_r+0x7e>
 8006fa0:	6560      	str	r0, [r4, #84]	; 0x54
 8006fa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fa4:	602f      	str	r7, [r5, #0]
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	d0c9      	beq.n	8006f3e <__sflush_r+0x1a>
 8006faa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fae:	4299      	cmp	r1, r3
 8006fb0:	d002      	beq.n	8006fb8 <__sflush_r+0x94>
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 f910 	bl	80071d8 <_free_r>
 8006fb8:	2000      	movs	r0, #0
 8006fba:	6360      	str	r0, [r4, #52]	; 0x34
 8006fbc:	e7c0      	b.n	8006f40 <__sflush_r+0x1c>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47b0      	blx	r6
 8006fc4:	1c41      	adds	r1, r0, #1
 8006fc6:	d1c8      	bne.n	8006f5a <__sflush_r+0x36>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0c5      	beq.n	8006f5a <__sflush_r+0x36>
 8006fce:	2b1d      	cmp	r3, #29
 8006fd0:	d001      	beq.n	8006fd6 <__sflush_r+0xb2>
 8006fd2:	2b16      	cmp	r3, #22
 8006fd4:	d101      	bne.n	8006fda <__sflush_r+0xb6>
 8006fd6:	602f      	str	r7, [r5, #0]
 8006fd8:	e7b1      	b.n	8006f3e <__sflush_r+0x1a>
 8006fda:	89a3      	ldrh	r3, [r4, #12]
 8006fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fe0:	81a3      	strh	r3, [r4, #12]
 8006fe2:	e7ad      	b.n	8006f40 <__sflush_r+0x1c>
 8006fe4:	690f      	ldr	r7, [r1, #16]
 8006fe6:	2f00      	cmp	r7, #0
 8006fe8:	d0a9      	beq.n	8006f3e <__sflush_r+0x1a>
 8006fea:	0793      	lsls	r3, r2, #30
 8006fec:	bf18      	it	ne
 8006fee:	2300      	movne	r3, #0
 8006ff0:	680e      	ldr	r6, [r1, #0]
 8006ff2:	bf08      	it	eq
 8006ff4:	694b      	ldreq	r3, [r1, #20]
 8006ff6:	eba6 0807 	sub.w	r8, r6, r7
 8006ffa:	600f      	str	r7, [r1, #0]
 8006ffc:	608b      	str	r3, [r1, #8]
 8006ffe:	f1b8 0f00 	cmp.w	r8, #0
 8007002:	dd9c      	ble.n	8006f3e <__sflush_r+0x1a>
 8007004:	4643      	mov	r3, r8
 8007006:	463a      	mov	r2, r7
 8007008:	6a21      	ldr	r1, [r4, #32]
 800700a:	4628      	mov	r0, r5
 800700c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800700e:	47b0      	blx	r6
 8007010:	2800      	cmp	r0, #0
 8007012:	dc06      	bgt.n	8007022 <__sflush_r+0xfe>
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800701a:	81a3      	strh	r3, [r4, #12]
 800701c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007020:	e78e      	b.n	8006f40 <__sflush_r+0x1c>
 8007022:	4407      	add	r7, r0
 8007024:	eba8 0800 	sub.w	r8, r8, r0
 8007028:	e7e9      	b.n	8006ffe <__sflush_r+0xda>
 800702a:	bf00      	nop
 800702c:	20400001 	.word	0x20400001

08007030 <_fflush_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	690b      	ldr	r3, [r1, #16]
 8007034:	4605      	mov	r5, r0
 8007036:	460c      	mov	r4, r1
 8007038:	b1db      	cbz	r3, 8007072 <_fflush_r+0x42>
 800703a:	b118      	cbz	r0, 8007044 <_fflush_r+0x14>
 800703c:	6983      	ldr	r3, [r0, #24]
 800703e:	b90b      	cbnz	r3, 8007044 <_fflush_r+0x14>
 8007040:	f7ff f93e 	bl	80062c0 <__sinit>
 8007044:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <_fflush_r+0x48>)
 8007046:	429c      	cmp	r4, r3
 8007048:	d109      	bne.n	800705e <_fflush_r+0x2e>
 800704a:	686c      	ldr	r4, [r5, #4]
 800704c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007050:	b17b      	cbz	r3, 8007072 <_fflush_r+0x42>
 8007052:	4621      	mov	r1, r4
 8007054:	4628      	mov	r0, r5
 8007056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800705a:	f7ff bf63 	b.w	8006f24 <__sflush_r>
 800705e:	4b07      	ldr	r3, [pc, #28]	; (800707c <_fflush_r+0x4c>)
 8007060:	429c      	cmp	r4, r3
 8007062:	d101      	bne.n	8007068 <_fflush_r+0x38>
 8007064:	68ac      	ldr	r4, [r5, #8]
 8007066:	e7f1      	b.n	800704c <_fflush_r+0x1c>
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <_fflush_r+0x50>)
 800706a:	429c      	cmp	r4, r3
 800706c:	bf08      	it	eq
 800706e:	68ec      	ldreq	r4, [r5, #12]
 8007070:	e7ec      	b.n	800704c <_fflush_r+0x1c>
 8007072:	2000      	movs	r0, #0
 8007074:	bd38      	pop	{r3, r4, r5, pc}
 8007076:	bf00      	nop
 8007078:	080074f8 	.word	0x080074f8
 800707c:	08007518 	.word	0x08007518
 8007080:	080074d8 	.word	0x080074d8

08007084 <_lseek_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4605      	mov	r5, r0
 8007088:	4608      	mov	r0, r1
 800708a:	4611      	mov	r1, r2
 800708c:	2200      	movs	r2, #0
 800708e:	4c05      	ldr	r4, [pc, #20]	; (80070a4 <_lseek_r+0x20>)
 8007090:	6022      	str	r2, [r4, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f7fe fbf1 	bl	800587a <_lseek>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_lseek_r+0x1e>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_lseek_r+0x1e>
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	20000b3c 	.word	0x20000b3c

080070a8 <__swhatbuf_r>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	460e      	mov	r6, r1
 80070ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b0:	b096      	sub	sp, #88	; 0x58
 80070b2:	2900      	cmp	r1, #0
 80070b4:	4614      	mov	r4, r2
 80070b6:	461d      	mov	r5, r3
 80070b8:	da07      	bge.n	80070ca <__swhatbuf_r+0x22>
 80070ba:	2300      	movs	r3, #0
 80070bc:	602b      	str	r3, [r5, #0]
 80070be:	89b3      	ldrh	r3, [r6, #12]
 80070c0:	061a      	lsls	r2, r3, #24
 80070c2:	d410      	bmi.n	80070e6 <__swhatbuf_r+0x3e>
 80070c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c8:	e00e      	b.n	80070e8 <__swhatbuf_r+0x40>
 80070ca:	466a      	mov	r2, sp
 80070cc:	f000 f908 	bl	80072e0 <_fstat_r>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	dbf2      	blt.n	80070ba <__swhatbuf_r+0x12>
 80070d4:	9a01      	ldr	r2, [sp, #4]
 80070d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070de:	425a      	negs	r2, r3
 80070e0:	415a      	adcs	r2, r3
 80070e2:	602a      	str	r2, [r5, #0]
 80070e4:	e7ee      	b.n	80070c4 <__swhatbuf_r+0x1c>
 80070e6:	2340      	movs	r3, #64	; 0x40
 80070e8:	2000      	movs	r0, #0
 80070ea:	6023      	str	r3, [r4, #0]
 80070ec:	b016      	add	sp, #88	; 0x58
 80070ee:	bd70      	pop	{r4, r5, r6, pc}

080070f0 <__smakebuf_r>:
 80070f0:	898b      	ldrh	r3, [r1, #12]
 80070f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070f4:	079d      	lsls	r5, r3, #30
 80070f6:	4606      	mov	r6, r0
 80070f8:	460c      	mov	r4, r1
 80070fa:	d507      	bpl.n	800710c <__smakebuf_r+0x1c>
 80070fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	6123      	str	r3, [r4, #16]
 8007104:	2301      	movs	r3, #1
 8007106:	6163      	str	r3, [r4, #20]
 8007108:	b002      	add	sp, #8
 800710a:	bd70      	pop	{r4, r5, r6, pc}
 800710c:	ab01      	add	r3, sp, #4
 800710e:	466a      	mov	r2, sp
 8007110:	f7ff ffca 	bl	80070a8 <__swhatbuf_r>
 8007114:	9900      	ldr	r1, [sp, #0]
 8007116:	4605      	mov	r5, r0
 8007118:	4630      	mov	r0, r6
 800711a:	f7ff f95b 	bl	80063d4 <_malloc_r>
 800711e:	b948      	cbnz	r0, 8007134 <__smakebuf_r+0x44>
 8007120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007124:	059a      	lsls	r2, r3, #22
 8007126:	d4ef      	bmi.n	8007108 <__smakebuf_r+0x18>
 8007128:	f023 0303 	bic.w	r3, r3, #3
 800712c:	f043 0302 	orr.w	r3, r3, #2
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	e7e3      	b.n	80070fc <__smakebuf_r+0xc>
 8007134:	4b0d      	ldr	r3, [pc, #52]	; (800716c <__smakebuf_r+0x7c>)
 8007136:	62b3      	str	r3, [r6, #40]	; 0x28
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	6020      	str	r0, [r4, #0]
 800713c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	9b00      	ldr	r3, [sp, #0]
 8007144:	6120      	str	r0, [r4, #16]
 8007146:	6163      	str	r3, [r4, #20]
 8007148:	9b01      	ldr	r3, [sp, #4]
 800714a:	b15b      	cbz	r3, 8007164 <__smakebuf_r+0x74>
 800714c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007150:	4630      	mov	r0, r6
 8007152:	f000 f8d7 	bl	8007304 <_isatty_r>
 8007156:	b128      	cbz	r0, 8007164 <__smakebuf_r+0x74>
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	f023 0303 	bic.w	r3, r3, #3
 800715e:	f043 0301 	orr.w	r3, r3, #1
 8007162:	81a3      	strh	r3, [r4, #12]
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	431d      	orrs	r5, r3
 8007168:	81a5      	strh	r5, [r4, #12]
 800716a:	e7cd      	b.n	8007108 <__smakebuf_r+0x18>
 800716c:	08006289 	.word	0x08006289

08007170 <memchr>:
 8007170:	b510      	push	{r4, lr}
 8007172:	b2c9      	uxtb	r1, r1
 8007174:	4402      	add	r2, r0
 8007176:	4290      	cmp	r0, r2
 8007178:	4603      	mov	r3, r0
 800717a:	d101      	bne.n	8007180 <memchr+0x10>
 800717c:	2300      	movs	r3, #0
 800717e:	e003      	b.n	8007188 <memchr+0x18>
 8007180:	781c      	ldrb	r4, [r3, #0]
 8007182:	3001      	adds	r0, #1
 8007184:	428c      	cmp	r4, r1
 8007186:	d1f6      	bne.n	8007176 <memchr+0x6>
 8007188:	4618      	mov	r0, r3
 800718a:	bd10      	pop	{r4, pc}

0800718c <memcpy>:
 800718c:	b510      	push	{r4, lr}
 800718e:	1e43      	subs	r3, r0, #1
 8007190:	440a      	add	r2, r1
 8007192:	4291      	cmp	r1, r2
 8007194:	d100      	bne.n	8007198 <memcpy+0xc>
 8007196:	bd10      	pop	{r4, pc}
 8007198:	f811 4b01 	ldrb.w	r4, [r1], #1
 800719c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071a0:	e7f7      	b.n	8007192 <memcpy+0x6>

080071a2 <memmove>:
 80071a2:	4288      	cmp	r0, r1
 80071a4:	b510      	push	{r4, lr}
 80071a6:	eb01 0302 	add.w	r3, r1, r2
 80071aa:	d807      	bhi.n	80071bc <memmove+0x1a>
 80071ac:	1e42      	subs	r2, r0, #1
 80071ae:	4299      	cmp	r1, r3
 80071b0:	d00a      	beq.n	80071c8 <memmove+0x26>
 80071b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80071ba:	e7f8      	b.n	80071ae <memmove+0xc>
 80071bc:	4283      	cmp	r3, r0
 80071be:	d9f5      	bls.n	80071ac <memmove+0xa>
 80071c0:	1881      	adds	r1, r0, r2
 80071c2:	1ad2      	subs	r2, r2, r3
 80071c4:	42d3      	cmn	r3, r2
 80071c6:	d100      	bne.n	80071ca <memmove+0x28>
 80071c8:	bd10      	pop	{r4, pc}
 80071ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80071d2:	e7f7      	b.n	80071c4 <memmove+0x22>

080071d4 <__malloc_lock>:
 80071d4:	4770      	bx	lr

080071d6 <__malloc_unlock>:
 80071d6:	4770      	bx	lr

080071d8 <_free_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4605      	mov	r5, r0
 80071dc:	2900      	cmp	r1, #0
 80071de:	d043      	beq.n	8007268 <_free_r+0x90>
 80071e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e4:	1f0c      	subs	r4, r1, #4
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	bfb8      	it	lt
 80071ea:	18e4      	addlt	r4, r4, r3
 80071ec:	f7ff fff2 	bl	80071d4 <__malloc_lock>
 80071f0:	4a1e      	ldr	r2, [pc, #120]	; (800726c <_free_r+0x94>)
 80071f2:	6813      	ldr	r3, [r2, #0]
 80071f4:	4610      	mov	r0, r2
 80071f6:	b933      	cbnz	r3, 8007206 <_free_r+0x2e>
 80071f8:	6063      	str	r3, [r4, #4]
 80071fa:	6014      	str	r4, [r2, #0]
 80071fc:	4628      	mov	r0, r5
 80071fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007202:	f7ff bfe8 	b.w	80071d6 <__malloc_unlock>
 8007206:	42a3      	cmp	r3, r4
 8007208:	d90b      	bls.n	8007222 <_free_r+0x4a>
 800720a:	6821      	ldr	r1, [r4, #0]
 800720c:	1862      	adds	r2, r4, r1
 800720e:	4293      	cmp	r3, r2
 8007210:	bf01      	itttt	eq
 8007212:	681a      	ldreq	r2, [r3, #0]
 8007214:	685b      	ldreq	r3, [r3, #4]
 8007216:	1852      	addeq	r2, r2, r1
 8007218:	6022      	streq	r2, [r4, #0]
 800721a:	6063      	str	r3, [r4, #4]
 800721c:	6004      	str	r4, [r0, #0]
 800721e:	e7ed      	b.n	80071fc <_free_r+0x24>
 8007220:	4613      	mov	r3, r2
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	b10a      	cbz	r2, 800722a <_free_r+0x52>
 8007226:	42a2      	cmp	r2, r4
 8007228:	d9fa      	bls.n	8007220 <_free_r+0x48>
 800722a:	6819      	ldr	r1, [r3, #0]
 800722c:	1858      	adds	r0, r3, r1
 800722e:	42a0      	cmp	r0, r4
 8007230:	d10b      	bne.n	800724a <_free_r+0x72>
 8007232:	6820      	ldr	r0, [r4, #0]
 8007234:	4401      	add	r1, r0
 8007236:	1858      	adds	r0, r3, r1
 8007238:	4282      	cmp	r2, r0
 800723a:	6019      	str	r1, [r3, #0]
 800723c:	d1de      	bne.n	80071fc <_free_r+0x24>
 800723e:	6810      	ldr	r0, [r2, #0]
 8007240:	6852      	ldr	r2, [r2, #4]
 8007242:	4401      	add	r1, r0
 8007244:	6019      	str	r1, [r3, #0]
 8007246:	605a      	str	r2, [r3, #4]
 8007248:	e7d8      	b.n	80071fc <_free_r+0x24>
 800724a:	d902      	bls.n	8007252 <_free_r+0x7a>
 800724c:	230c      	movs	r3, #12
 800724e:	602b      	str	r3, [r5, #0]
 8007250:	e7d4      	b.n	80071fc <_free_r+0x24>
 8007252:	6820      	ldr	r0, [r4, #0]
 8007254:	1821      	adds	r1, r4, r0
 8007256:	428a      	cmp	r2, r1
 8007258:	bf01      	itttt	eq
 800725a:	6811      	ldreq	r1, [r2, #0]
 800725c:	6852      	ldreq	r2, [r2, #4]
 800725e:	1809      	addeq	r1, r1, r0
 8007260:	6021      	streq	r1, [r4, #0]
 8007262:	6062      	str	r2, [r4, #4]
 8007264:	605c      	str	r4, [r3, #4]
 8007266:	e7c9      	b.n	80071fc <_free_r+0x24>
 8007268:	bd38      	pop	{r3, r4, r5, pc}
 800726a:	bf00      	nop
 800726c:	200000c8 	.word	0x200000c8

08007270 <_realloc_r>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	4607      	mov	r7, r0
 8007274:	4614      	mov	r4, r2
 8007276:	460e      	mov	r6, r1
 8007278:	b921      	cbnz	r1, 8007284 <_realloc_r+0x14>
 800727a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800727e:	4611      	mov	r1, r2
 8007280:	f7ff b8a8 	b.w	80063d4 <_malloc_r>
 8007284:	b922      	cbnz	r2, 8007290 <_realloc_r+0x20>
 8007286:	f7ff ffa7 	bl	80071d8 <_free_r>
 800728a:	4625      	mov	r5, r4
 800728c:	4628      	mov	r0, r5
 800728e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007290:	f000 f848 	bl	8007324 <_malloc_usable_size_r>
 8007294:	42a0      	cmp	r0, r4
 8007296:	d20f      	bcs.n	80072b8 <_realloc_r+0x48>
 8007298:	4621      	mov	r1, r4
 800729a:	4638      	mov	r0, r7
 800729c:	f7ff f89a 	bl	80063d4 <_malloc_r>
 80072a0:	4605      	mov	r5, r0
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d0f2      	beq.n	800728c <_realloc_r+0x1c>
 80072a6:	4631      	mov	r1, r6
 80072a8:	4622      	mov	r2, r4
 80072aa:	f7ff ff6f 	bl	800718c <memcpy>
 80072ae:	4631      	mov	r1, r6
 80072b0:	4638      	mov	r0, r7
 80072b2:	f7ff ff91 	bl	80071d8 <_free_r>
 80072b6:	e7e9      	b.n	800728c <_realloc_r+0x1c>
 80072b8:	4635      	mov	r5, r6
 80072ba:	e7e7      	b.n	800728c <_realloc_r+0x1c>

080072bc <_read_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4605      	mov	r5, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	4611      	mov	r1, r2
 80072c4:	2200      	movs	r2, #0
 80072c6:	4c05      	ldr	r4, [pc, #20]	; (80072dc <_read_r+0x20>)
 80072c8:	6022      	str	r2, [r4, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f7fe fa78 	bl	80057c0 <_read>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_read_r+0x1e>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	b103      	cbz	r3, 80072da <_read_r+0x1e>
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	20000b3c 	.word	0x20000b3c

080072e0 <_fstat_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	2300      	movs	r3, #0
 80072e4:	4c06      	ldr	r4, [pc, #24]	; (8007300 <_fstat_r+0x20>)
 80072e6:	4605      	mov	r5, r0
 80072e8:	4608      	mov	r0, r1
 80072ea:	4611      	mov	r1, r2
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	f7fe faab 	bl	8005848 <_fstat>
 80072f2:	1c43      	adds	r3, r0, #1
 80072f4:	d102      	bne.n	80072fc <_fstat_r+0x1c>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	b103      	cbz	r3, 80072fc <_fstat_r+0x1c>
 80072fa:	602b      	str	r3, [r5, #0]
 80072fc:	bd38      	pop	{r3, r4, r5, pc}
 80072fe:	bf00      	nop
 8007300:	20000b3c 	.word	0x20000b3c

08007304 <_isatty_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	2300      	movs	r3, #0
 8007308:	4c05      	ldr	r4, [pc, #20]	; (8007320 <_isatty_r+0x1c>)
 800730a:	4605      	mov	r5, r0
 800730c:	4608      	mov	r0, r1
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	f7fe faa9 	bl	8005866 <_isatty>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	d102      	bne.n	800731e <_isatty_r+0x1a>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	b103      	cbz	r3, 800731e <_isatty_r+0x1a>
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	bd38      	pop	{r3, r4, r5, pc}
 8007320:	20000b3c 	.word	0x20000b3c

08007324 <_malloc_usable_size_r>:
 8007324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007328:	1f18      	subs	r0, r3, #4
 800732a:	2b00      	cmp	r3, #0
 800732c:	bfbc      	itt	lt
 800732e:	580b      	ldrlt	r3, [r1, r0]
 8007330:	18c0      	addlt	r0, r0, r3
 8007332:	4770      	bx	lr

08007334 <_init>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	bf00      	nop
 8007338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733a:	bc08      	pop	{r3}
 800733c:	469e      	mov	lr, r3
 800733e:	4770      	bx	lr

08007340 <_fini>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr
